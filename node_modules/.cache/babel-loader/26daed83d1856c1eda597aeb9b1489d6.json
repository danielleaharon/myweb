{"ast":null,"code":"import { isBrowser } from '@loaders.gl/loader-utils';\nimport { ConsoleLog } from './loggers';\nexport const DEFAULT_LOADER_OPTIONS = {\n  fetch: null,\n  mimeType: undefined,\n  nothrow: false,\n  log: new ConsoleLog(),\n  CDN: 'https://unpkg.com/@loaders.gl',\n  worker: true,\n  maxConcurrency: 3,\n  maxMobileConcurrency: 1,\n  reuseWorkers: isBrowser,\n  _nodeWorkers: false,\n  _workerType: '',\n  limit: 0,\n  _limitMB: 0,\n  batchSize: 'auto',\n  batchDebounceMs: 0,\n  metadata: false,\n  transforms: []\n};\nexport const REMOVED_LOADER_OPTIONS = {\n  throws: 'nothrow',\n  dataType: '(no longer used)',\n  uri: 'baseUri',\n  method: 'fetch.method',\n  headers: 'fetch.headers',\n  body: 'fetch.body',\n  mode: 'fetch.mode',\n  credentials: 'fetch.credentials',\n  cache: 'fetch.cache',\n  redirect: 'fetch.redirect',\n  referrer: 'fetch.referrer',\n  referrerPolicy: 'fetch.referrerPolicy',\n  integrity: 'fetch.integrity',\n  keepalive: 'fetch.keepalive',\n  signal: 'fetch.signal'\n};","map":{"version":3,"sources":["../../../../src/lib/loader-utils/option-defaults.ts"],"names":["DEFAULT_LOADER_OPTIONS","fetch","mimeType","nothrow","log","CDN","worker","maxConcurrency","maxMobileConcurrency","reuseWorkers","_nodeWorkers","_workerType","limit","_limitMB","batchSize","batchDebounceMs","metadata","transforms","REMOVED_LOADER_OPTIONS","throws","dataType","uri","method","headers","body","mode","credentials","cache","redirect","referrer","referrerPolicy","integrity","keepalive","signal"],"mappings":"AACA,SAAA,SAAA,QAAA,0BAAA;AACA,SAAA,UAAA,QAAA,WAAA;AAEA,OAAO,MAAMA,sBAAqC,GAAG;AAEnDC,EAAAA,KAAK,EAF8C,IAAA;AAGnDC,EAAAA,QAAQ,EAH2C,SAAA;AAInDC,EAAAA,OAAO,EAJ4C,KAAA;AAKnDC,EAAAA,GAAG,EAAE,IAL8C,UAK9C,EAL8C;AAOnDC,EAAAA,GAAG,EAPgD,+BAAA;AAQnDC,EAAAA,MAAM,EAR6C,IAAA;AASnDC,EAAAA,cAAc,EATqC,CAAA;AAUnDC,EAAAA,oBAAoB,EAV+B,CAAA;AAWnDC,EAAAA,YAAY,EAXuC,SAAA;AAYnDC,EAAAA,YAAY,EAZuC,KAAA;AAanDC,EAAAA,WAAW,EAbwC,EAAA;AAenDC,EAAAA,KAAK,EAf8C,CAAA;AAgBnDC,EAAAA,QAAQ,EAhB2C,CAAA;AAiBnDC,EAAAA,SAAS,EAjB0C,MAAA;AAkBnDC,EAAAA,eAAe,EAlBoC,CAAA;AAmBnDC,EAAAA,QAAQ,EAnB2C,KAAA;AAoBnDC,EAAAA,UAAU,EAAE;AApBuC,CAA9C;AAuBP,OAAO,MAAMC,sBAAsB,GAAG;AACpCC,EAAAA,MAAM,EAD8B,SAAA;AAEpCC,EAAAA,QAAQ,EAF4B,kBAAA;AAGpCC,EAAAA,GAAG,EAHiC,SAAA;AAKpCC,EAAAA,MAAM,EAL8B,cAAA;AAMpCC,EAAAA,OAAO,EAN6B,eAAA;AAOpCC,EAAAA,IAAI,EAPgC,YAAA;AAQpCC,EAAAA,IAAI,EARgC,YAAA;AASpCC,EAAAA,WAAW,EATyB,mBAAA;AAUpCC,EAAAA,KAAK,EAV+B,aAAA;AAWpCC,EAAAA,QAAQ,EAX4B,gBAAA;AAYpCC,EAAAA,QAAQ,EAZ4B,gBAAA;AAapCC,EAAAA,cAAc,EAbsB,sBAAA;AAcpCC,EAAAA,SAAS,EAd2B,iBAAA;AAepCC,EAAAA,SAAS,EAf2B,iBAAA;AAgBpCC,EAAAA,MAAM,EAAE;AAhB4B,CAA/B","sourcesContent":["import type {LoaderOptions} from '@loaders.gl/loader-utils';\nimport {isBrowser} from '@loaders.gl/loader-utils';\nimport {ConsoleLog} from './loggers';\n\nexport const DEFAULT_LOADER_OPTIONS: LoaderOptions = {\n  // baseUri\n  fetch: null,\n  mimeType: undefined,\n  nothrow: false,\n  log: new ConsoleLog(), // A probe.gl compatible (`log.log()()` syntax) that just logs to console\n\n  CDN: 'https://unpkg.com/@loaders.gl',\n  worker: true, // By default, use worker if provided by loader.\n  maxConcurrency: 3, // How many worker instances should be created for each loader.\n  maxMobileConcurrency: 1, // How many worker instances should be created for each loader on mobile devices.\n  reuseWorkers: isBrowser, // By default reuse workers in browser (Node.js refuses to terminate if browsers are running)\n  _nodeWorkers: false, // By default do not support node workers\n  _workerType: '', // 'test' to use locally generated workers\n\n  limit: 0,\n  _limitMB: 0,\n  batchSize: 'auto',\n  batchDebounceMs: 0,\n  metadata: false, // TODO - currently only implemented for parseInBatches, adds initial metadata batch,\n  transforms: []\n};\n\nexport const REMOVED_LOADER_OPTIONS = {\n  throws: 'nothrow',\n  dataType: '(no longer used)',\n  uri: 'baseUri',\n  // Warn if fetch options are used on top-level\n  method: 'fetch.method',\n  headers: 'fetch.headers',\n  body: 'fetch.body',\n  mode: 'fetch.mode',\n  credentials: 'fetch.credentials',\n  cache: 'fetch.cache',\n  redirect: 'fetch.redirect',\n  referrer: 'fetch.referrer',\n  referrerPolicy: 'fetch.referrerPolicy',\n  integrity: 'fetch.integrity',\n  keepalive: 'fetch.keepalive',\n  signal: 'fetch.signal'\n};\n"]},"metadata":{},"sourceType":"module"}