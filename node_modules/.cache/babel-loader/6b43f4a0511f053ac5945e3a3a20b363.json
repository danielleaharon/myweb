{"ast":null,"code":"import { bitCode, intersect } from './lineclip';\nimport { getPointAtIndex, copy, push } from './utils';\nexport function cutPolylineByGrid(positions, options) {\n  const {\n    size = 2,\n    broken = false,\n    gridResolution = 10,\n    gridOffset = [0, 0],\n    startIndex = 0,\n    endIndex = positions.length\n  } = options || {};\n  const numPoints = (endIndex - startIndex) / size;\n  let part = [];\n  const result = [part];\n  const a = getPointAtIndex(positions, 0, size, startIndex);\n  let b;\n  let codeB;\n  const cell = getGridCell(a, gridResolution, gridOffset, []);\n  const scratchPoint = [];\n  push(part, a);\n\n  for (let i = 1; i < numPoints; i++) {\n    b = getPointAtIndex(positions, i, size, startIndex, b);\n    codeB = bitCode(b, cell);\n\n    while (codeB) {\n      intersect(a, b, codeB, cell, scratchPoint);\n      const codeAlt = bitCode(scratchPoint, cell);\n\n      if (codeAlt) {\n        intersect(a, scratchPoint, codeAlt, cell, scratchPoint);\n        codeB = codeAlt;\n      }\n\n      push(part, scratchPoint);\n      copy(a, scratchPoint);\n      moveToNeighborCell(cell, gridResolution, codeB);\n\n      if (broken && part.length > size) {\n        part = [];\n        result.push(part);\n        push(part, a);\n      }\n\n      codeB = bitCode(b, cell);\n    }\n\n    push(part, b);\n    copy(a, b);\n  }\n\n  return broken ? result : result[0];\n}\nconst TYPE_INSIDE = 0;\nconst TYPE_BORDER = 1;\n\nfunction concatInPlace(arr1, arr2) {\n  for (let i = 0; i < arr2.length; i++) {\n    arr1.push(arr2[i]);\n  }\n\n  return arr1;\n}\n\nexport function cutPolygonByGrid(positions, holeIndices = null, options) {\n  if (!positions.length) {\n    return [];\n  }\n\n  const {\n    size = 2,\n    gridResolution = 10,\n    gridOffset = [0, 0],\n    edgeTypes = false\n  } = options || {};\n  const result = [];\n  const queue = [{\n    pos: positions,\n    types: edgeTypes ? new Array(positions.length / size).fill(TYPE_BORDER) : null,\n    holes: holeIndices || []\n  }];\n  const bbox = [[], []];\n  let cell = [];\n\n  while (queue.length) {\n    const {\n      pos,\n      types,\n      holes\n    } = queue.shift();\n    getBoundingBox(pos, size, holes[0] || pos.length, bbox);\n    cell = getGridCell(bbox[0], gridResolution, gridOffset, cell);\n    const code = bitCode(bbox[1], cell);\n\n    if (code) {\n      let parts = bisectPolygon(pos, types, size, 0, holes[0] || pos.length, cell, code);\n      const polygonLow = {\n        pos: parts[0].pos,\n        types: parts[0].types,\n        holes: []\n      };\n      const polygonHigh = {\n        pos: parts[1].pos,\n        types: parts[1].types,\n        holes: []\n      };\n      queue.push(polygonLow, polygonHigh);\n\n      for (let i = 0; i < holes.length; i++) {\n        parts = bisectPolygon(pos, types, size, holes[i], holes[i + 1] || pos.length, cell, code);\n\n        if (parts[0]) {\n          polygonLow.holes.push(polygonLow.pos.length);\n          polygonLow.pos = concatInPlace(polygonLow.pos, parts[0].pos);\n\n          if (edgeTypes) {\n            polygonLow.types = concatInPlace(polygonLow.types, parts[0].types);\n          }\n        }\n\n        if (parts[1]) {\n          polygonHigh.holes.push(polygonHigh.pos.length);\n          polygonHigh.pos = concatInPlace(polygonHigh.pos, parts[1].pos);\n\n          if (edgeTypes) {\n            polygonHigh.types = concatInPlace(polygonHigh.types, parts[1].types);\n          }\n        }\n      }\n    } else {\n      const polygon = {\n        positions: pos\n      };\n\n      if (edgeTypes) {\n        polygon.edgeTypes = types;\n      }\n\n      if (holes.length) {\n        polygon.holeIndices = holes;\n      }\n\n      result.push(polygon);\n    }\n  }\n\n  return result;\n}\n\nfunction bisectPolygon(positions, edgeTypes, size, startIndex, endIndex, bbox, edge) {\n  const numPoints = (endIndex - startIndex) / size;\n  const resultLow = [];\n  const resultHigh = [];\n  const typesLow = [];\n  const typesHigh = [];\n  const scratchPoint = [];\n  let p;\n  let side;\n  let type;\n  const prev = getPointAtIndex(positions, numPoints - 1, size, startIndex);\n  let prevSide = Math.sign(edge & 8 ? prev[1] - bbox[3] : prev[0] - bbox[2]);\n  let prevType = edgeTypes && edgeTypes[numPoints - 1];\n  let lowPointCount = 0;\n  let highPointCount = 0;\n\n  for (let i = 0; i < numPoints; i++) {\n    p = getPointAtIndex(positions, i, size, startIndex, p);\n    side = Math.sign(edge & 8 ? p[1] - bbox[3] : p[0] - bbox[2]);\n    type = edgeTypes && edgeTypes[startIndex / size + i];\n\n    if (side && prevSide && prevSide !== side) {\n      intersect(prev, p, edge, bbox, scratchPoint);\n      push(resultLow, scratchPoint) && typesLow.push(prevType);\n      push(resultHigh, scratchPoint) && typesHigh.push(prevType);\n    }\n\n    if (side <= 0) {\n      push(resultLow, p) && typesLow.push(type);\n      lowPointCount -= side;\n    } else if (typesLow.length) {\n      typesLow[typesLow.length - 1] = TYPE_INSIDE;\n    }\n\n    if (side >= 0) {\n      push(resultHigh, p) && typesHigh.push(type);\n      highPointCount += side;\n    } else if (typesHigh.length) {\n      typesHigh[typesHigh.length - 1] = TYPE_INSIDE;\n    }\n\n    copy(prev, p);\n    prevSide = side;\n    prevType = type;\n  }\n\n  return [lowPointCount ? {\n    pos: resultLow,\n    types: edgeTypes && typesLow\n  } : null, highPointCount ? {\n    pos: resultHigh,\n    types: edgeTypes && typesHigh\n  } : null];\n}\n\nfunction getGridCell(p, gridResolution, gridOffset, out) {\n  const left = Math.floor((p[0] - gridOffset[0]) / gridResolution) * gridResolution + gridOffset[0];\n  const bottom = Math.floor((p[1] - gridOffset[1]) / gridResolution) * gridResolution + gridOffset[1];\n  out[0] = left;\n  out[1] = bottom;\n  out[2] = left + gridResolution;\n  out[3] = bottom + gridResolution;\n  return out;\n}\n\nfunction moveToNeighborCell(cell, gridResolution, edge) {\n  if (edge & 8) {\n    cell[1] += gridResolution;\n    cell[3] += gridResolution;\n  } else if (edge & 4) {\n    cell[1] -= gridResolution;\n    cell[3] -= gridResolution;\n  } else if (edge & 2) {\n    cell[0] += gridResolution;\n    cell[2] += gridResolution;\n  } else if (edge & 1) {\n    cell[0] -= gridResolution;\n    cell[2] -= gridResolution;\n  }\n}\n\nfunction getBoundingBox(positions, size, endIndex, out) {\n  let minX = Infinity;\n  let maxX = -Infinity;\n  let minY = Infinity;\n  let maxY = -Infinity;\n\n  for (let i = 0; i < endIndex; i += size) {\n    const x = positions[i];\n    const y = positions[i + 1];\n    minX = x < minX ? x : minX;\n    maxX = x > maxX ? x : maxX;\n    minY = y < minY ? y : minY;\n    maxY = y > maxY ? y : maxY;\n  }\n\n  out[0][0] = minX;\n  out[0][1] = minY;\n  out[1][0] = maxX;\n  out[1][1] = maxY;\n  return out;\n}","map":{"version":3,"sources":["../../src/cut-by-grid.ts"],"names":["size","broken","gridResolution","gridOffset","startIndex","endIndex","positions","length","options","numPoints","part","result","a","getPointAtIndex","cell","getGridCell","scratchPoint","push","i","b","codeB","bitCode","intersect","codeAlt","copy","moveToNeighborCell","TYPE_INSIDE","TYPE_BORDER","arr2","arr1","holeIndices","edgeTypes","queue","pos","types","holes","bbox","getBoundingBox","code","parts","bisectPolygon","polygonLow","polygonHigh","concatInPlace","polygon","resultLow","resultHigh","typesLow","typesHigh","prev","prevSide","Math","edge","prevType","lowPointCount","highPointCount","p","side","type","left","bottom","out","minX","maxX","minY","maxY","x","y"],"mappings":"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","sourcesContent":["/* eslint-disable max-statements, max-depth, complexity, no-unused-expressions */\nimport {bitCode, intersect, BoundingBox} from './lineclip';\nimport {getPointAtIndex, copy, push} from './utils';\n\nimport type {NumericArray} from '@math.gl/core';\n\nexport type Polygon = {\n  positions: Readonly<NumericArray>;\n  holeIndices?: Readonly<NumericArray>;\n  edgeTypes?: Readonly<NumericArray>;\n};\n\nexport function cutPolylineByGrid(\n  positions: NumericArray,\n  options?: {\n    size?: number;\n    broken?: boolean;\n    gridResolution?: number;\n    gridOffset?: [number, number];\n    startIndex?: number;\n    endIndex?: number;\n  }\n): number[] | number[][] {\n  const {\n    size = 2,\n    broken = false,\n    gridResolution = 10,\n    gridOffset = [0, 0],\n    startIndex = 0,\n    endIndex = positions.length\n  } = options || {};\n  const numPoints = (endIndex - startIndex) / size;\n  let part: number[] = [];\n  const result: number[][] = [part];\n  const a: number[] = getPointAtIndex(positions, 0, size, startIndex);\n  let b: number[];\n  let codeB: number;\n  const cell: BoundingBox = getGridCell(a, gridResolution, gridOffset, []);\n  const scratchPoint: number[] = [];\n  push(part, a);\n\n  for (let i = 1; i < numPoints; i++) {\n    b = getPointAtIndex(positions, i, size, startIndex, b);\n    codeB = bitCode(b, cell);\n\n    while (codeB) {\n      // find the intersection with the current cell\n      intersect(a, b, codeB, cell, scratchPoint);\n      const codeAlt = bitCode(scratchPoint, cell);\n      if (codeAlt) {\n        intersect(a, scratchPoint, codeAlt, cell, scratchPoint);\n        codeB = codeAlt;\n      }\n      push(part, scratchPoint);\n      // move to the next cell\n      copy(a, scratchPoint);\n\n      moveToNeighborCell(cell, gridResolution, codeB);\n      if (broken && part.length > size) {\n        part = [];\n        result.push(part);\n        push(part, a);\n      }\n\n      codeB = bitCode(b, cell);\n    }\n\n    push(part, b);\n    copy(a, b);\n  }\n\n  return broken ? result : result[0];\n}\n\nconst TYPE_INSIDE = 0;\nconst TYPE_BORDER = 1;\n\nfunction concatInPlace(arr1: number[], arr2: number[]): number[] {\n  for (let i = 0; i < arr2.length; i++) {\n    arr1.push(arr2[i]);\n  }\n  return arr1;\n}\n\nexport function cutPolygonByGrid(\n  positions: Readonly<NumericArray>,\n  holeIndices: Readonly<NumericArray> | null = null,\n  options?: {\n    size?: number;\n    gridResolution?: number;\n    gridOffset?: [number, number];\n    edgeTypes?: boolean;\n  }\n): Polygon[] {\n  if (!positions.length) {\n    // input is empty\n    return [];\n  }\n  const {size = 2, gridResolution = 10, gridOffset = [0, 0], edgeTypes = false} = options || {};\n  const result: Polygon[] = [];\n  const queue: {pos: Readonly<NumericArray>; types: number[]; holes: Readonly<NumericArray>}[] = [\n    {\n      pos: positions,\n      types: edgeTypes ? (new Array(positions.length / size).fill(TYPE_BORDER) as number[]) : null,\n      holes: holeIndices || []\n    }\n  ];\n  const bbox: number[][] = [[], []];\n  // @ts-ignore\n  let cell: BoundingBox = [];\n\n  // Recursively bisect polygon until every part fit in a single grid cell\n  while (queue.length) {\n    const {pos, types, holes} = queue.shift();\n\n    // Get the bounding box of the outer polygon\n    getBoundingBox(pos, size, holes[0] || pos.length, bbox);\n    cell = getGridCell(bbox[0], gridResolution, gridOffset, cell);\n    const code = bitCode(bbox[1], cell);\n\n    if (code) {\n      // Split the outer ring at the boundary\n      let parts = bisectPolygon(pos, types, size, 0, holes[0] || pos.length, cell, code);\n      const polygonLow = {pos: parts[0].pos, types: parts[0].types, holes: []};\n      const polygonHigh = {pos: parts[1].pos, types: parts[1].types, holes: []};\n      queue.push(polygonLow, polygonHigh);\n\n      // Split each hole at the boundary\n      for (let i = 0; i < holes.length; i++) {\n        parts = bisectPolygon(pos, types, size, holes[i], holes[i + 1] || pos.length, cell, code);\n\n        if (parts[0]) {\n          polygonLow.holes.push(polygonLow.pos.length);\n          polygonLow.pos = concatInPlace(polygonLow.pos, parts[0].pos);\n          if (edgeTypes) {\n            polygonLow.types = concatInPlace(polygonLow.types, parts[0].types);\n          }\n        }\n        if (parts[1]) {\n          polygonHigh.holes.push(polygonHigh.pos.length);\n          polygonHigh.pos = concatInPlace(polygonHigh.pos, parts[1].pos);\n          if (edgeTypes) {\n            polygonHigh.types = concatInPlace(polygonHigh.types, parts[1].types);\n          }\n        }\n      }\n    } else {\n      // Polygon fits in a single cell, no more processing required\n      const polygon: Polygon = {positions: pos};\n      if (edgeTypes) {\n        polygon.edgeTypes = types;\n      }\n      if (holes.length) {\n        polygon.holeIndices = holes;\n      }\n\n      result.push(polygon);\n    }\n  }\n  return result;\n}\n\n// edgeTypes:\n// TYPE_BORDER - edge from the original polygon\n// TYPE_INSIDE - inside the original polygon\n// eslint-disable-next-line max-params\nfunction bisectPolygon(\n  positions: Readonly<NumericArray>,\n  edgeTypes: number[] | undefined,\n  size: number,\n  startIndex: number,\n  endIndex: number,\n  bbox: BoundingBox,\n  edge: number\n): {\n  pos: number[];\n  types?: number[];\n}[] {\n  const numPoints = (endIndex - startIndex) / size;\n  const resultLow: number[] = [];\n  const resultHigh: number[] = [];\n  const typesLow: number[] = [];\n  const typesHigh: number[] = [];\n  const scratchPoint: number[] = [];\n\n  let p: number[];\n  let side: number;\n  let type: number;\n  const prev = getPointAtIndex(positions, numPoints - 1, size, startIndex);\n  let prevSide = Math.sign(edge & 8 ? prev[1] - bbox[3] : prev[0] - bbox[2]);\n  let prevType = edgeTypes && edgeTypes[numPoints - 1];\n  let lowPointCount = 0;\n  let highPointCount = 0;\n\n  for (let i = 0; i < numPoints; i++) {\n    p = getPointAtIndex(positions, i, size, startIndex, p);\n    side = Math.sign(edge & 8 ? p[1] - bbox[3] : p[0] - bbox[2]);\n    type = edgeTypes && edgeTypes[startIndex / size + i];\n\n    // if segment goes through the boundary, add an intersection\n    if (side && prevSide && prevSide !== side) {\n      intersect(prev, p, edge, bbox, scratchPoint);\n      push(resultLow, scratchPoint) && typesLow.push(prevType);\n      push(resultHigh, scratchPoint) && typesHigh.push(prevType);\n    }\n\n    if (side <= 0) {\n      push(resultLow, p) && typesLow.push(type);\n      lowPointCount -= side;\n    } else if (typesLow.length) {\n      typesLow[typesLow.length - 1] = TYPE_INSIDE;\n    }\n    if (side >= 0) {\n      push(resultHigh, p) && typesHigh.push(type);\n      highPointCount += side;\n    } else if (typesHigh.length) {\n      typesHigh[typesHigh.length - 1] = TYPE_INSIDE;\n    }\n\n    copy(prev, p);\n    prevSide = side;\n    prevType = type;\n  }\n\n  return [\n    lowPointCount ? {pos: resultLow, types: edgeTypes && typesLow} : null,\n    highPointCount ? {pos: resultHigh, types: edgeTypes && typesHigh} : null\n  ];\n}\n\nfunction getGridCell(\n  p: number[],\n  gridResolution: number,\n  gridOffset: [number, number],\n  out: number[]\n): BoundingBox {\n  const left = Math.floor((p[0] - gridOffset[0]) / gridResolution) * gridResolution + gridOffset[0];\n  const bottom =\n    Math.floor((p[1] - gridOffset[1]) / gridResolution) * gridResolution + gridOffset[1];\n  out[0] = left;\n  out[1] = bottom;\n  out[2] = left + gridResolution;\n  out[3] = bottom + gridResolution;\n  return out as BoundingBox;\n}\n\nfunction moveToNeighborCell(cell: number[], gridResolution: number, edge: number): void {\n  if (edge & 8) {\n    // top\n    cell[1] += gridResolution;\n    cell[3] += gridResolution;\n  } else if (edge & 4) {\n    // bottom\n    cell[1] -= gridResolution;\n    cell[3] -= gridResolution;\n  } else if (edge & 2) {\n    // right\n    cell[0] += gridResolution;\n    cell[2] += gridResolution;\n  } else if (edge & 1) {\n    // left\n    cell[0] -= gridResolution;\n    cell[2] -= gridResolution;\n  }\n}\n\nfunction getBoundingBox(\n  positions: Readonly<NumericArray>,\n  size: number,\n  endIndex: number,\n  out: number[][]\n): number[][] {\n  let minX = Infinity;\n  let maxX = -Infinity;\n  let minY = Infinity;\n  let maxY = -Infinity;\n\n  for (let i = 0; i < endIndex; i += size) {\n    const x = positions[i];\n    const y = positions[i + 1];\n    minX = x < minX ? x : minX;\n    maxX = x > maxX ? x : maxX;\n    minY = y < minY ? y : minY;\n    maxY = y > maxY ? y : maxY;\n  }\n\n  out[0][0] = minX;\n  out[0][1] = minY;\n  out[1][0] = maxX;\n  out[1][1] = maxY;\n  return out;\n}\n"]},"metadata":{},"sourceType":"module"}