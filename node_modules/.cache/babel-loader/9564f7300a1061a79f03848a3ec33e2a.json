{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport Layer from './layer';\nimport debug from '../debug';\nimport { flatten } from '../utils/flatten';\nconst TRACE_RENDER_LAYERS = 'compositeLayer.renderLayers';\nexport default class CompositeLayer extends Layer {\n  get isComposite() {\n    return true;\n  }\n\n  get isLoaded() {\n    return super.isLoaded && this.getSubLayers().every(layer => layer.isLoaded);\n  }\n\n  getSubLayers() {\n    return this.internalState && this.internalState.subLayers || [];\n  }\n\n  initializeState(context) {}\n\n  setState(updateObject) {\n    super.setState(updateObject);\n    this.setNeedsUpdate();\n  }\n\n  getPickingInfo({\n    info\n  }) {\n    const {\n      object\n    } = info;\n    const isDataWrapped = object && object.__source && object.__source.parent && object.__source.parent.id === this.id;\n\n    if (!isDataWrapped) {\n      return info;\n    }\n\n    info.object = object.__source.object;\n    info.index = object.__source.index;\n    return info;\n  }\n\n  filterSubLayer(context) {\n    return true;\n  }\n\n  shouldRenderSubLayer(subLayerId, data) {\n    return data && data.length;\n  }\n\n  getSubLayerClass(subLayerId, DefaultLayerClass) {\n    const {\n      _subLayerProps: overridingProps\n    } = this.props;\n    return overridingProps && overridingProps[subLayerId] && overridingProps[subLayerId].type || DefaultLayerClass;\n  }\n\n  getSubLayerRow(row, sourceObject, sourceObjectIndex) {\n    row.__source = {\n      parent: this,\n      object: sourceObject,\n      index: sourceObjectIndex\n    };\n    return row;\n  }\n\n  getSubLayerAccessor(accessor) {\n    if (typeof accessor === 'function') {\n      const objectInfo = {\n        index: -1,\n        data: this.props.data,\n        target: []\n      };\n      return (x, i) => {\n        if (x && x.__source) {\n          objectInfo.index = x.__source.index;\n          return accessor(x.__source.object, objectInfo);\n        }\n\n        return accessor(x, i);\n      };\n    }\n\n    return accessor;\n  }\n\n  getSubLayerProps(sublayerProps = {}) {\n    var _this$props$updateTri;\n\n    const {\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      fetch,\n      operation,\n      _subLayerProps: overridingProps\n    } = this.props;\n    const newProps = {\n      id: '',\n      updateTriggers: {},\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      fetch,\n      operation\n    };\n    const overridingSublayerProps = overridingProps && sublayerProps.id && overridingProps[sublayerProps.id];\n    const overridingSublayerTriggers = overridingSublayerProps && overridingSublayerProps.updateTriggers;\n    const sublayerId = sublayerProps.id || 'sublayer';\n\n    if (overridingSublayerProps) {\n      const propTypes = this.constructor._propTypes;\n      const subLayerPropTypes = sublayerProps.type ? sublayerProps.type._propTypes : {};\n\n      for (const key in overridingSublayerProps) {\n        const propType = subLayerPropTypes[key] || propTypes[key];\n\n        if (propType && propType.type === 'accessor') {\n          overridingSublayerProps[key] = this.getSubLayerAccessor(overridingSublayerProps[key]);\n        }\n      }\n    }\n\n    Object.assign(newProps, sublayerProps, overridingSublayerProps);\n    newProps.id = \"\".concat(this.props.id, \"-\").concat(sublayerId);\n    newProps.updateTriggers = {\n      all: (_this$props$updateTri = this.props.updateTriggers) === null || _this$props$updateTri === void 0 ? void 0 : _this$props$updateTri.all,\n      ...sublayerProps.updateTriggers,\n      ...overridingSublayerTriggers\n    };\n\n    for (const extension of extensions) {\n      const passThroughProps = extension.getSubLayerProps.call(this, extension);\n\n      if (passThroughProps) {\n        Object.assign(newProps, passThroughProps, {\n          updateTriggers: Object.assign(newProps.updateTriggers, passThroughProps.updateTriggers)\n        });\n      }\n    }\n\n    return newProps;\n  }\n\n  _updateAutoHighlight(info) {\n    for (const layer of this.getSubLayers()) {\n      layer.updateAutoHighlight(info);\n    }\n  }\n\n  _getAttributeManager() {\n    return null;\n  }\n\n  _postUpdate(updateParams, forceUpdate) {\n    let subLayers = this.internalState.subLayers;\n    const shouldUpdate = !subLayers || this.needsUpdate();\n\n    if (shouldUpdate) {\n      const subLayersList = this.renderLayers();\n      subLayers = flatten(subLayersList, Boolean);\n      this.internalState.subLayers = subLayers;\n    }\n\n    debug(TRACE_RENDER_LAYERS, this, shouldUpdate, subLayers);\n\n    for (const layer of subLayers) {\n      layer.parent = this;\n    }\n  }\n\n}\n\n_defineProperty(CompositeLayer, \"layerName\", 'CompositeLayer');","map":{"version":3,"sources":["../../../src/lib/composite-layer.ts"],"names":["TRACE_RENDER_LAYERS","CompositeLayer","isComposite","isLoaded","layer","getSubLayers","initializeState","setState","getPickingInfo","info","object","isDataWrapped","filterSubLayer","shouldRenderSubLayer","data","getSubLayerClass","_subLayerProps","overridingProps","getSubLayerRow","row","parent","index","sourceObjectIndex","getSubLayerAccessor","objectInfo","target","x","accessor","getSubLayerProps","sublayerProps","newProps","id","updateTriggers","operation","overridingSublayerProps","overridingSublayerTriggers","sublayerId","propTypes","subLayerPropTypes","propType","Object","all","passThroughProps","extension","_updateAutoHighlight","_getAttributeManager","_postUpdate","subLayers","shouldUpdate","subLayersList","flatten","debug"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport Layer, {UpdateParameters} from './layer';\nimport debug from '../debug';\nimport {flatten} from '../utils/flatten';\n\nimport type AttributeManager from './attribute/attribute-manager';\nimport type {PickingInfo, GetPickingInfoParams} from './picking/pick-info';\nimport type {FilterContext} from '../passes/layers-pass';\nimport type {LayersList, LayerContext} from './layer-manager';\nimport type {CompositeLayerProps, Accessor, AccessorContext} from '../types/layer-props';\nimport {ConstructorOf} from '../types/types';\n\nconst TRACE_RENDER_LAYERS = 'compositeLayer.renderLayers';\n\nexport default abstract class CompositeLayer<PropsT = {}> extends Layer<\n  PropsT & Required<CompositeLayerProps>\n> {\n  static layerName: string = 'CompositeLayer';\n\n  /** `true` if this layer renders other layers */\n  get isComposite(): boolean {\n    return true;\n  }\n\n  /** Returns true if all async resources are loaded */\n  get isLoaded(): boolean {\n    return super.isLoaded && this.getSubLayers().every(layer => layer.isLoaded);\n  }\n\n  /** Return last rendered sub layers */\n  getSubLayers(): Layer[] {\n    return (this.internalState && this.internalState.subLayers) || [];\n  }\n\n  // initializeState is usually not needed for composite layers\n  // Provide empty definition to disable check for missing definition\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  initializeState(context: LayerContext): void {}\n\n  /** Updates selected state members and marks the composite layer to need rerender */\n  setState(updateObject: any): void {\n    super.setState(updateObject);\n    // Trigger a layer update\n    // Although conceptually layer.draw and compositeLayer.renderLayers are equivalent,\n    // they are executed during different lifecycles.\n    // draw can be called without calling updateState (e.g. most viewport changes),\n    // while renderLayers can only be called during a recursive layer update.\n    this.setNeedsUpdate();\n  }\n\n  /** called to augment the info object that is bubbled up from a sublayer\n      override Layer.getPickingInfo() because decoding / setting uniform do\n      not apply to a composite layer. */\n  getPickingInfo({info}: GetPickingInfoParams): PickingInfo {\n    const {object} = info;\n    const isDataWrapped =\n      object && object.__source && object.__source.parent && object.__source.parent.id === this.id;\n\n    if (!isDataWrapped) {\n      return info;\n    }\n\n    // override object with picked data\n    info.object = object.__source.object;\n    info.index = object.__source.index;\n\n    return info;\n  }\n\n  // Implement to generate subLayers\n  abstract renderLayers(): Layer | null | LayersList;\n\n  /**\n   * Filters sub layers at draw time. Return true if the sub layer should be drawn.\n   */\n  filterSubLayer(context: FilterContext): boolean {\n    return true;\n  }\n\n  /** Returns true if sub layer needs to be rendered */\n  protected shouldRenderSubLayer(subLayerId: string, data: any): boolean {\n    return data && data.length;\n  }\n\n  /** Returns sub layer class for a specific sublayer */\n  protected getSubLayerClass<T extends Layer>(\n    subLayerId: string,\n    DefaultLayerClass: ConstructorOf<T>\n  ): ConstructorOf<T> {\n    const {_subLayerProps: overridingProps} = this.props;\n\n    return (\n      (overridingProps &&\n        overridingProps[subLayerId] &&\n        (overridingProps[subLayerId].type as ConstructorOf<T>)) ||\n      DefaultLayerClass\n    );\n  }\n\n  /** When casting user data into another format to pass to sublayers,\n      add reference to the original object and object index */\n  protected getSubLayerRow<T>(row: T, sourceObject: any, sourceObjectIndex: number): T {\n    // @ts-ignore (TS2339) adding undefined property\n    row.__source = {\n      parent: this,\n      object: sourceObject,\n      index: sourceObjectIndex\n    };\n    return row;\n  }\n\n  /** Some composite layers cast user data into another format before passing to sublayers\n    We need to unwrap them before calling the accessor so that they see the original data\n    objects */\n  protected getSubLayerAccessor<In, Out>(accessor: Accessor<In, Out>): Accessor<In, Out> {\n    if (typeof accessor === 'function') {\n      const objectInfo: AccessorContext<In> = {\n        index: -1,\n        // @ts-ignore accessing resolved data\n        data: this.props.data,\n        target: []\n      };\n      return (x: any, i: AccessorContext<In>) => {\n        if (x && x.__source) {\n          objectInfo.index = x.__source.index;\n          // @ts-ignore (TS2349) Out is never a function\n          return accessor(x.__source.object as In, objectInfo);\n        }\n        // @ts-ignore (TS2349) Out is never a function\n        return accessor(x as In, i);\n      };\n    }\n    return accessor;\n  }\n\n  // eslint-disable-next-line complexity\n  /** Returns sub layer props for a specific sublayer */\n  protected getSubLayerProps(\n    sublayerProps: {\n      id?: string;\n      updateTriggers?: Record<string, any>;\n      [propName: string]: any;\n    } = {}\n  ): any {\n    const {\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      fetch,\n      operation,\n      _subLayerProps: overridingProps\n    } = this.props;\n    const newProps = {\n      id: '',\n      updateTriggers: {},\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      fetch,\n      operation\n    };\n\n    const overridingSublayerProps =\n      overridingProps && sublayerProps.id && overridingProps[sublayerProps.id];\n    const overridingSublayerTriggers =\n      overridingSublayerProps && overridingSublayerProps.updateTriggers;\n    const sublayerId = sublayerProps.id || 'sublayer';\n\n    if (overridingSublayerProps) {\n      // @ts-ignore (TS2339) hidden property\n      const propTypes = this.constructor._propTypes;\n      const subLayerPropTypes = sublayerProps.type ? sublayerProps.type._propTypes : {};\n      for (const key in overridingSublayerProps) {\n        const propType = subLayerPropTypes[key] || propTypes[key];\n        // eslint-disable-next-line\n        if (propType && propType.type === 'accessor') {\n          overridingSublayerProps[key] = this.getSubLayerAccessor(overridingSublayerProps[key]);\n        }\n      }\n    }\n\n    Object.assign(\n      newProps,\n      sublayerProps,\n      // experimental feature that allows users to override sublayer props via parent layer prop\n      overridingSublayerProps\n    );\n    newProps.id = `${this.props.id}-${sublayerId}`;\n    newProps.updateTriggers = {\n      all: this.props.updateTriggers?.all,\n      ...sublayerProps.updateTriggers,\n      ...overridingSublayerTriggers\n    };\n\n    // Pass through extension props\n    // @ts-ignore (TS2532) extensions is always defined after merging with default props\n    for (const extension of extensions) {\n      const passThroughProps = extension.getSubLayerProps.call(this, extension);\n      if (passThroughProps) {\n        Object.assign(newProps, passThroughProps, {\n          updateTriggers: Object.assign(newProps.updateTriggers, passThroughProps.updateTriggers)\n        });\n      }\n    }\n\n    return newProps;\n  }\n\n  /** Update sub layers to highlight the hovered object */\n  protected _updateAutoHighlight(info: PickingInfo): void {\n    for (const layer of this.getSubLayers()) {\n      layer.updateAutoHighlight(info);\n    }\n  }\n\n  /** Override base Layer method */\n  protected _getAttributeManager(): AttributeManager | null {\n    return null;\n  }\n\n  /** (Internal) Called after an update to rerender sub layers */\n  protected _postUpdate(updateParams: UpdateParameters<this>, forceUpdate: boolean) {\n    // @ts-ignore (TS2531) this method is only called internally when internalState is defined\n    let subLayers = this.internalState.subLayers as Layer[];\n    const shouldUpdate = !subLayers || this.needsUpdate();\n    if (shouldUpdate) {\n      const subLayersList = this.renderLayers();\n      // Flatten the returned array, removing any null, undefined or false\n      // this allows layers to render sublayers conditionally\n      // (see CompositeLayer.renderLayers docs)\n      subLayers = flatten(subLayersList, Boolean) as Layer[];\n      // @ts-ignore (TS2531) this method is only called internally when internalState is defined\n      this.internalState.subLayers = subLayers;\n    }\n    debug(TRACE_RENDER_LAYERS, this, shouldUpdate, subLayers);\n\n    // populate reference to parent layer (this layer)\n    // NOTE: needs to be done even when reusing layers as the parent may have changed\n    for (const layer of subLayers) {\n      layer.parent = this;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}