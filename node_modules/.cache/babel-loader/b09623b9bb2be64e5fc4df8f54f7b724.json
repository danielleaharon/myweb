{"ast":null,"code":"import { useState, useCallback } from 'react';\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers';\nexport const usePlayer = () => {\n  const [player, setPlayer] = useState({\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: TETROMINOS[0].shape,\n    collided: false,\n    texts: TETROMINOS[0].text\n  });\n\n  function rotate(matrix, dir) {\n    // Make the rows to become cols (transpose)\n    const mtrx = matrix.map((_, index) => matrix.map(column => column[index])); // Reverse each row to get a rotaded matrix\n\n    if (dir > 0) return mtrx.map(row => row.reverse());\n    return mtrx.reverse();\n  }\n\n  function playerRotate(stage, dir) {\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n    const pos = clonedPlayer.pos.x;\n    let offset = 1;\n\n    while (checkCollision(clonedPlayer, stage, {\n      x: 0,\n      y: 0\n    })) {\n      clonedPlayer.pos.x += offset;\n      offset = -(offset + (offset > 0 ? 1 : -1));\n\n      if (offset > clonedPlayer.tetromino[0].length) {\n        rotate(clonedPlayer.tetromino, -dir);\n        clonedPlayer.pos.x = pos;\n        return;\n      }\n    }\n\n    setPlayer(clonedPlayer);\n  }\n\n  const updatePlayerPos = ({\n    x,\n    y,\n    collided\n  }) => {\n    setPlayer(prev => ({ ...prev,\n      pos: {\n        x: prev.pos.x += x,\n        y: prev.pos.y += y\n      },\n      collided\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: {\n        x: STAGE_WIDTH / 2 - 2,\n        y: 0\n      },\n      tetromino: randomTetromino().shape,\n      collided: false,\n      texts: TETROMINOS[0].text\n    });\n  }, []);\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\n};","map":{"version":3,"sources":["/Users/user/Desktop/עבודות להגשה/myweb/src/components/tetris/hooks/usePlayer.js"],"names":["useState","useCallback","TETROMINOS","randomTetromino","STAGE_WIDTH","checkCollision","usePlayer","player","setPlayer","pos","x","y","tetromino","shape","collided","texts","text","rotate","matrix","dir","mtrx","map","_","index","column","row","reverse","playerRotate","stage","clonedPlayer","JSON","parse","stringify","offset","length","updatePlayerPos","prev","resetPlayer"],"mappings":"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","sourcesContent":["import { useState, useCallback } from 'react';\n\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers';\n\nexport const usePlayer = () => {\n  const [player, setPlayer] = useState({\n    pos: { x: 0, y: 0 },\n    tetromino: TETROMINOS[0].shape,\n    collided: false,\n    texts: TETROMINOS[0].text,\n\n  });\n\n  function rotate(matrix, dir) {\n    // Make the rows to become cols (transpose)\n    const mtrx = matrix.map((_, index) => matrix.map(column => column[index]));\n    // Reverse each row to get a rotaded matrix\n    if (dir > 0) return mtrx.map(row => row.reverse());\n    return mtrx.reverse();\n  }\n\n  function playerRotate(stage, dir) {\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n\n    const pos = clonedPlayer.pos.x;\n    let offset = 1;\n    while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\n      clonedPlayer.pos.x += offset;\n      offset = -(offset + (offset > 0 ? 1 : -1));\n      if (offset > clonedPlayer.tetromino[0].length) {\n        rotate(clonedPlayer.tetromino, -dir);\n        clonedPlayer.pos.x = pos;\n        return;\n      }\n    }\n    setPlayer(clonedPlayer);\n  }\n\n  const updatePlayerPos = ({ x, y, collided }) => {\n    setPlayer(prev => ({\n      ...prev,\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\n      collided,\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    \n    setPlayer({\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\n      tetromino: randomTetromino().shape,\n      collided: false,\n      texts: TETROMINOS[0].text,\n\n    });\n  }, []);\n\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\n};"]},"metadata":{},"sourceType":"module"}