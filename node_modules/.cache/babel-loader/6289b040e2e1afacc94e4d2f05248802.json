{"ast":null,"code":"const PERCENT_OR_PIXELS_REGEX = /([0-9]+\\.?[0-9]*)(%|px)/;\nexport function parsePosition(value) {\n  switch (typeof value) {\n    case 'number':\n      return {\n        position: value,\n        relative: false\n      };\n\n    case 'string':\n      const match = PERCENT_OR_PIXELS_REGEX.exec(value);\n\n      if (match && match.length >= 3) {\n        const relative = match[2] === '%';\n        const position = parseFloat(match[1]);\n        return {\n          position: relative ? position / 100 : position,\n          relative\n        };\n      }\n\n    default:\n      throw new Error(\"Could not parse position string \".concat(value));\n  }\n}\nexport function getPosition(position, extent) {\n  return position.relative ? Math.round(position.position * extent) : position.position;\n}","map":{"version":3,"sources":["../../../src/utils/positions.ts"],"names":["PERCENT_OR_PIXELS_REGEX","position","relative","match","parseFloat","Math"],"mappings":"AAAA,MAAMA,uBAAuB,GAA7B,yBAAA;AAQA,OAAO,SAAA,aAAA,CAAA,KAAA,EAAyD;AAC9D,UAAQ,OAAR,KAAA;AACE,SAAA,QAAA;AACE,aAAO;AACLC,QAAAA,QAAQ,EADH,KAAA;AAELC,QAAAA,QAAQ,EAAE;AAFL,OAAP;;AAKF,SAAA,QAAA;AACE,YAAMC,KAAK,GAAGH,uBAAuB,CAAvBA,IAAAA,CAAd,KAAcA,CAAd;;AACA,UAAIG,KAAK,IAAIA,KAAK,CAALA,MAAAA,IAAb,CAAA,EAAgC;AAC9B,cAAMD,QAAQ,GAAGC,KAAK,CAALA,CAAK,CAALA,KAAjB,GAAA;AACA,cAAMF,QAAQ,GAAGG,UAAU,CAACD,KAAK,CAAjC,CAAiC,CAAN,CAA3B;AACA,eAAO;AACLF,UAAAA,QAAQ,EAAEC,QAAQ,GAAGD,QAAQ,GAAX,GAAA,GADb,QAAA;AAELC,UAAAA;AAFK,SAAP;AAID;;AAGH;AAEE,YAAM,IAAA,KAAA,CAAA,mCAAA,MAAA,CAAN,KAAM,CAAA,CAAN;AArBJ;AAuBD;AAED,OAAO,SAAA,WAAA,CAAA,QAAA,EAAA,MAAA,EAAiE;AACtE,SAAOD,QAAQ,CAARA,QAAAA,GAAoBI,IAAI,CAAJA,KAAAA,CAAWJ,QAAQ,CAARA,QAAAA,GAA/BA,MAAoBI,CAApBJ,GAA6DA,QAAQ,CAA5E,QAAA;AACD","sourcesContent":["const PERCENT_OR_PIXELS_REGEX = /([0-9]+\\.?[0-9]*)(%|px)/;\n\nexport type Position = {\n  position: number;\n  relative: boolean;\n};\n\n// Takes a number or a string of formats `50%`, `33.3%` or `200px`\nexport function parsePosition(value: number | string): Position {\n  switch (typeof value) {\n    case 'number':\n      return {\n        position: value,\n        relative: false\n      };\n\n    case 'string':\n      const match = PERCENT_OR_PIXELS_REGEX.exec(value);\n      if (match && match.length >= 3) {\n        const relative = match[2] === '%';\n        const position = parseFloat(match[1]);\n        return {\n          position: relative ? position / 100 : position,\n          relative\n        };\n      }\n    // fallthrough\n\n    default:\n      // eslint-disable-line\n      throw new Error(`Could not parse position string ${value}`);\n  }\n}\n\nexport function getPosition(position: Position, extent: number): number {\n  return position.relative ? Math.round(position.position * extent) : position.position;\n}\n"]},"metadata":{},"sourceType":"module"}