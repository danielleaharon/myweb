{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { DirectionalLight } from './directional-light';\nimport { getSunDirection } from '@math.gl/sun';\nexport default class SunLight extends DirectionalLight {\n  constructor(opts) {\n    super(opts);\n\n    _defineProperty(this, \"timestamp\", void 0);\n\n    this.timestamp = opts.timestamp;\n  }\n\n  getProjectedLight({\n    layer\n  }) {\n    const {\n      viewport\n    } = layer.context;\n    const isGlobe = viewport.resolution && viewport.resolution > 0;\n\n    if (isGlobe) {\n      const [x, y, z] = getSunDirection(this.timestamp, 0, 0);\n      this.direction = [x, -z, y];\n    } else {\n      const {\n        latitude,\n        longitude\n      } = viewport;\n      this.direction = getSunDirection(this.timestamp, latitude, longitude);\n    }\n\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../../src/effects/lighting/sun-light.ts"],"names":["constructor","opts","getProjectedLight","layer","viewport","isGlobe","getSunDirection","longitude"],"mappings":";AAAA,SAAA,gBAAA,QAAA,qBAAA;AACA,SAAA,eAAA,QAAA,cAAA;AAwBA,eAAe,MAAA,QAAA,SAAA,gBAAA,CAAwC;AAGrDA,EAAAA,WAAW,CAAA,IAAA,EAAwB;AACjC,UAAA,IAAA;;AADiC,IAAA,eAAA,CAAA,IAAA,EAAA,WAAA,EAAA,KAAA,CAAA,CAAA;;AAGjC,SAAA,SAAA,GAAiBC,IAAI,CAArB,SAAA;AACD;;AAEDC,EAAAA,iBAAiB,CAAC;AAACC,IAAAA;AAAD,GAAD,EAA4C;AAC3D,UAAM;AAACC,MAAAA;AAAD,QAAaD,KAAK,CAAxB,OAAA;AACA,UAAME,OAAO,GAAGD,QAAQ,CAARA,UAAAA,IAAuBA,QAAQ,CAARA,UAAAA,GAAvC,CAAA;;AAEA,QAAA,OAAA,EAAa;AAEX,YAAM,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,IAAYE,eAAe,CAAC,KAAD,SAAA,EAAA,CAAA,EAAjC,CAAiC,CAAjC;AACA,WAAA,SAAA,GAAiB,CAAA,CAAA,EAAI,CAAJ,CAAA,EAAjB,CAAiB,CAAjB;AAHF,KAAA,MAIO;AAEL,YAAM;AAAA,QAAA,QAAA;AAAWC,QAAAA;AAAX,UAAN,QAAA;AACA,WAAA,SAAA,GAAiBD,eAAe,CAAC,KAAD,SAAA,EAAA,QAAA,EAAhC,SAAgC,CAAhC;AACD;;AAED,WAAA,IAAA;AACD;;AAxBoD","sourcesContent":["import {DirectionalLight} from './directional-light';\nimport {getSunDirection} from '@math.gl/sun';\n\nimport type Layer from '../../lib/layer';\n\nexport type SunLightOptions = {\n  id?: string;\n  /** Light color, [r, g, b] in the 0-255 range\n   * @default [255, 255, 255]\n   */\n  color?: number[];\n  /** Light intensity, higher number is brighter\n   * @default 1.0\n   */\n  intensity?: number;\n  /**\n   * The time at which to position the sun. Either a Date object or a timestamp (milliseconds elapsed since unix time 0)\n   */\n  timestamp: number | Date;\n  /** (Experimental) render shadows casted by this light\n   * @default false\n   */\n  _shadow?: boolean;\n};\n\nexport default class SunLight extends DirectionalLight {\n  timestamp: number | Date;\n\n  constructor(opts: SunLightOptions) {\n    super(opts);\n\n    this.timestamp = opts.timestamp;\n  }\n\n  getProjectedLight({layer}: {layer: Layer}): DirectionalLight {\n    const {viewport} = layer.context;\n    const isGlobe = viewport.resolution && viewport.resolution > 0;\n\n    if (isGlobe) {\n      // Rotate vector to align with the direction of the globe projection (up at lon:0,lat:0 is [0, -1, 0])\n      const [x, y, z] = getSunDirection(this.timestamp, 0, 0);\n      this.direction = [x, -z, y];\n    } else {\n      // @ts-expect-error longitude and latitude are not defined on all viewports\n      const {latitude, longitude} = viewport;\n      this.direction = getSunDirection(this.timestamp, latitude, longitude);\n    }\n\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}