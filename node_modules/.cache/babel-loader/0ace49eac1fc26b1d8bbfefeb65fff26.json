{"ast":null,"code":"import { calculatePickingColors } from './geojson-binary';\n\nfunction createEmptyLayerProps() {\n  return {\n    points: {},\n    lines: {},\n    polygons: {},\n    polygonsOutline: {}\n  };\n}\n\nfunction getCoordinates(f) {\n  return f.geometry.coordinates;\n}\n\nexport function createLayerPropsFromFeatures(features, featuresDiff) {\n  const layerProps = createEmptyLayerProps();\n  const {\n    pointFeatures,\n    lineFeatures,\n    polygonFeatures,\n    polygonOutlineFeatures\n  } = features;\n  layerProps.points.data = pointFeatures;\n\n  layerProps.points._dataDiff = featuresDiff.pointFeatures && (() => featuresDiff.pointFeatures);\n\n  layerProps.points.getPosition = getCoordinates;\n  layerProps.lines.data = lineFeatures;\n\n  layerProps.lines._dataDiff = featuresDiff.lineFeatures && (() => featuresDiff.lineFeatures);\n\n  layerProps.lines.getPath = getCoordinates;\n  layerProps.polygons.data = polygonFeatures;\n\n  layerProps.polygons._dataDiff = featuresDiff.polygonFeatures && (() => featuresDiff.polygonFeatures);\n\n  layerProps.polygons.getPolygon = getCoordinates;\n  layerProps.polygonsOutline.data = polygonOutlineFeatures;\n\n  layerProps.polygonsOutline._dataDiff = featuresDiff.polygonOutlineFeatures && (() => featuresDiff.polygonOutlineFeatures);\n\n  layerProps.polygonsOutline.getPath = getCoordinates;\n  return layerProps;\n}\nexport function createLayerPropsFromBinary(geojsonBinary, encodePickingColor) {\n  const layerProps = createEmptyLayerProps();\n  const {\n    points,\n    lines,\n    polygons\n  } = geojsonBinary;\n  const customPickingColors = calculatePickingColors(geojsonBinary, encodePickingColor);\n  layerProps.points.data = {\n    length: points.positions.value.length / points.positions.size,\n    attributes: { ...points.attributes,\n      getPosition: points.positions,\n      instancePickingColors: {\n        size: 3,\n        value: customPickingColors.points\n      }\n    },\n    properties: points.properties,\n    numericProps: points.numericProps,\n    featureIds: points.featureIds\n  };\n  layerProps.lines.data = {\n    length: lines.pathIndices.value.length - 1,\n    startIndices: lines.pathIndices.value,\n    attributes: { ...lines.attributes,\n      getPath: lines.positions,\n      instancePickingColors: {\n        size: 3,\n        value: customPickingColors.lines\n      }\n    },\n    properties: lines.properties,\n    numericProps: lines.numericProps,\n    featureIds: lines.featureIds\n  };\n  layerProps.lines._pathType = 'open';\n  layerProps.polygons.data = {\n    length: polygons.polygonIndices.value.length - 1,\n    startIndices: polygons.polygonIndices.value,\n    attributes: { ...polygons.attributes,\n      getPolygon: polygons.positions,\n      pickingColors: {\n        size: 3,\n        value: customPickingColors.polygons\n      }\n    },\n    properties: polygons.properties,\n    numericProps: polygons.numericProps,\n    featureIds: polygons.featureIds\n  };\n  layerProps.polygons._normalize = false;\n\n  if (polygons.triangles) {\n    layerProps.polygons.data.attributes.indices = polygons.triangles.value;\n  }\n\n  layerProps.polygonsOutline.data = {\n    length: polygons.primitivePolygonIndices.value.length - 1,\n    startIndices: polygons.primitivePolygonIndices.value,\n    attributes: { ...polygons.attributes,\n      getPath: polygons.positions,\n      instancePickingColors: {\n        size: 3,\n        value: customPickingColors.polygons\n      }\n    },\n    properties: polygons.properties,\n    numericProps: polygons.numericProps,\n    featureIds: polygons.featureIds\n  };\n  layerProps.polygonsOutline._pathType = 'open';\n  return layerProps;\n}","map":{"version":3,"sources":["../../../src/geojson-layer/geojson-layer-props.ts"],"names":["points","lines","polygons","polygonsOutline","f","layerProps","createEmptyLayerProps","polygonOutlineFeatures","featuresDiff","customPickingColors","calculatePickingColors","length","attributes","getPosition","instancePickingColors","size","value","properties","numericProps","featureIds","startIndices","getPath","getPolygon","pickingColors"],"mappings":"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","sourcesContent":["import {BinaryAttribute, LayerData, LayerProps} from '@deck.gl/core';\nimport {PolygonLayerProps, ScatterplotLayerProps} from '..';\nimport {calculatePickingColors} from './geojson-binary';\nimport {BinaryFeatures} from '@loaders.gl/schema';\nimport {SeparatedGeometries} from './geojson';\n\n// TODO: PathLayer is not yet typed\ntype PathLayerProps = LayerProps & Record<string, any>;\n\ntype SubLayersProps = {\n  points: Partial<ScatterplotLayerProps>;\n  lines: Partial<PathLayerProps>;\n  polygons: Partial<PolygonLayerProps>;\n  polygonsOutline: Partial<PathLayerProps>;\n};\n\ntype ExtendedBinaryFeatures = {\n  [P in keyof BinaryFeatures]: BinaryFeatures[P] & {attributes?: Record<string, BinaryAttribute>};\n};\n\nfunction createEmptyLayerProps(): SubLayersProps {\n  return {\n    points: {},\n    lines: {},\n    polygons: {},\n    polygonsOutline: {}\n  };\n}\n\nfunction getCoordinates(f) {\n  return f.geometry.coordinates;\n}\n\nexport function createLayerPropsFromFeatures(\n  features: SeparatedGeometries,\n  featuresDiff\n): SubLayersProps {\n  const layerProps = createEmptyLayerProps();\n  const {pointFeatures, lineFeatures, polygonFeatures, polygonOutlineFeatures} = features;\n\n  layerProps.points.data = pointFeatures;\n  layerProps.points._dataDiff = featuresDiff.pointFeatures && (() => featuresDiff.pointFeatures);\n  layerProps.points.getPosition = getCoordinates;\n\n  layerProps.lines.data = lineFeatures;\n  layerProps.lines._dataDiff = featuresDiff.lineFeatures && (() => featuresDiff.lineFeatures);\n  layerProps.lines.getPath = getCoordinates;\n\n  layerProps.polygons.data = polygonFeatures;\n  layerProps.polygons._dataDiff =\n    featuresDiff.polygonFeatures && (() => featuresDiff.polygonFeatures);\n  layerProps.polygons.getPolygon = getCoordinates;\n\n  layerProps.polygonsOutline.data = polygonOutlineFeatures;\n  layerProps.polygonsOutline._dataDiff =\n    featuresDiff.polygonOutlineFeatures && (() => featuresDiff.polygonOutlineFeatures);\n  layerProps.polygonsOutline.getPath = getCoordinates;\n\n  return layerProps;\n}\n\nexport function createLayerPropsFromBinary(\n  geojsonBinary: Required<ExtendedBinaryFeatures>,\n  encodePickingColor\n): SubLayersProps {\n  // The binary data format is documented here\n  // https://github.com/visgl/loaders.gl/blob/master/modules/gis/docs/api-reference/geojson-to-binary.md\n  // It is the default output from the `MVTLoader` and can also be obtained\n  // from GeoJSON by using the `geojsonToBinary` utility function.\n  const layerProps = createEmptyLayerProps();\n  const {points, lines, polygons} = geojsonBinary;\n\n  const customPickingColors = calculatePickingColors(geojsonBinary, encodePickingColor);\n\n  layerProps.points.data = {\n    length: points.positions.value.length / points.positions.size,\n    attributes: {\n      ...points.attributes,\n      getPosition: points.positions,\n      instancePickingColors: {\n        size: 3,\n        value: customPickingColors.points!\n      }\n    },\n    properties: points.properties,\n    numericProps: points.numericProps,\n    featureIds: points.featureIds\n  } as LayerData<any>;\n\n  layerProps.lines.data = {\n    length: lines.pathIndices.value.length - 1,\n    startIndices: lines.pathIndices.value,\n    attributes: {\n      ...lines.attributes,\n      getPath: lines.positions,\n      instancePickingColors: {\n        size: 3,\n        value: customPickingColors.lines!\n      }\n    },\n    properties: lines.properties,\n    numericProps: lines.numericProps,\n    featureIds: lines.featureIds\n  } as LayerData<any>;\n  layerProps.lines._pathType = 'open';\n\n  layerProps.polygons.data = {\n    length: polygons.polygonIndices.value.length - 1,\n    startIndices: polygons.polygonIndices.value,\n    attributes: {\n      ...polygons.attributes,\n      getPolygon: polygons.positions,\n      pickingColors: {\n        size: 3,\n        value: customPickingColors.polygons!\n      }\n    },\n    properties: polygons.properties,\n    numericProps: polygons.numericProps,\n    featureIds: polygons.featureIds\n  } as LayerData<any>;\n  layerProps.polygons._normalize = false;\n  if (polygons.triangles) {\n    (layerProps.polygons.data as any).attributes.indices = polygons.triangles.value;\n  }\n\n  layerProps.polygonsOutline.data = {\n    length: polygons.primitivePolygonIndices.value.length - 1,\n    startIndices: polygons.primitivePolygonIndices.value,\n    attributes: {\n      ...polygons.attributes,\n      getPath: polygons.positions,\n      instancePickingColors: {\n        size: 3,\n        value: customPickingColors.polygons!\n      }\n    },\n    properties: polygons.properties,\n    numericProps: polygons.numericProps,\n    featureIds: polygons.featureIds\n  } as LayerData<any>;\n  layerProps.polygonsOutline._pathType = 'open';\n\n  return layerProps;\n}\n"]},"metadata":{},"sourceType":"module"}