{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Layer, project32, gouraudLighting, picking, COORDINATE_SYSTEM } from '@deck.gl/core';\nimport { Model, Geometry, hasFeatures, FEATURES } from '@luma.gl/core';\nimport PolygonTesselator from './polygon-tesselator';\nimport vsTop from './solid-polygon-layer-vertex-top.glsl';\nimport vsSide from './solid-polygon-layer-vertex-side.glsl';\nimport fs from './solid-polygon-layer-fragment.glsl';\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultProps = {\n  filled: true,\n  extruded: false,\n  wireframe: false,\n  _normalize: true,\n  _windingOrder: 'CW',\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  getPolygon: {\n    type: 'accessor',\n    value: f => f.polygon\n  },\n  getElevation: {\n    type: 'accessor',\n    value: 1000\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  material: true\n};\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\nexport default class SolidPolygonLayer extends Layer {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", void 0);\n  }\n\n  getShaders(type) {\n    return super.getShaders({\n      vs: type === 'top' ? vsTop : vsSide,\n      fs,\n      defines: {\n        RING_WINDING_ORDER_CW: !this.props._normalize && this.props._windingOrder === 'CCW' ? 0 : 1\n      },\n      modules: [project32, gouraudLighting, picking]\n    });\n  }\n\n  get wrapLongitude() {\n    return false;\n  }\n\n  initializeState() {\n    const {\n      gl,\n      viewport\n    } = this.context;\n    let {\n      coordinateSystem\n    } = this.props;\n\n    if (viewport.isGeospatial && coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n      coordinateSystem = COORDINATE_SYSTEM.LNGLAT;\n    }\n\n    this.setState({\n      numInstances: 0,\n      polygonTesselator: new PolygonTesselator({\n        preproject: coordinateSystem === COORDINATE_SYSTEM.LNGLAT && viewport.projectFlat.bind(viewport),\n        fp64: this.use64bitPositions(),\n        IndexType: !gl || hasFeatures(gl, FEATURES.ELEMENT_INDEX_UINT32) ? Uint32Array : Uint16Array\n      })\n    });\n    const attributeManager = this.getAttributeManager();\n    const noAlloc = true;\n    attributeManager.remove(['instancePickingColors']);\n    attributeManager.add({\n      indices: {\n        size: 1,\n        isIndexed: true,\n        update: this.calculateIndices,\n        noAlloc\n      },\n      positions: {\n        size: 3,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPolygon',\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          positions: {\n            vertexOffset: 0,\n            divisor: 0\n          },\n          instancePositions: {\n            vertexOffset: 0,\n            divisor: 1\n          },\n          nextPositions: {\n            vertexOffset: 1,\n            divisor: 1\n          }\n        }\n      },\n      vertexValid: {\n        size: 1,\n        divisor: 1,\n        type: 5121,\n        update: this.calculateVertexValid,\n        noAlloc\n      },\n      elevations: {\n        size: 1,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getElevation',\n        shaderAttributes: {\n          elevations: {\n            divisor: 0\n          },\n          instanceElevations: {\n            divisor: 1\n          }\n        }\n      },\n      fillColors: {\n        size: this.props.colorFormat.length,\n        type: 5121,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          fillColors: {\n            divisor: 0\n          },\n          instanceFillColors: {\n            divisor: 1\n          }\n        }\n      },\n      lineColors: {\n        size: this.props.colorFormat.length,\n        type: 5121,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          lineColors: {\n            divisor: 0\n          },\n          instanceLineColors: {\n            divisor: 1\n          }\n        }\n      },\n      pickingColors: {\n        size: 3,\n        type: 5121,\n        accessor: (object, {\n          index,\n          target: value\n        }) => this.encodePickingColor(object && object.__source ? object.__source.index : index, value),\n        shaderAttributes: {\n          pickingColors: {\n            divisor: 0\n          },\n          instancePickingColors: {\n            divisor: 1\n          }\n        }\n      }\n    });\n  }\n\n  getPickingInfo(params) {\n    const info = super.getPickingInfo(params);\n    const {\n      index\n    } = info;\n    const {\n      data\n    } = this.props;\n\n    if (data[0] && data[0].__source) {\n      info.object = data.find(d => d.__source.index === index);\n    }\n\n    return info;\n  }\n\n  disablePickingIndex(objectIndex) {\n    const {\n      data\n    } = this.props;\n\n    if (data[0] && data[0].__source) {\n      for (let i = 0; i < data.length; i++) {\n        if (data[i].__source.index === objectIndex) {\n          this._disablePickingIndex(i);\n        }\n      }\n    } else {\n      this._disablePickingIndex(objectIndex);\n    }\n  }\n\n  draw({\n    uniforms\n  }) {\n    const {\n      extruded,\n      filled,\n      wireframe,\n      elevationScale\n    } = this.props;\n    const {\n      topModel,\n      sideModel,\n      polygonTesselator\n    } = this.state;\n    const renderUniforms = { ...uniforms,\n      extruded: Boolean(extruded),\n      elevationScale\n    };\n\n    if (sideModel) {\n      sideModel.setInstanceCount(polygonTesselator.instanceCount - 1);\n      sideModel.setUniforms(renderUniforms);\n\n      if (wireframe) {\n        sideModel.setDrawMode(3);\n        sideModel.setUniforms({\n          isWireframe: true\n        }).draw();\n      }\n\n      if (filled) {\n        sideModel.setDrawMode(6);\n        sideModel.setUniforms({\n          isWireframe: false\n        }).draw();\n      }\n    }\n\n    if (topModel) {\n      topModel.setVertexCount(polygonTesselator.vertexCount);\n      topModel.setUniforms(renderUniforms).draw();\n    }\n  }\n\n  updateState(updateParams) {\n    super.updateState(updateParams);\n    this.updateGeometry(updateParams);\n    const {\n      props,\n      oldProps,\n      changeFlags\n    } = updateParams;\n    const attributeManager = this.getAttributeManager();\n    const regenerateModels = changeFlags.extensionsChanged || props.filled !== oldProps.filled || props.extruded !== oldProps.extruded;\n\n    if (regenerateModels) {\n      var _this$state$models;\n\n      (_this$state$models = this.state.models) === null || _this$state$models === void 0 ? void 0 : _this$state$models.forEach(model => model.delete());\n      this.setState(this._getModels(this.context.gl));\n      attributeManager.invalidateAll();\n    }\n  }\n\n  updateGeometry({\n    props,\n    oldProps,\n    changeFlags\n  }) {\n    const geometryConfigChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon);\n\n    if (geometryConfigChanged) {\n      const {\n        polygonTesselator\n      } = this.state;\n      const buffers = props.data.attributes || {};\n      polygonTesselator.updateGeometry({\n        data: props.data,\n        normalize: props._normalize,\n        geometryBuffer: buffers.getPolygon,\n        buffers,\n        getGeometry: props.getPolygon,\n        positionFormat: props.positionFormat,\n        wrapLongitude: props.wrapLongitude,\n        resolution: this.context.viewport.resolution,\n        fp64: this.use64bitPositions(),\n        dataChanged: changeFlags.dataChanged\n      });\n      this.setState({\n        numInstances: polygonTesselator.instanceCount,\n        startIndices: polygonTesselator.vertexStarts\n      });\n\n      if (!changeFlags.dataChanged) {\n        this.getAttributeManager().invalidateAll();\n      }\n    }\n  }\n\n  _getModels(gl) {\n    const {\n      id,\n      filled,\n      extruded\n    } = this.props;\n    let topModel;\n    let sideModel;\n\n    if (filled) {\n      const shaders = this.getShaders('top');\n      shaders.defines.NON_INSTANCED_MODEL = 1;\n      topModel = new Model(gl, { ...shaders,\n        id: \"\".concat(id, \"-top\"),\n        drawMode: 4,\n        attributes: {\n          vertexPositions: new Float32Array([0, 1])\n        },\n        uniforms: {\n          isWireframe: false,\n          isSideVertex: false\n        },\n        vertexCount: 0,\n        isIndexed: true\n      });\n    }\n\n    if (extruded) {\n      sideModel = new Model(gl, { ...this.getShaders('side'),\n        id: \"\".concat(id, \"-side\"),\n        geometry: new Geometry({\n          drawMode: 1,\n          vertexCount: 4,\n          attributes: {\n            vertexPositions: {\n              size: 2,\n              value: new Float32Array([1, 0, 0, 0, 0, 1, 1, 1])\n            }\n          }\n        }),\n        instanceCount: 0,\n        isInstanced: 1\n      });\n      sideModel.userData.excludeAttributes = {\n        indices: true\n      };\n    }\n\n    return {\n      models: [sideModel, topModel].filter(Boolean),\n      topModel,\n      sideModel\n    };\n  }\n\n  calculateIndices(attribute) {\n    const {\n      polygonTesselator\n    } = this.state;\n    attribute.startIndices = polygonTesselator.indexStarts;\n    attribute.value = polygonTesselator.get('indices');\n  }\n\n  calculatePositions(attribute) {\n    const {\n      polygonTesselator\n    } = this.state;\n    attribute.startIndices = polygonTesselator.vertexStarts;\n    attribute.value = polygonTesselator.get('positions');\n  }\n\n  calculateVertexValid(attribute) {\n    attribute.value = this.state.polygonTesselator.get('vertexValid');\n  }\n\n}\n\n_defineProperty(SolidPolygonLayer, \"defaultProps\", defaultProps);\n\n_defineProperty(SolidPolygonLayer, \"layerName\", 'SolidPolygonLayer');","map":{"version":3,"sources":["../../../src/solid-polygon-layer/solid-polygon-layer.ts"],"names":["DEFAULT_COLOR","defaultProps","filled","extruded","wireframe","_normalize","_windingOrder","elevationScale","type","min","value","getPolygon","f","polygon","getElevation","getFillColor","getLineColor","material","ATTRIBUTE_TRANSITION","enter","chunk","SolidPolygonLayer","getShaders","vs","defines","RING_WINDING_ORDER_CW","modules","wrapLongitude","initializeState","viewport","coordinateSystem","COORDINATE_SYSTEM","numInstances","polygonTesselator","preproject","fp64","IndexType","hasFeatures","FEATURES","Uint16Array","attributeManager","noAlloc","indices","size","isIndexed","update","positions","transition","accessor","shaderAttributes","vertexOffset","divisor","instancePositions","nextPositions","vertexValid","elevations","instanceElevations","fillColors","normalized","defaultValue","instanceFillColors","lineColors","instanceLineColors","pickingColors","target","object","instancePickingColors","getPickingInfo","info","index","data","d","disablePickingIndex","i","draw","uniforms","renderUniforms","Boolean","sideModel","isWireframe","topModel","updateState","changeFlags","regenerateModels","props","oldProps","model","updateGeometry","geometryConfigChanged","buffers","normalize","geometryBuffer","getGeometry","positionFormat","resolution","dataChanged","startIndices","vertexStarts","_getModels","shaders","id","drawMode","attributes","vertexPositions","isSideVertex","vertexCount","geometry","instanceCount","isInstanced","models","calculateIndices","attribute","calculatePositions","calculateVertexValid"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, gouraudLighting, picking, COORDINATE_SYSTEM} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, hasFeatures, FEATURES} from '@luma.gl/core';\n\n// Polygon geometry generation is managed by the polygon tesselator\nimport PolygonTesselator from './polygon-tesselator';\n\nimport vsTop from './solid-polygon-layer-vertex-top.glsl';\nimport vsSide from './solid-polygon-layer-vertex-side.glsl';\nimport fs from './solid-polygon-layer-fragment.glsl';\n\nimport type {\n  LayerProps,\n  Color,\n  Material,\n  Accessor,\n  AccessorFunction,\n  UpdateParameters,\n  GetPickingInfoParams,\n  PickingInfo,\n  DefaultProps\n} from '@deck.gl/core';\nimport type {PolygonGeometry} from './polygon';\n\ntype _SolidPolygonLayerProps<DataT> = {\n  /** Whether to fill the polygons\n   * @default true\n   */\n  filled?: boolean;\n  /** Whether to extrude the polygons\n   * @default false\n   */\n  extruded?: boolean;\n  /** Whether to generate a line wireframe of the polygon.\n   * @default false\n   */\n  wireframe?: boolean;\n  /**\n   * (Experimental) If `false`, will skip normalizing the coordinates returned by `getPolygon`.\n   * @default true\n   */\n  _normalize?: boolean;\n  /**\n   * (Experimental) This prop is only effective with `_normalize: false`.\n   * It specifies the winding order of rings in the polygon data, one of 'CW' (clockwise) and 'CCW' (counter-clockwise)\n   */\n  _windingOrder?: 'CW' | 'CCW';\n\n  /** Elevation multiplier.\n   * @default 1\n   */\n  elevationScale?: number;\n\n  /** Polygon geometry accessor. */\n  getPolygon?: AccessorFunction<DataT, PolygonGeometry>;\n  /** Extrusion height accessor.\n   * @default 1000\n   */\n  getElevation?: Accessor<DataT, number>;\n  /** Fill color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getFillColor?: Accessor<DataT, Color>;\n  /** Stroke color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getLineColor?: Accessor<DataT, Color>;\n\n  /**\n   * Material settings for lighting effect. Applies if `extruded: true`\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting\n   */\n  material?: Material;\n};\n\n/** Render filled and/or extruded polygons. */\nexport type SolidPolygonLayerProps<DataT = any> = _SolidPolygonLayerProps<DataT> &\n  LayerProps<DataT>;\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<SolidPolygonLayerProps> = {\n  filled: true,\n  extruded: false,\n  wireframe: false,\n  _normalize: true,\n  _windingOrder: 'CW',\n\n  elevationScale: {type: 'number', min: 0, value: 1},\n\n  getPolygon: {type: 'accessor', value: f => f.polygon},\n  getElevation: {type: 'accessor', value: 1000},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n\n  material: true\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\nexport default class SolidPolygonLayer<DataT = any, ExtraPropsT = {}> extends Layer<\n  ExtraPropsT & Required<_SolidPolygonLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'SolidPolygonLayer';\n\n  state!: {\n    topModel?: Model;\n    sideModel?: Model;\n    models?: Model[];\n    numInstances: number;\n    polygonTesselator: PolygonTesselator;\n  };\n\n  getShaders(type) {\n    return super.getShaders({\n      vs: type === 'top' ? vsTop : vsSide,\n      fs,\n      defines: {\n        RING_WINDING_ORDER_CW: !this.props._normalize && this.props._windingOrder === 'CCW' ? 0 : 1\n      },\n      modules: [project32, gouraudLighting, picking]\n    });\n  }\n\n  get wrapLongitude(): boolean {\n    return false;\n  }\n\n  initializeState() {\n    const {gl, viewport} = this.context;\n    let {coordinateSystem} = this.props;\n    if (viewport.isGeospatial && coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {\n      coordinateSystem = COORDINATE_SYSTEM.LNGLAT;\n    }\n\n    this.setState({\n      numInstances: 0,\n      polygonTesselator: new PolygonTesselator({\n        // Lnglat coordinates are usually projected non-linearly, which affects tesselation results\n        // Provide a preproject function if the coordinates are in lnglat\n        preproject:\n          coordinateSystem === COORDINATE_SYSTEM.LNGLAT && viewport.projectFlat.bind(viewport),\n        fp64: this.use64bitPositions(),\n        IndexType: !gl || hasFeatures(gl, FEATURES.ELEMENT_INDEX_UINT32) ? Uint32Array : Uint16Array\n      })\n    });\n\n    const attributeManager = this.getAttributeManager()!;\n    const noAlloc = true;\n\n    attributeManager.remove(['instancePickingColors']);\n\n    /* eslint-disable max-len */\n    attributeManager.add({\n      indices: {\n        size: 1,\n        isIndexed: true,\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculateIndices,\n        noAlloc\n      },\n      positions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPolygon',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          positions: {\n            vertexOffset: 0,\n            divisor: 0\n          },\n          instancePositions: {\n            vertexOffset: 0,\n            divisor: 1\n          },\n          nextPositions: {\n            vertexOffset: 1,\n            divisor: 1\n          }\n        }\n      },\n      vertexValid: {\n        size: 1,\n        divisor: 1,\n        type: GL.UNSIGNED_BYTE,\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculateVertexValid,\n        noAlloc\n      },\n      elevations: {\n        size: 1,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getElevation',\n        shaderAttributes: {\n          elevations: {\n            divisor: 0\n          },\n          instanceElevations: {\n            divisor: 1\n          }\n        }\n      },\n      fillColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          fillColors: {\n            divisor: 0\n          },\n          instanceFillColors: {\n            divisor: 1\n          }\n        }\n      },\n      lineColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR,\n        shaderAttributes: {\n          lineColors: {\n            divisor: 0\n          },\n          instanceLineColors: {\n            divisor: 1\n          }\n        }\n      },\n      pickingColors: {\n        size: 3,\n        type: GL.UNSIGNED_BYTE,\n        accessor: (object, {index, target: value}) =>\n          this.encodePickingColor(object && object.__source ? object.__source.index : index, value),\n        shaderAttributes: {\n          pickingColors: {\n            divisor: 0\n          },\n          instancePickingColors: {\n            divisor: 1\n          }\n        }\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  getPickingInfo(params: GetPickingInfoParams): PickingInfo {\n    const info = super.getPickingInfo(params);\n    const {index} = info;\n    const {data} = this.props;\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      info.object = (data as any[]).find(d => d.__source.index === index);\n    }\n    return info;\n  }\n\n  disablePickingIndex(objectIndex: number) {\n    const {data} = this.props;\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      for (let i = 0; i < (data as any[]).length; i++) {\n        if (data[i].__source.index === objectIndex) {\n          this._disablePickingIndex(i);\n        }\n      }\n    } else {\n      this._disablePickingIndex(objectIndex);\n    }\n  }\n\n  draw({uniforms}) {\n    const {extruded, filled, wireframe, elevationScale} = this.props;\n    const {topModel, sideModel, polygonTesselator} = this.state;\n\n    const renderUniforms = {\n      ...uniforms,\n      extruded: Boolean(extruded),\n      elevationScale\n    };\n\n    // Note: the order is important\n    if (sideModel) {\n      sideModel.setInstanceCount(polygonTesselator.instanceCount - 1);\n      sideModel.setUniforms(renderUniforms);\n      if (wireframe) {\n        sideModel.setDrawMode(GL.LINE_STRIP);\n        sideModel.setUniforms({isWireframe: true}).draw();\n      }\n      if (filled) {\n        sideModel.setDrawMode(GL.TRIANGLE_FAN);\n        sideModel.setUniforms({isWireframe: false}).draw();\n      }\n    }\n\n    if (topModel) {\n      topModel.setVertexCount(polygonTesselator.vertexCount);\n      topModel.setUniforms(renderUniforms).draw();\n    }\n  }\n\n  updateState(updateParams: UpdateParameters<this>) {\n    super.updateState(updateParams);\n\n    this.updateGeometry(updateParams);\n\n    const {props, oldProps, changeFlags} = updateParams;\n    const attributeManager = this.getAttributeManager();\n\n    const regenerateModels =\n      changeFlags.extensionsChanged ||\n      props.filled !== oldProps.filled ||\n      props.extruded !== oldProps.extruded;\n\n    if (regenerateModels) {\n      this.state.models?.forEach(model => model.delete());\n\n      this.setState(this._getModels(this.context.gl));\n      attributeManager!.invalidateAll();\n    }\n  }\n\n  protected updateGeometry({props, oldProps, changeFlags}: UpdateParameters<this>) {\n    const geometryConfigChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    // When the geometry config  or the data is changed,\n    // tessellator needs to be invoked\n    if (geometryConfigChanged) {\n      const {polygonTesselator} = this.state;\n      const buffers = (props.data as any).attributes || {};\n      polygonTesselator.updateGeometry({\n        data: props.data,\n        normalize: props._normalize,\n        geometryBuffer: buffers.getPolygon,\n        buffers,\n        getGeometry: props.getPolygon,\n        positionFormat: props.positionFormat,\n        wrapLongitude: props.wrapLongitude,\n        // TODO - move the flag out of the viewport\n        resolution: this.context.viewport.resolution,\n        fp64: this.use64bitPositions(),\n        dataChanged: changeFlags.dataChanged\n      });\n\n      this.setState({\n        numInstances: polygonTesselator.instanceCount,\n        startIndices: polygonTesselator.vertexStarts\n      });\n\n      if (!changeFlags.dataChanged) {\n        // Base `layer.updateState` only invalidates all attributes on data change\n        // Cover the rest of the scenarios here\n        this.getAttributeManager()!.invalidateAll();\n      }\n    }\n  }\n\n  protected _getModels(gl: WebGLRenderingContext): Model {\n    const {id, filled, extruded} = this.props;\n\n    let topModel;\n    let sideModel;\n\n    if (filled) {\n      const shaders = this.getShaders('top');\n      shaders.defines.NON_INSTANCED_MODEL = 1;\n\n      topModel = new Model(gl, {\n        ...shaders,\n        id: `${id}-top`,\n        drawMode: GL.TRIANGLES,\n        attributes: {\n          vertexPositions: new Float32Array([0, 1])\n        },\n        uniforms: {\n          isWireframe: false,\n          isSideVertex: false\n        },\n        vertexCount: 0,\n        isIndexed: true\n      });\n    }\n    if (extruded) {\n      sideModel = new Model(gl, {\n        ...this.getShaders('side'),\n        id: `${id}-side`,\n        geometry: new Geometry({\n          drawMode: GL.LINES,\n          vertexCount: 4,\n          attributes: {\n            // top right - top left - bootom left - bottom right\n            vertexPositions: {\n              size: 2,\n              value: new Float32Array([1, 0, 0, 0, 0, 1, 1, 1])\n            }\n          }\n        }),\n        instanceCount: 0,\n        isInstanced: 1\n      });\n\n      sideModel.userData.excludeAttributes = {indices: true};\n    }\n\n    return {\n      models: [sideModel, topModel].filter(Boolean),\n      topModel,\n      sideModel\n    };\n  }\n\n  protected calculateIndices(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.startIndices = polygonTesselator.indexStarts;\n    attribute.value = polygonTesselator.get('indices');\n  }\n\n  protected calculatePositions(attribute) {\n    const {polygonTesselator} = this.state;\n    attribute.startIndices = polygonTesselator.vertexStarts;\n    attribute.value = polygonTesselator.get('positions');\n  }\n\n  protected calculateVertexValid(attribute) {\n    attribute.value = this.state.polygonTesselator.get('vertexValid');\n  }\n}\n"]},"metadata":{},"sourceType":"module"}