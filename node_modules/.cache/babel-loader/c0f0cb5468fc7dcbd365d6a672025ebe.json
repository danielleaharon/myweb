{"ast":null,"code":"import { log } from '@luma.gl/gltools';\nimport { Stats } from '@probe.gl/stats';\nimport { isBrowser } from '@probe.gl/env';\nconst VERSION = typeof \"8.5.17\" !== 'undefined' ? \"8.5.17\" : 'untranspiled source';\nconst STARTUP_MESSAGE = 'set luma.log.level=1 (or higher) to trace rendering';\nexport class StatsManager {\n  constructor() {\n    this.stats = new Map();\n  }\n\n  get(name) {\n    if (!this.stats.has(name)) {\n      this.stats.set(name, new Stats({\n        id: name\n      }));\n    }\n\n    return this.stats.get(name);\n  }\n\n}\nconst lumaStats = new StatsManager();\n\nif (globalThis.luma && globalThis.luma.VERSION !== VERSION) {\n  throw new Error(\"luma.gl - multiple VERSIONs detected: \".concat(globalThis.luma.VERSION, \" vs \").concat(VERSION));\n}\n\nif (!globalThis.luma) {\n  if (isBrowser()) {\n    log.log(1, \"luma.gl \".concat(VERSION, \" - \").concat(STARTUP_MESSAGE))();\n  }\n\n  globalThis.luma = globalThis.luma || {\n    VERSION,\n    version: VERSION,\n    log,\n    stats: lumaStats,\n    globals: {\n      modules: {},\n      nodeIO: {}\n    }\n  };\n}\n\nexport { lumaStats };\nexport default globalThis.luma;","map":{"version":3,"sources":["../../src/init.js"],"names":["VERSION","STARTUP_MESSAGE","constructor","get","id","name","lumaStats","globalThis","isBrowser","log","version","stats","globals","modules","nodeIO"],"mappings":"AAAA,SAAA,GAAA,QAAA,kBAAA;AACA,SAAA,KAAA,QAAA,iBAAA;AACA,SAAA,SAAA,QAAA,eAAA;AAKA,MAAMA,OAAO,GAAG,OAAA,QAAA,KAAA,WAAA,GAAA,QAAA,GAAhB,qBAAA;AAEA,MAAMC,eAAe,GAArB,qDAAA;AAKA,OAAO,MAAA,YAAA,CAAmB;AACxBC,EAAAA,WAAW,GAAG;AACZ,SAAA,KAAA,GAAa,IAAb,GAAa,EAAb;AACD;;AAEDC,EAAAA,GAAG,CAAA,IAAA,EAAO;AACR,QAAI,CAAC,KAAA,KAAA,CAAA,GAAA,CAAL,IAAK,CAAL,EAA2B;AACzB,WAAA,KAAA,CAAA,GAAA,CAAA,IAAA,EAAqB,IAAA,KAAA,CAAU;AAACC,QAAAA,EAAE,EAAEC;AAAL,OAAV,CAArB;AACD;;AAED,WAAO,KAAA,KAAA,CAAA,GAAA,CAAP,IAAO,CAAP;AACD;;AAXuB;AAc1B,MAAMC,SAAS,GAAG,IAAlB,YAAkB,EAAlB;;AAEA,IAAIC,UAAU,CAAVA,IAAAA,IAAmBA,UAAU,CAAVA,IAAAA,CAAAA,OAAAA,KAAvB,OAAA,EAA4D;AAC1D,QAAM,IAAA,KAAA,CAAA,yCAAA,MAAA,CAAmDA,UAAU,CAAVA,IAAAA,CAAnD,OAAA,EAAA,MAAA,EAAA,MAAA,CAAN,OAAM,CAAA,CAAN;AACD;;AAED,IAAI,CAACA,UAAU,CAAf,IAAA,EAAsB;AACpB,MAAIC,SAAJ,EAAA,EAAiB;AACfC,IAAAA,GAAG,CAAHA,GAAAA,CAAAA,CAAAA,EAAAA,WAAAA,MAAAA,CAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,CAAAA,eAAAA,CAAAA;AACD;;AAEDF,EAAAA,UAAU,CAAVA,IAAAA,GAAkBA,UAAU,CAAVA,IAAAA,IAAmB;AAAA,IAAA,OAAA;AAEnCG,IAAAA,OAAO,EAF4B,OAAA;AAAA,IAAA,GAAA;AAOnCC,IAAAA,KAAK,EAP8B,SAAA;AAcnCC,IAAAA,OAAO,EAAE;AACPC,MAAAA,OAAO,EADA,EAAA;AAEPC,MAAAA,MAAM,EAAE;AAFD;AAd0B,GAArCP;AAmBD;;AAED,SAAA,SAAA;AACA,eAAeA,UAAU,CAAzB,IAAA","sourcesContent":["import {log} from '@luma.gl/gltools';\nimport {Stats} from '@probe.gl/stats';\nimport {isBrowser} from '@probe.gl/env';\n\n// Version detection using babel plugin\n/* global __VERSION__ */\n// @ts-ignore\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'untranspiled source';\n\nconst STARTUP_MESSAGE = 'set luma.log.level=1 (or higher) to trace rendering';\n// Assign luma.log.level in console to control logging: \\\n// 0: none, 1: minimal, 2: verbose, 3: attribute/uniforms, 4: gl logs\n// luma.log.break[], set to gl funcs, luma.log.profile[] set to model names`;\n\nexport class StatsManager {\n  constructor() {\n    this.stats = new Map();\n  }\n\n  get(name) {\n    if (!this.stats.has(name)) {\n      this.stats.set(name, new Stats({id: name}));\n    }\n\n    return this.stats.get(name);\n  }\n}\n\nconst lumaStats = new StatsManager();\n\nif (globalThis.luma && globalThis.luma.VERSION !== VERSION) {\n  throw new Error(`luma.gl - multiple VERSIONs detected: ${globalThis.luma.VERSION} vs ${VERSION}`);\n}\n\nif (!globalThis.luma) {\n  if (isBrowser()) {\n    log.log(1, `luma.gl ${VERSION} - ${STARTUP_MESSAGE}`)();\n  }\n\n  globalThis.luma = globalThis.luma || {\n    VERSION,\n    version: VERSION,\n    log,\n\n    // A global stats object that various components can add information to\n    // E.g. see webgl/resource.js\n    stats: lumaStats,\n\n    // Keep some luma globals in a sub-object\n    // This allows us to dynamically detect if certain modules have been\n    // included (such as IO and headless) and enable related functionality,\n    // without unconditionally requiring and thus bundling big dependencies\n    // into the app.\n    globals: {\n      modules: {},\n      nodeIO: {}\n    }\n  };\n}\n\nexport {lumaStats};\nexport default globalThis.luma;\n"]},"metadata":{},"sourceType":"module"}