{"ast":null,"code":"import { registerLoaders } from '@loaders.gl/core';\nimport { ImageLoader } from '@loaders.gl/images';\nimport log from '../utils/log';\nimport { register } from '../debug';\nimport jsonLoader from '../utils/json-loader';\nconst version = typeof \"8.8.14\" !== 'undefined' ? \"8.8.14\" : globalThis.DECK_VERSION || 'untranspiled source';\nconst existingVersion = globalThis.deck && globalThis.deck.VERSION;\n\nif (existingVersion && existingVersion !== version) {\n  throw new Error(\"deck.gl - multiple versions detected: \".concat(existingVersion, \" vs \").concat(version));\n}\n\nif (!existingVersion) {\n  log.log(1, \"deck.gl \".concat(version))();\n  globalThis.deck = { ...globalThis.deck,\n    VERSION: version,\n    version,\n    log,\n    _registerLoggers: register\n  };\n  registerLoaders([jsonLoader, [ImageLoader, {\n    imagebitmap: {\n      premultiplyAlpha: 'none'\n    }\n  }]]);\n}\n\nexport default globalThis.deck;","map":{"version":3,"sources":["../../../src/lib/init.ts"],"names":["version","globalThis","existingVersion","log","VERSION","_registerLoggers","register","registerLoaders","imagebitmap","premultiplyAlpha"],"mappings":"AAoBA,SAAA,eAAA,QAAA,kBAAA;AACA,SAAA,WAAA,QAAA,oBAAA;AAEA,OAAA,GAAA,MAAA,cAAA;AACA,SAAA,QAAA,QAAA,UAAA;AACA,OAAA,UAAA,MAAA,sBAAA;AAIA,MAAMA,OAAO,GAEX,OAAA,QAAA,KAAA,WAAA,GAAA,QAAA,GAGIC,UAAU,CAAVA,YAAAA,IALN,qBAAA;AAQA,MAAMC,eAAe,GAAGD,UAAU,CAAVA,IAAAA,IAAmBA,UAAU,CAAVA,IAAAA,CAA3C,OAAA;;AAEA,IAAIC,eAAe,IAAIA,eAAe,KAAtC,OAAA,EAAoD;AAClD,QAAM,IAAA,KAAA,CAAA,yCAAA,MAAA,CAAA,eAAA,EAAA,MAAA,EAAA,MAAA,CAAN,OAAM,CAAA,CAAN;AACD;;AAED,IAAI,CAAJ,eAAA,EAAsB;AACpBC,EAAAA,GAAG,CAAHA,GAAAA,CAAAA,CAAAA,EAAAA,WAAAA,MAAAA,CAAAA,OAAAA,CAAAA;AAEAF,EAAAA,UAAU,CAAVA,IAAAA,GAAkB,EAChB,GAAGA,UAAU,CADG,IAAA;AAEhBG,IAAAA,OAAO,EAFS,OAAA;AAAA,IAAA,OAAA;AAAA,IAAA,GAAA;AAMhBC,IAAAA,gBAAgB,EAAEC;AANF,GAAlBL;AASAM,EAAAA,eAAe,CAAC,CAAA,UAAA,EAGd,CAAA,WAAA,EAAc;AAACC,IAAAA,WAAW,EAAE;AAACC,MAAAA,gBAAgB,EAAE;AAAnB;AAAd,GAAd,CAHc,CAAD,CAAfF;AAKD;;AAED,eAAeN,UAAU,CAAzB,IAAA","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {registerLoaders} from '@loaders.gl/core';\nimport {ImageLoader} from '@loaders.gl/images';\n\nimport log from '../utils/log';\nimport {register} from '../debug';\nimport jsonLoader from '../utils/json-loader';\n\n// Version detection using babel plugin\n// Fallback for tests and SSR since global variable is defined by Webpack.\nconst version =\n  // @ts-expect-error __VERSION__ is replaced during transpilation\n  typeof __VERSION__ !== 'undefined'\n    ? // @ts-expect-error\n      __VERSION__\n    : globalThis.DECK_VERSION || 'untranspiled source';\n\n// Note: a `deck` object not created by deck.gl may exist in the global scope\nconst existingVersion = globalThis.deck && globalThis.deck.VERSION;\n\nif (existingVersion && existingVersion !== version) {\n  throw new Error(`deck.gl - multiple versions detected: ${existingVersion} vs ${version}`);\n}\n\nif (!existingVersion) {\n  log.log(1, `deck.gl ${version}`)();\n\n  globalThis.deck = {\n    ...globalThis.deck,\n    VERSION: version,\n    version,\n    log,\n    // experimental\n    _registerLoggers: register\n  };\n\n  registerLoaders([\n    jsonLoader,\n    // @ts-expect-error non-standard Loader format\n    [ImageLoader, {imagebitmap: {premultiplyAlpha: 'none'}}]\n  ]);\n}\n\nexport default globalThis.deck;\n"]},"metadata":{},"sourceType":"module"}