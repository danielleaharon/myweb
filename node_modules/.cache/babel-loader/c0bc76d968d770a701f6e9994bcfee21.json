{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport Resource from './resource';\nexport default class ResourceManager {\n  constructor({\n    gl,\n    protocol\n  }) {\n    _defineProperty(this, \"protocol\", void 0);\n\n    _defineProperty(this, \"_context\", void 0);\n\n    _defineProperty(this, \"_resources\", void 0);\n\n    _defineProperty(this, \"_consumers\", void 0);\n\n    _defineProperty(this, \"_pruneRequest\", void 0);\n\n    this.protocol = protocol || 'resource://';\n    this._context = {\n      gl,\n      resourceManager: this\n    };\n    this._resources = {};\n    this._consumers = {};\n    this._pruneRequest = null;\n  }\n\n  contains(resourceId) {\n    if (resourceId.startsWith(this.protocol)) {\n      return true;\n    }\n\n    return resourceId in this._resources;\n  }\n\n  add({\n    resourceId,\n    data,\n    forceUpdate = false,\n    persistent = true\n  }) {\n    let res = this._resources[resourceId];\n\n    if (res) {\n      res.setData(data, forceUpdate);\n    } else {\n      res = new Resource(resourceId, data, this._context);\n      this._resources[resourceId] = res;\n    }\n\n    res.persistent = persistent;\n  }\n\n  remove(resourceId) {\n    const res = this._resources[resourceId];\n\n    if (res) {\n      res.delete();\n      delete this._resources[resourceId];\n    }\n  }\n\n  unsubscribe({\n    consumerId\n  }) {\n    const consumer = this._consumers[consumerId];\n\n    if (consumer) {\n      for (const requestId in consumer) {\n        const request = consumer[requestId];\n        const resource = this._resources[request.resourceId];\n\n        if (resource) {\n          resource.unsubscribe(request);\n        }\n      }\n\n      delete this._consumers[consumerId];\n      this.prune();\n    }\n  }\n\n  subscribe({\n    resourceId,\n    onChange,\n    consumerId,\n    requestId = 'default'\n  }) {\n    const {\n      _resources: resources,\n      protocol\n    } = this;\n\n    if (resourceId.startsWith(protocol)) {\n      resourceId = resourceId.replace(protocol, '');\n\n      if (!resources[resourceId]) {\n        this.add({\n          resourceId,\n          data: null,\n          persistent: false\n        });\n      }\n    }\n\n    const res = resources[resourceId];\n\n    this._track(consumerId, requestId, res, onChange);\n\n    if (res) {\n      return res.getData();\n    }\n\n    return undefined;\n  }\n\n  prune() {\n    if (!this._pruneRequest) {\n      this._pruneRequest = setTimeout(() => this._prune(), 0);\n    }\n  }\n\n  finalize() {\n    for (const key in this._resources) {\n      this._resources[key].delete();\n    }\n  }\n\n  _track(consumerId, requestId, resource, onChange) {\n    const consumers = this._consumers;\n    const consumer = consumers[consumerId] = consumers[consumerId] || {};\n    const request = consumer[requestId] || {};\n    const oldResource = request.resourceId && this._resources[request.resourceId];\n\n    if (oldResource) {\n      oldResource.unsubscribe(request);\n      this.prune();\n    }\n\n    if (resource) {\n      consumer[requestId] = request;\n      request.onChange = onChange;\n      request.resourceId = resource.id;\n      resource.subscribe(request);\n    }\n  }\n\n  _prune() {\n    this._pruneRequest = null;\n\n    for (const key of Object.keys(this._resources)) {\n      const res = this._resources[key];\n\n      if (!res.persistent && !res.inUse()) {\n        res.delete();\n        delete this._resources[key];\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../../src/lib/resource/resource-manager.ts"],"names":["constructor","protocol","resourceManager","contains","resourceId","add","forceUpdate","persistent","res","remove","unsubscribe","consumerId","consumer","request","resource","subscribe","requestId","_resources","resources","data","prune","setTimeout","finalize","_track","consumers","oldResource","_prune","Object"],"mappings":"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","sourcesContent":["/* global setTimeout */\nimport Resource from './resource';\nimport type {ResourceSubscriber} from './resource';\n\nexport type ResourceManagerContext = {\n  gl: WebGLRenderingContext;\n  resourceManager: ResourceManager;\n};\n\nexport default class ResourceManager {\n  protocol: string;\n\n  private _context: ResourceManagerContext;\n  private _resources: Record<string, Resource>;\n  private _consumers: Record<\n    string,\n    Record<\n      string,\n      ResourceSubscriber & {\n        resourceId: string;\n      }\n    >\n  >;\n  private _pruneRequest: number | null;\n\n  constructor({gl, protocol}) {\n    this.protocol = protocol || 'resource://';\n\n    this._context = {\n      gl,\n      resourceManager: this\n    };\n    this._resources = {};\n    this._consumers = {};\n\n    this._pruneRequest = null;\n  }\n\n  contains(resourceId: string): boolean {\n    if (resourceId.startsWith(this.protocol)) {\n      return true;\n    }\n    return resourceId in this._resources;\n  }\n\n  add({\n    resourceId,\n    data,\n    forceUpdate = false,\n    persistent = true\n  }: {\n    resourceId: string;\n    data: any;\n    forceUpdate?: boolean;\n    persistent?: boolean;\n  }) {\n    let res = this._resources[resourceId];\n\n    if (res) {\n      res.setData(data, forceUpdate);\n    } else {\n      res = new Resource(resourceId, data, this._context);\n      this._resources[resourceId] = res;\n    }\n    // persistent resources can only be removed by calling `remove`\n    // non-persistent resources may be released when there are no more consumers\n    res.persistent = persistent;\n  }\n\n  remove(resourceId: string): void {\n    const res = this._resources[resourceId];\n\n    if (res) {\n      res.delete();\n      delete this._resources[resourceId];\n    }\n  }\n\n  unsubscribe({consumerId}: {consumerId: string}): void {\n    const consumer = this._consumers[consumerId];\n    if (consumer) {\n      for (const requestId in consumer) {\n        const request = consumer[requestId];\n        const resource = this._resources[request.resourceId];\n        if (resource) {\n          resource.unsubscribe(request);\n        }\n      }\n      delete this._consumers[consumerId];\n      this.prune();\n    }\n  }\n\n  subscribe<T>({\n    resourceId,\n    onChange,\n    consumerId,\n    requestId = 'default'\n  }: {\n    resourceId: string;\n    onChange: (data: T | Promise<T>) => void;\n    consumerId: string;\n    requestId: string;\n  }): T | Promise<T> | undefined {\n    const {_resources: resources, protocol} = this;\n    if (resourceId.startsWith(protocol)) {\n      resourceId = resourceId.replace(protocol, '');\n      if (!resources[resourceId]) {\n        // Add placeholder. When this resource becomes available, the consumer will be notified.\n        this.add({resourceId, data: null, persistent: false});\n      }\n    }\n    const res: Resource<T> = resources[resourceId];\n    this._track(consumerId, requestId, res, onChange);\n    if (res) {\n      return res.getData();\n    }\n\n    return undefined;\n  }\n\n  prune(): void {\n    if (!this._pruneRequest) {\n      // prune() may be called multiple times in the same animation frame.\n      // Batch multiple requests together\n      // @ts-ignore setTimeout returns NodeJS.Timeout in node\n      this._pruneRequest = setTimeout(() => this._prune(), 0);\n    }\n  }\n\n  finalize(): void {\n    for (const key in this._resources) {\n      this._resources[key].delete();\n    }\n  }\n\n  private _track(\n    consumerId: string,\n    requestId: string,\n    resource: Resource,\n    onChange: (data: any) => void\n  ) {\n    const consumers = this._consumers;\n    const consumer = (consumers[consumerId] = consumers[consumerId] || {});\n    const request = consumer[requestId] || {};\n\n    const oldResource = request.resourceId && this._resources[request.resourceId];\n    if (oldResource) {\n      oldResource.unsubscribe(request);\n      this.prune();\n    }\n    if (resource) {\n      consumer[requestId] = request;\n      request.onChange = onChange;\n      request.resourceId = resource.id;\n      resource.subscribe(request);\n    }\n  }\n\n  private _prune(): void {\n    this._pruneRequest = null;\n\n    for (const key of Object.keys(this._resources)) {\n      const res = this._resources[key];\n      if (!res.persistent && !res.inUse()) {\n        res.delete();\n        delete this._resources[key];\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}