{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { CompositeLayer, createIterable, log } from '@deck.gl/core';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport * as Polygon from '../solid-polygon-layer/polygon';\nimport { replaceInRange } from '../utils';\nconst defaultLineColor = [0, 0, 0, 255];\nconst defaultFillColor = [0, 0, 0, 255];\nconst defaultProps = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  elevationScale: 1,\n  wireframe: false,\n  _normalize: true,\n  _windingOrder: 'CW',\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n  getPolygon: {\n    type: 'accessor',\n    value: f => f.polygon\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: defaultFillColor\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: defaultLineColor\n  },\n  getLineWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  getElevation: {\n    type: 'accessor',\n    value: 1000\n  },\n  material: true\n};\nexport default class PolygonLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      paths: []\n    };\n\n    if (this.props.getLineDashArray) {\n      log.removed('getLineDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState({\n    changeFlags\n  }) {\n    const geometryChanged = changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon);\n\n    if (geometryChanged && Array.isArray(changeFlags.dataChanged)) {\n      const paths = this.state.paths.slice();\n      const pathsDiff = changeFlags.dataChanged.map(dataRange => replaceInRange({\n        data: paths,\n        getIndex: p => p.__source.index,\n        dataRange,\n        replace: this._getPaths(dataRange)\n      }));\n      this.setState({\n        paths,\n        pathsDiff\n      });\n    } else if (geometryChanged) {\n      this.setState({\n        paths: this._getPaths(),\n        pathsDiff: null\n      });\n    }\n  }\n\n  _getPaths(dataRange = {}) {\n    const {\n      data,\n      getPolygon,\n      positionFormat,\n      _normalize\n    } = this.props;\n    const paths = [];\n    const positionSize = positionFormat === 'XY' ? 2 : 3;\n    const {\n      startRow,\n      endRow\n    } = dataRange;\n    const {\n      iterable,\n      objectInfo\n    } = createIterable(data, startRow, endRow);\n\n    for (const object of iterable) {\n      objectInfo.index++;\n      let polygon = getPolygon(object, objectInfo);\n\n      if (_normalize) {\n        polygon = Polygon.normalize(polygon, positionSize);\n      }\n\n      const {\n        holeIndices\n      } = polygon;\n      const positions = polygon.positions || polygon;\n\n      if (holeIndices) {\n        for (let i = 0; i <= holeIndices.length; i++) {\n          const path = positions.slice(holeIndices[i - 1] || 0, holeIndices[i] || positions.length);\n          paths.push(this.getSubLayerRow({\n            path\n          }, object, objectInfo.index));\n        }\n      } else {\n        paths.push(this.getSubLayerRow({\n          path: positions\n        }, object, objectInfo.index));\n      }\n    }\n\n    return paths;\n  }\n\n  renderLayers() {\n    const {\n      data,\n      _dataDiff,\n      stroked,\n      filled,\n      extruded,\n      wireframe,\n      _normalize,\n      _windingOrder,\n      elevationScale,\n      transitions,\n      positionFormat\n    } = this.props;\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified\n    } = this.props;\n    const {\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      getPolygon,\n      updateTriggers,\n      material\n    } = this.props;\n    const {\n      paths,\n      pathsDiff\n    } = this.state;\n    const FillLayer = this.getSubLayerClass('fill', SolidPolygonLayer);\n    const StrokeLayer = this.getSubLayerClass('stroke', PathLayer);\n    const polygonLayer = this.shouldRenderSubLayer('fill', paths) && new FillLayer({\n      _dataDiff,\n      extruded,\n      elevationScale,\n      filled,\n      wireframe,\n      _normalize,\n      _windingOrder,\n      getElevation,\n      getFillColor,\n      getLineColor: extruded && wireframe ? getLineColor : defaultLineColor,\n      material,\n      transitions\n    }, this.getSubLayerProps({\n      id: 'fill',\n      updateTriggers: updateTriggers && {\n        getPolygon: updateTriggers.getPolygon,\n        getElevation: updateTriggers.getElevation,\n        getFillColor: updateTriggers.getFillColor,\n        lineColors: extruded && wireframe,\n        getLineColor: updateTriggers.getLineColor\n      }\n    }), {\n      data,\n      positionFormat,\n      getPolygon\n    });\n    const polygonLineLayer = !extruded && stroked && this.shouldRenderSubLayer('stroke', paths) && new StrokeLayer({\n      _dataDiff: pathsDiff && (() => pathsDiff),\n      widthUnits: lineWidthUnits,\n      widthScale: lineWidthScale,\n      widthMinPixels: lineWidthMinPixels,\n      widthMaxPixels: lineWidthMaxPixels,\n      jointRounded: lineJointRounded,\n      miterLimit: lineMiterLimit,\n      dashJustified: lineDashJustified,\n      _pathType: 'loop',\n      transitions: transitions && {\n        getWidth: transitions.getLineWidth,\n        getColor: transitions.getLineColor,\n        getPath: transitions.getPolygon\n      },\n      getColor: this.getSubLayerAccessor(getLineColor),\n      getWidth: this.getSubLayerAccessor(getLineWidth),\n      getDashArray: this.getSubLayerAccessor(getLineDashArray)\n    }, this.getSubLayerProps({\n      id: 'stroke',\n      updateTriggers: updateTriggers && {\n        getWidth: updateTriggers.getLineWidth,\n        getColor: updateTriggers.getLineColor,\n        getDashArray: updateTriggers.getLineDashArray\n      }\n    }), {\n      data: paths,\n      positionFormat,\n      getPath: x => x.path\n    });\n    return [!extruded && polygonLayer, polygonLineLayer, extruded && polygonLayer];\n  }\n\n}\n\n_defineProperty(PolygonLayer, \"layerName\", 'PolygonLayer');\n\n_defineProperty(PolygonLayer, \"defaultProps\", defaultProps);","map":{"version":3,"sources":["../../../src/polygon-layer/polygon-layer.ts"],"names":["defaultLineColor","defaultFillColor","defaultProps","stroked","filled","extruded","elevationScale","wireframe","_normalize","_windingOrder","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","lineJointRounded","lineMiterLimit","getPolygon","type","value","f","polygon","getFillColor","getLineColor","getLineWidth","getElevation","material","PolygonLayer","initializeState","paths","log","updateState","changeFlags","geometryChanged","Array","pathsDiff","dataRange","replaceInRange","data","getIndex","p","replace","_getPaths","positionSize","positionFormat","endRow","objectInfo","createIterable","Polygon","holeIndices","positions","i","path","renderLayers","lineDashJustified","FillLayer","StrokeLayer","polygonLayer","transitions","id","updateTriggers","lineColors","polygonLineLayer","_dataDiff","widthUnits","widthScale","widthMinPixels","widthMaxPixels","jointRounded","miterLimit","dashJustified","_pathType","getWidth","getColor","getPath","getDashArray","getLineDashArray","x"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Accessor,\n  AccessorFunction,\n  Color,\n  CompositeLayer,\n  CompositeLayerProps,\n  createIterable,\n  Layer,\n  LayersList,\n  log,\n  Unit,\n  Material,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport * as Polygon from '../solid-polygon-layer/polygon';\nimport {replaceInRange} from '../utils';\n\n/**\n * All properties supported by `PolygonLayer`.\n */\nexport type PolygonLayerProps<DataT = any> = _PolygonLayerProps<DataT> & CompositeLayerProps<DataT>;\n\n/**\n * Properties added by `PolygonLayer`.\n */\ntype _PolygonLayerProps<DataT = any> = {\n  /**\n   * Whether to draw an outline around the polygon (solid fill).\n   *\n   * Note that both the outer polygon as well the outlines of any holes will be drawn.\n   *\n   * @default true\n   */\n  stroked?: boolean;\n\n  /**\n   * Whether to draw a filled polygon (solid fill).\n   *\n   * Note that only the area between the outer polygon and any holes will be filled.\n   *\n   * @default true\n   */\n  filled?: boolean;\n\n  /**\n   * Whether to extrude the polygons.\n   *\n   * Based on the elevations provided by the `getElevation` accessor.\n   *\n   * If set to `false`, all polygons will be flat, this generates less geometry and is faster\n   * than simply returning 0 from getElevation.\n   *\n   * @default false\n   */\n  extruded?: boolean;\n\n  /**\n   * Elevation multiplier.\n   *\n   * The final elevation is calculated by `elevationScale * getElevation(d)`.\n   * `elevationScale` is a handy property to scale all elevation without updating the data.\n   *\n   * @default 1\n   */\n  elevationScale?: number;\n\n  /**\n   * Whether to generate a line wireframe of the hexagon.\n   *\n   * The outline will have \"horizontal\" lines closing the top and bottom polygons and a vertical\n   * line (a \"strut\") for each vertex on the polygon.\n   *\n   * @default false\n   */\n  wireframe?: boolean;\n\n  /**\n   * The units of the line width, one of `meters`, `common`, and `pixels`.\n   *\n   * @default 'meters'\n   * @see Unit.\n   */\n  lineWidthUnits?: Unit;\n\n  /**\n   * The line width multiplier that multiplied to all outlines of `Polygon` and `MultiPolygon`\n   * features if the stroked attribute is true.\n   *\n   * @default 1\n   */\n  lineWidthScale?: number;\n\n  /**\n   * The minimum line width in pixels.\n   *\n   * @default 0\n   */\n  lineWidthMinPixels?: number;\n\n  /**\n   * The maximum line width in pixels\n   *\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  lineWidthMaxPixels?: number;\n\n  /**\n   * Type of joint. If `true`, draw round joints. Otherwise draw miter joints.\n   *\n   * @default false\n   */\n  lineJointRounded?: boolean;\n\n  /**\n   * The maximum extent of a joint in ratio to the stroke width.\n   *\n   * Only works if `lineJointRounded` is false.\n   *\n   * @default 4\n   */\n  lineMiterLimit?: number;\n\n  lineDashJustified?: boolean;\n\n  /** Called on each object in the data stream to retrieve its corresponding polygon. */\n  getPolygon?: AccessorFunction<DataT, any>;\n\n  /**\n   * Fill collor value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getFillColor?: Accessor<DataT, Color>;\n\n  /**\n   * Line color value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getLineColor?: Accessor<DataT, Color>;\n\n  /**\n   * Line width value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getLineWidth?: Accessor<DataT, number>;\n\n  /**\n   * Elevation valur or accessor.\n   *\n   * Only used if `extruded: true`.\n   *\n   * @default 1000\n   */\n  getElevation?: Accessor<DataT, number>;\n\n  /**\n   * This property has been moved to `PathStyleExtension`.\n   *\n   * @deprecated\n   */\n  getLineDashArray?: Accessor<DataT, number> | null;\n\n  /**\n   * If `false`, will skip normalizing the coordinates returned by `getPolygon`.\n   *\n   * **Note**: This prop is experimental\n   *\n   * @default true\n   */\n  _normalize?: boolean;\n\n  /**\n   * Specifies the winding order of rings in the polygon data.\n   *\n   * **Note**: This prop is experimental\n   *\n   * @default 'CW'\n   */\n  _windingOrder?: 'CW' | 'CCW';\n\n  /**\n   * Material settings for lighting effect. Applies if `extruded: true`.\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting\n   */\n  material?: Material;\n};\n\nconst defaultLineColor: [number, number, number, number] = [0, 0, 0, 255];\nconst defaultFillColor: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<PolygonLayerProps> = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  elevationScale: 1,\n  wireframe: false,\n  _normalize: true,\n  _windingOrder: 'CW',\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n\n  getPolygon: {type: 'accessor', value: f => f.polygon},\n  // Polygon fill color\n  getFillColor: {type: 'accessor', value: defaultFillColor},\n  // Point, line and polygon outline color\n  getLineColor: {type: 'accessor', value: defaultLineColor},\n  // Line and polygon outline accessors\n  getLineWidth: {type: 'accessor', value: 1},\n  // Polygon extrusion accessor\n  getElevation: {type: 'accessor', value: 1000},\n\n  // Optional material for 'lighting' shader module\n  material: true\n};\n\n/** A composite layer that renders filled, stroked and/or extruded polygons. */\nexport default class PolygonLayer<DataT = any, ExtraProps = {}> extends CompositeLayer<\n  Required<_PolygonLayerProps<DataT>> & ExtraProps\n> {\n  static layerName = 'PolygonLayer';\n  static defaultProps = defaultProps;\n\n  initializeState(): void {\n    this.state = {\n      paths: []\n    };\n\n    if (this.props.getLineDashArray) {\n      log.removed('getLineDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState({changeFlags}: UpdateParameters<this>) {\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    if (geometryChanged && Array.isArray(changeFlags.dataChanged)) {\n      const paths = this.state.paths.slice();\n      const pathsDiff = changeFlags.dataChanged.map(dataRange =>\n        replaceInRange({\n          data: paths,\n          getIndex: p => p.__source.index,\n          dataRange,\n          replace: this._getPaths(dataRange)\n        })\n      );\n      this.setState({paths, pathsDiff});\n    } else if (geometryChanged) {\n      this.setState({\n        paths: this._getPaths(),\n        pathsDiff: null\n      });\n    }\n  }\n\n  private _getPaths(dataRange: {startRow?: number; endRow?: number} = {}): {path: number[]}[] {\n    const {data, getPolygon, positionFormat, _normalize} = this.props;\n    const paths: {path: number[]}[] = [];\n    const positionSize = positionFormat === 'XY' ? 2 : 3;\n    const {startRow, endRow} = dataRange;\n\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n      let polygon = getPolygon(object, objectInfo);\n      if (_normalize) {\n        polygon = Polygon.normalize(polygon, positionSize);\n      }\n      const {holeIndices} = polygon;\n      const positions = polygon.positions || polygon;\n\n      if (holeIndices) {\n        // split the positions array into `holeIndices.length + 1` rings\n        // holeIndices[-1] falls back to 0\n        // holeIndices[holeIndices.length] falls back to positions.length\n        for (let i = 0; i <= holeIndices.length; i++) {\n          const path = positions.slice(holeIndices[i - 1] || 0, holeIndices[i] || positions.length);\n          paths.push(this.getSubLayerRow({path}, object, objectInfo.index));\n        }\n      } else {\n        paths.push(this.getSubLayerRow({path: positions}, object, objectInfo.index));\n      }\n    }\n    return paths;\n  }\n\n  /* eslint-disable complexity */\n  renderLayers(): Layer | null | LayersList {\n    // Layer composition props\n    const {\n      data,\n      _dataDiff,\n      stroked,\n      filled,\n      extruded,\n      wireframe,\n      _normalize,\n      _windingOrder,\n      elevationScale,\n      transitions,\n      positionFormat\n    } = this.props;\n\n    // Rendering props underlying layer\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      getPolygon,\n      updateTriggers,\n      material\n    } = this.props;\n\n    const {paths, pathsDiff} = this.state;\n\n    const FillLayer = this.getSubLayerClass('fill', SolidPolygonLayer);\n    const StrokeLayer = this.getSubLayerClass('stroke', PathLayer);\n\n    // Filled Polygon Layer\n    const polygonLayer =\n      this.shouldRenderSubLayer('fill', paths) &&\n      new FillLayer(\n        {\n          _dataDiff,\n          extruded,\n          elevationScale,\n\n          filled,\n          wireframe,\n          _normalize,\n          _windingOrder,\n\n          getElevation,\n          getFillColor,\n          getLineColor: extruded && wireframe ? getLineColor : defaultLineColor,\n\n          material,\n          transitions\n        },\n        this.getSubLayerProps({\n          id: 'fill',\n          updateTriggers: updateTriggers && {\n            getPolygon: updateTriggers.getPolygon,\n            getElevation: updateTriggers.getElevation,\n            getFillColor: updateTriggers.getFillColor,\n            // using a legacy API to invalid lineColor attributes\n            // if (extruded && wireframe) has changed\n            lineColors: extruded && wireframe,\n            getLineColor: updateTriggers.getLineColor\n          }\n        }),\n        {\n          data,\n          positionFormat,\n          getPolygon\n        }\n      );\n\n    // Polygon line layer\n    const polygonLineLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer('stroke', paths) &&\n      new StrokeLayer(\n        {\n          _dataDiff: pathsDiff && (() => pathsDiff),\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          jointRounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          // Already normalized\n          _pathType: 'loop',\n\n          transitions: transitions && {\n            getWidth: transitions.getLineWidth,\n            getColor: transitions.getLineColor,\n            getPath: transitions.getPolygon\n          },\n\n          getColor: this.getSubLayerAccessor(getLineColor),\n          getWidth: this.getSubLayerAccessor(getLineWidth),\n          getDashArray: this.getSubLayerAccessor(getLineDashArray)\n        },\n        this.getSubLayerProps({\n          id: 'stroke',\n          updateTriggers: updateTriggers && {\n            getWidth: updateTriggers.getLineWidth,\n            getColor: updateTriggers.getLineColor,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: paths,\n          positionFormat,\n          getPath: x => x.path\n        }\n      );\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonLayer,\n      polygonLineLayer,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonLayer\n    ];\n  }\n  /* eslint-enable complexity */\n}\n"]},"metadata":{},"sourceType":"module"}