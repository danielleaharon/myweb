{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/\\u05E2\\u05D1\\u05D5\\u05D3\\u05D5\\u05EA \\u05DC\\u05D4\\u05D2\\u05E9\\u05D4/myweb/src/components/tetris/components/CellPreview.js\";\nimport React from 'react';\nimport { StyledCell } from '../styles/StyledCellPreview';\nimport { TETROMINOS } from '../tetrominos'; // React.memo makes sure we only re-render the changed cells\n\nconst CellPreview = ({\n  type,\n  text,\n  shape\n}) => shape.map((item, index) => {\n  console.log(item);\n  return item.map((cube, indexCube) => {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    }, React.createElement(StyledCell, {\n      type: cube,\n      color: cube !== 0 && TETROMINOS[cube].color,\n      title: item !== 0 && text[index][indexCube],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    }));\n  });\n});\n\nexport default React.memo(CellPreview);","map":{"version":3,"sources":["/Users/user/Desktop/עבודות להגשה/myweb/src/components/tetris/components/CellPreview.js"],"names":["React","StyledCell","TETROMINOS","CellPreview","type","text","shape","map","item","index","console","log","cube","indexCube","color","memo"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,UAAT,QAA2B,eAA3B,C,CAEA;;AACA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAOC,EAAAA,IAAP;AAAYC,EAAAA;AAAZ,CAAD,KAChBA,KAAK,CAACC,GAAN,CAAU,CAACC,IAAD,EAAMC,KAAN,KAAc;AACtBC,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,SAAOA,IAAI,CAACD,GAAL,CAAS,CAACK,IAAD,EAAOC,SAAP,KAAmB;AACjC,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,oBAAC,UAAD;AAAY,MAAA,IAAI,EAAED,IAAlB;AAA0B,MAAA,KAAK,EAAEA,IAAI,KAAG,CAAP,IAAUV,UAAU,CAACU,IAAD,CAAV,CAAiBE,KAA5D;AAAmE,MAAA,KAAK,EAAEN,IAAI,KAAG,CAAP,IAAUH,IAAI,CAACI,KAAD,CAAJ,CAAYI,SAAZ,CAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAL,CAAP;AAED,GAHM,CAAP;AAKD,CAPD,CADJ;;AAaA,eAAeb,KAAK,CAACe,IAAN,CAAWZ,WAAX,CAAf","sourcesContent":["import React from 'react';\nimport { StyledCell } from '../styles/StyledCellPreview';\nimport { TETROMINOS } from '../tetrominos';\n\n// React.memo makes sure we only re-render the changed cells\nconst CellPreview = ({ type,text,shape }) => (\n    shape.map((item,index)=>{\n      console.log(item)\n      return item.map((cube, indexCube)=>{\n        return <div><StyledCell type={cube}   color={cube!==0&&TETROMINOS[cube].color} title={item!==0&&text[index][indexCube]}>\n        </StyledCell></div>\n      })\n   \n    }  \n)\n\n);\n\nexport default React.memo(CellPreview);"]},"metadata":{},"sourceType":"module"}