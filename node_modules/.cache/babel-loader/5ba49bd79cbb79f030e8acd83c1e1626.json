{"ast":null,"code":"import _slicedToArray from\"/Users/user/Desktop/\\u05E2\\u05D1\\u05D5\\u05D3\\u05D5\\u05EA \\u05DC\\u05D4\\u05D2\\u05E9\\u05D4/myweb/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import'./tetris.css';import{createStage,checkCollision}from'./gameHelpers';import{StyledTetrisWrapper,StyledTetris}from'./styles/StyledTetris';// Custom Hooks\nimport{useInterval}from'./hooks/useInterval';import{usePlayer}from'./hooks/usePlayer';import{useStage}from'./hooks/useStage';import{useGameStatus}from'./hooks/useGameStatus';// Components\nimport Stage from'./components/Stage';import Display from'./components/Display';import StartButton from'./components/StartButton';import GameOverButton from'./components/GameOverButton';var Tetris=function Tetris(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),dropTime=_useState2[0],setDropTime=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),gameOver=_useState4[0],setGameOver=_useState4[1];var _useState5=useState(true),_useState6=_slicedToArray(_useState5,2),newGame=_useState6[0],setNewGame=_useState6[1];var _usePlayer=usePlayer(),_usePlayer2=_slicedToArray(_usePlayer,4),player=_usePlayer2[0],updatePlayerPos=_usePlayer2[1],resetPlayer=_usePlayer2[2],playerRotate=_usePlayer2[3];var _useStage=useStage(player,resetPlayer),_useStage2=_slicedToArray(_useStage,3),stage=_useStage2[0],setStage=_useStage2[1],rowsCleared=_useStage2[2];var _useGameStatus=useGameStatus(rowsCleared),_useGameStatus2=_slicedToArray(_useGameStatus,6),score=_useGameStatus2[0],setScore=_useGameStatus2[1],rows=_useGameStatus2[2],setRows=_useGameStatus2[3],level=_useGameStatus2[4],setLevel=_useGameStatus2[5];var movePlayer=function movePlayer(dir){if(!checkCollision(player,stage,{x:dir,y:0})){updatePlayerPos({x:dir,y:0});}};var keyUp=function keyUp(_ref){var keyCode=_ref.keyCode;if(!gameOver){// Activate the interval again when user releases down arrow.\nif(keyCode===40){setDropTime(1000/(level+1));}}};var startGame=function startGame(){// Reset everything\nsetStage(createStage());setDropTime(1000);resetPlayer();setScore(0);setLevel(0);setRows(0);setGameOver(false);setNewGame(false);};var drop=function drop(){// Increase level when player has cleared 10 rows\nif(rows>(level+1)*10){setLevel(function(prev){return prev+1;});// Also increase speed\nsetDropTime(1000/(level+1)+200);}if(!checkCollision(player,stage,{x:0,y:1})){updatePlayerPos({x:0,y:1,collided:false});}else{// Game over!\nif(player.pos.y<1){console.log('GAME OVER!!!');setGameOver(true);setDropTime(null);}updatePlayerPos({x:0,y:0,collided:true});}};var dropPlayer=function dropPlayer(){// We don't need to run the interval when we use the arrow down to\n// move the tetromino downwards. So deactivate it for now.\nsetDropTime(null);drop();};// This one starts the game\n// Custom hook by Dan Abramov\nuseInterval(function(){drop();},dropTime);var move=function move(_ref2){var keyCode=_ref2.keyCode;if(!gameOver){if(keyCode===37){movePlayer(-1);}else if(keyCode===39){movePlayer(1);}else if(keyCode===40){dropPlayer();}else if(keyCode===38){playerRotate(stage,1);}}};return React.createElement(StyledTetrisWrapper,{tabIndex:\"0\",onKeyDown:function onKeyDown(e){return move(e);},onKeyUp:keyUp},React.createElement(StyledTetris,null,React.createElement(Stage,{stage:stage,newGame:newGame}),React.createElement(\"aside\",null,gameOver?React.createElement(GameOverButton,{callback:startGame,text:\"Game Over\"}):React.createElement(\"div\",null,React.createElement(Display,{text:\"Score: \".concat(score)}),React.createElement(Display,{text:\"rows: \".concat(rows)}),React.createElement(Display,{text:\"Level: \".concat(level)}),React.createElement(StartButton,{newGame:newGame,callback:startGame})))));};export default Tetris;","map":{"version":3,"sources":["/Users/user/Desktop/עבודות להגשה/myweb/src/components/tetris/tetris.js"],"names":["React","useState","createStage","checkCollision","StyledTetrisWrapper","StyledTetris","useInterval","usePlayer","useStage","useGameStatus","Stage","Display","StartButton","GameOverButton","Tetris","dropTime","setDropTime","gameOver","setGameOver","newGame","setNewGame","player","updatePlayerPos","resetPlayer","playerRotate","stage","setStage","rowsCleared","score","setScore","rows","setRows","level","setLevel","movePlayer","dir","x","y","keyUp","keyCode","startGame","drop","prev","collided","pos","console","log","dropPlayer","move","e"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport  './tetris.css';\n\nimport { createStage, checkCollision } from './gameHelpers';\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\n\n// Custom Hooks\nimport { useInterval } from './hooks/useInterval';\nimport { usePlayer } from './hooks/usePlayer';\nimport { useStage } from './hooks/useStage';\nimport { useGameStatus } from './hooks/useGameStatus';\n\n// Components\nimport Stage from './components/Stage';\n\nimport Display from './components/Display';\nimport StartButton from './components/StartButton';\nimport GameOverButton from './components/GameOverButton';\n\nconst Tetris = () => {\n  const [dropTime, setDropTime] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n  const [newGame, setNewGame] = useState(true);\n\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(\n    rowsCleared\n  );\n\n\n  const movePlayer = dir => {\n    if (!checkCollision(player, stage, { x: dir, y: 0 })) {\n      updatePlayerPos({ x: dir, y: 0 });\n    }\n  };\n\n  const keyUp = ({ keyCode }) => {\n    if (!gameOver) {\n      // Activate the interval again when user releases down arrow.\n      if (keyCode === 40) {\n        setDropTime(1000 / (level + 1));\n      }\n    }\n  };\n\n  const startGame = () => {\n    // Reset everything\n    setStage(createStage());\n    setDropTime(1000);\n    resetPlayer();\n    setScore(0);\n    setLevel(0);\n    setRows(0);\n    setGameOver(false);\n    setNewGame(false);\n    \n  };\n\n  const drop = () => {\n    // Increase level when player has cleared 10 rows\n    if (rows > (level + 1) * 10) {\n      setLevel(prev => prev + 1);\n      // Also increase speed\n      setDropTime(1000 / (level + 1) + 200);\n    }\n\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\n      updatePlayerPos({ x: 0, y: 1, collided: false });\n    } else {\n      // Game over!\n      if (player.pos.y < 1) {\n        console.log('GAME OVER!!!');\n        setGameOver(true);\n        setDropTime(null);\n      }\n      updatePlayerPos({ x: 0, y: 0, collided: true });\n    }\n  };\n\n  const dropPlayer = () => {\n    // We don't need to run the interval when we use the arrow down to\n    // move the tetromino downwards. So deactivate it for now.\n    setDropTime(null);\n    drop();\n  };\n\n  // This one starts the game\n  // Custom hook by Dan Abramov\n  useInterval(() => {\n    drop();\n  }, dropTime);\n\n  const move = ({ keyCode }) => {\n    if (!gameOver) {\n      if (keyCode === 37) {\n        movePlayer(-1);\n      } else if (keyCode === 39) {\n        movePlayer(1);\n      } else if (keyCode === 40) {\n        dropPlayer();\n      } else if (keyCode === 38) {\n        playerRotate(stage, 1);\n      }\n    }\n  };\n\n  return (\n    <StyledTetrisWrapper\n      tabIndex=\"0\"\n      onKeyDown={e => move(e)}\n      onKeyUp={keyUp}\n    >\n      <StyledTetris>\n        <Stage stage={stage} newGame={newGame} />\n        <aside>\n          {gameOver ? (\n            <GameOverButton callback={startGame} text=\"Game Over\" />\n          ) : (\n            <div>\n              <Display text={`Score: ${score}`} />\n              <Display text={`rows: ${rows}`} />\n              <Display text={`Level: ${level}`} />\n              <StartButton newGame={newGame} callback={startGame} />\n{/* \n              <div>\n                {['L','O','S','T','Z','I','J'].map((item,index)=>{\n                    // console.log(TETROMINOS[item])\n                  return  <CellPreview  key={index}size={'37px'} type={item} text={TETROMINOS[item].text} shape={TETROMINOS[item].shape} />\n                                }                )}\n              </div> */}\n\n            </div>\n            \n          )}\n        </aside>\n      </StyledTetris>\n    </StyledTetrisWrapper>\n  );\n};\n\nexport default Tetris;"]},"metadata":{},"sourceType":"module"}