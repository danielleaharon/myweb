{"ast":null,"code":"function _extendableBuiltin(cls) {\n  function ExtendableBuiltin() {\n    var instance = Reflect.construct(cls, Array.from(arguments));\n    Object.setPrototypeOf(instance, Object.getPrototypeOf(this));\n    return instance;\n  }\n\n  ExtendableBuiltin.prototype = Object.create(cls.prototype, {\n    constructor: {\n      value: cls,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (Object.setPrototypeOf) {\n    Object.setPrototypeOf(ExtendableBuiltin, cls);\n  } else {\n    ExtendableBuiltin.__proto__ = cls;\n  }\n\n  return ExtendableBuiltin;\n}\n\nimport { config, formatValue, equals, isArray } from '../../lib/common';\nexport default class MathArray extends _extendableBuiltin(Array) {\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  fromArray(array, offset = 0) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = array[i + offset];\n    }\n\n    return this.check();\n  }\n\n  toArray(targetArray = [], offset = 0) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      targetArray[offset + i] = this[i];\n    }\n\n    return targetArray;\n  }\n\n  from(arrayOrObject) {\n    return Array.isArray(arrayOrObject) ? this.copy(arrayOrObject) : this.fromObject(arrayOrObject);\n  }\n\n  to(arrayOrObject) {\n    if (arrayOrObject === this) {\n      return this;\n    }\n\n    return isArray(arrayOrObject) ? this.toArray(arrayOrObject) : this.toObject(arrayOrObject);\n  }\n\n  toTarget(target) {\n    return target ? this.to(target) : this;\n  }\n\n  toFloat32Array() {\n    return new Float32Array(this);\n  }\n\n  toString() {\n    return this.formatString(config);\n  }\n\n  formatString(opts) {\n    let string = '';\n\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      string += (i > 0 ? ', ' : '') + formatValue(this[i], opts);\n    }\n\n    return \"\".concat(opts.printTypes ? this.constructor.name : '', \"[\").concat(string, \"]\");\n  }\n\n  equals(array) {\n    if (!array || this.length !== array.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      if (!equals(this[i], array[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  exactEquals(array) {\n    if (!array || this.length !== array.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      if (this[i] !== array[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  negate() {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = -this[i];\n    }\n\n    return this.check();\n  }\n\n  lerp(a, b, t) {\n    if (t === undefined) {\n      return this.lerp(this, a, b);\n    }\n\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      const ai = a[i];\n      this[i] = ai + t * (b[i] - ai);\n    }\n\n    return this.check();\n  }\n\n  min(vector) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.min(vector[i], this[i]);\n    }\n\n    return this.check();\n  }\n\n  max(vector) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.max(vector[i], this[i]);\n    }\n\n    return this.check();\n  }\n\n  clamp(minVector, maxVector) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.min(Math.max(this[i], minVector[i]), maxVector[i]);\n    }\n\n    return this.check();\n  }\n\n  add(...vectors) {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] += vector[i];\n      }\n    }\n\n    return this.check();\n  }\n\n  subtract(...vectors) {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] -= vector[i];\n      }\n    }\n\n    return this.check();\n  }\n\n  scale(scale) {\n    if (typeof scale === 'number') {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] *= scale;\n      }\n    } else {\n      for (let i = 0; i < this.ELEMENTS && i < scale.length; ++i) {\n        this[i] *= scale[i];\n      }\n    }\n\n    return this.check();\n  }\n\n  multiplyByScalar(scalar) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] *= scalar;\n    }\n\n    return this.check();\n  }\n\n  check() {\n    if (config.debug && !this.validate()) {\n      throw new Error(\"math.gl: \".concat(this.constructor.name, \" some fields set to invalid numbers'\"));\n    }\n\n    return this;\n  }\n\n  validate() {\n    let valid = this.length === this.ELEMENTS;\n\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      valid = valid && Number.isFinite(this[i]);\n    }\n\n    return valid;\n  }\n\n  sub(a) {\n    return this.subtract(a);\n  }\n\n  setScalar(a) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = a;\n    }\n\n    return this.check();\n  }\n\n  addScalar(a) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] += a;\n    }\n\n    return this.check();\n  }\n\n  subScalar(a) {\n    return this.addScalar(-a);\n  }\n\n  multiplyScalar(scalar) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] *= scalar;\n    }\n\n    return this.check();\n  }\n\n  divideScalar(a) {\n    return this.multiplyByScalar(1 / a);\n  }\n\n  clampScalar(min, max) {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.min(Math.max(this[i], min), max);\n    }\n\n    return this.check();\n  }\n\n  get elements() {\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../../src/classes/base/math-array.ts"],"names":["clone","fromArray","offset","i","array","toArray","targetArray","from","Array","to","arrayOrObject","isArray","toTarget","target","toFloat32Array","toString","formatString","string","formatValue","opts","equals","exactEquals","negate","lerp","t","ai","a","b","min","Math","vector","max","clamp","minVector","maxVector","add","subtract","scale","multiplyByScalar","check","config","validate","valid","Number","sub","setScalar","addScalar","subScalar","multiplyScalar","divideScalar","clampScalar","elements"],"mappings":"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","sourcesContent":["// math.gl, MIT License\nimport {NumericArray} from '@math.gl/types';\nimport {ConfigurationOptions, config, formatValue, equals, isArray} from '../../lib/common';\n\n/** Base class for vectors and matrices */\nexport default abstract class MathArray extends Array<number> {\n  /** Number of elements (values) in this array */\n  abstract get ELEMENTS(): number;\n\n  abstract copy(vector: Readonly<NumericArray>): this;\n\n  abstract fromObject(object: object): this;\n\n  // Common methods\n\n  /**\n   * Clone the current object\n   * @returns a new copy of this object\n   */\n  clone(): this {\n    // @ts-expect-error TS2351: Cannot use 'new' with an expression whose type lacks a call or construct signature.\n    return new this.constructor().copy(this); // eslint-disable-line\n  }\n\n  fromArray(array: Readonly<NumericArray>, offset: number = 0): this {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = array[i + offset];\n    }\n    return this.check();\n  }\n\n  toArray<TypedArray>(targetArray: TypedArray, offset?: number): TypedArray;\n  toArray(targetArray?: number[], offset?: number): NumericArray;\n\n  toArray(targetArray: NumericArray = [], offset: number = 0): NumericArray {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      targetArray[offset + i] = this[i];\n    }\n    return targetArray;\n  }\n\n  from(arrayOrObject: Readonly<NumericArray> | object): this {\n    return Array.isArray(arrayOrObject) ? this.copy(arrayOrObject) : this.fromObject(arrayOrObject);\n  }\n\n  to<T extends NumericArray | object>(arrayOrObject: T): T {\n    // @ts-ignore\n    if (arrayOrObject === this) {\n      return this;\n    }\n    // @ts-expect-error TS2339: Property 'toObject' does not exist on type 'MathArray'.\n    return isArray(arrayOrObject) ? this.toArray(arrayOrObject) : this.toObject(arrayOrObject);\n  }\n\n  toTarget(target: this): this {\n    return target ? this.to(target) : this;\n  }\n\n  /** @deprecated */\n  toFloat32Array(): Float32Array {\n    return new Float32Array(this);\n  }\n\n  toString(): string {\n    return this.formatString(config);\n  }\n\n  /** Formats string according to options */\n  formatString(opts: ConfigurationOptions): string {\n    let string = '';\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      string += (i > 0 ? ', ' : '') + formatValue(this[i], opts);\n    }\n    return `${opts.printTypes ? this.constructor.name : ''}[${string}]`;\n  }\n\n  equals(array: Readonly<NumericArray>): boolean {\n    if (!array || this.length !== array.length) {\n      return false;\n    }\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      if (!equals(this[i], array[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  exactEquals(array: Readonly<NumericArray>): boolean {\n    if (!array || this.length !== array.length) {\n      return false;\n    }\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      if (this[i] !== array[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // Modifiers\n\n  /** Negates all values in this object */\n  negate(): this {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = -this[i];\n    }\n    return this.check();\n  }\n\n  /** Linearly interpolates between two values */\n  lerp(a: Readonly<NumericArray>, t: number): this;\n  lerp(a: Readonly<NumericArray>, b: Readonly<NumericArray>, t: number): this;\n\n  lerp(a: Readonly<NumericArray>, b: Readonly<NumericArray> | number, t?: number): this {\n    if (t === undefined) {\n      return this.lerp(this, a, b as number);\n    }\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      const ai = a[i];\n      this[i] = ai + t * (b[i] - ai);\n    }\n    return this.check();\n  }\n\n  /** Minimal */\n  min(vector: Readonly<NumericArray>): this {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.min(vector[i], this[i]);\n    }\n    return this.check();\n  }\n\n  /** Maximal */\n  max(vector: Readonly<NumericArray>): this {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.max(vector[i], this[i]);\n    }\n    return this.check();\n  }\n\n  clamp(minVector: Readonly<NumericArray>, maxVector: Readonly<NumericArray>): this {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.min(Math.max(this[i], minVector[i]), maxVector[i]);\n    }\n    return this.check();\n  }\n\n  add(...vectors: Readonly<NumericArray>[]): this {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] += vector[i];\n      }\n    }\n    return this.check();\n  }\n\n  subtract(...vectors: Readonly<NumericArray>[]): this {\n    for (const vector of vectors) {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] -= vector[i];\n      }\n    }\n    return this.check();\n  }\n\n  scale(scale: number | Readonly<NumericArray>): this {\n    if (typeof scale === 'number') {\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        this[i] *= scale;\n      }\n    } else {\n      for (let i = 0; i < this.ELEMENTS && i < scale.length; ++i) {\n        this[i] *= scale[i];\n      }\n    }\n    return this.check();\n  }\n\n  /**\n   * Multiplies all elements by `scale`\n   * Note: `Matrix4.multiplyByScalar` only scales its 3x3 \"minor\"\n   */\n  multiplyByScalar(scalar: number): this {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] *= scalar;\n    }\n    return this.check();\n  }\n\n  // Debug checks\n\n  /** Throws an error if array length is incorrect or contains illegal values */\n  check(): this {\n    if (config.debug && !this.validate()) {\n      throw new Error(`math.gl: ${this.constructor.name} some fields set to invalid numbers'`);\n    }\n    return this;\n  }\n\n  /** Returns false if the array length is incorrect or contains illegal values */\n  validate(): boolean {\n    let valid = this.length === this.ELEMENTS;\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      valid = valid && Number.isFinite(this[i]);\n    }\n    return valid;\n  }\n\n  // three.js compatibility\n\n  /** @deprecated */\n  sub(a: Readonly<NumericArray>): this {\n    return this.subtract(a);\n  }\n\n  /** @deprecated */\n  setScalar(a: number): this {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = a;\n    }\n    return this.check();\n  }\n\n  /** @deprecated */\n  addScalar(a: number): this {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] += a;\n    }\n    return this.check();\n  }\n\n  /** @deprecated */\n  subScalar(a: number): this {\n    return this.addScalar(-a);\n  }\n\n  /** @deprecated */\n  multiplyScalar(scalar: number): this {\n    // Multiplies all elements\n    // `Matrix4.scale` only scales its 3x3 \"minor\"\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] *= scalar;\n    }\n    return this.check();\n  }\n\n  /** @deprecated */\n  divideScalar(a: number): this {\n    return this.multiplyByScalar(1 / a);\n  }\n\n  /** @deprecated */\n  clampScalar(min: number, max: number): this {\n    for (let i = 0; i < this.ELEMENTS; ++i) {\n      this[i] = Math.min(Math.max(this[i], min), max);\n    }\n    return this.check();\n  }\n\n  /** @deprecated */\n  get elements(): NumericArray {\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}