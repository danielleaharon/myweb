{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { ClipSpace, setParameters, withParameters, clear } from '@luma.gl/core';\nimport Pass from './pass';\nexport default class ScreenPass extends Pass {\n  constructor(gl, props) {\n    super(gl, props);\n\n    _defineProperty(this, \"model\", void 0);\n\n    const {\n      module,\n      fs,\n      id\n    } = props;\n    this.model = new ClipSpace(gl, {\n      id,\n      fs,\n      modules: [module]\n    });\n  }\n\n  render(params) {\n    const gl = this.gl;\n    setParameters(gl, {\n      viewport: [0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight]\n    });\n    withParameters(gl, {\n      framebuffer: params.outputBuffer,\n      clearColor: [0, 0, 0, 0]\n    }, () => this._renderPass(gl, params));\n  }\n\n  delete() {\n    this.model.delete();\n    this.model = null;\n  }\n\n  _renderPass(gl, options) {\n    const {\n      inputBuffer\n    } = options;\n    clear(gl, {\n      color: true\n    });\n    this.model.draw({\n      moduleSettings: this.props.moduleSettings,\n      uniforms: {\n        texture: inputBuffer,\n        texSize: [inputBuffer.width, inputBuffer.height]\n      },\n      parameters: {\n        depthWrite: false,\n        depthTest: false\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../src/passes/screen-pass.ts"],"names":["constructor","id","modules","render","gl","setParameters","viewport","withParameters","framebuffer","params","clearColor","delete","_renderPass","inputBuffer","clear","color","moduleSettings","uniforms","texture","texSize","parameters","depthWrite","depthTest"],"mappings":";AAOA,SAAA,SAAA,EAAA,aAAA,EAAA,cAAA,EAAA,KAAA,QAAA,eAAA;AACA,OAAA,IAAA,MAAA,QAAA;AAgBA,eAAe,MAAA,UAAA,SAAA,IAAA,CAA8B;AAG3CA,EAAAA,WAAW,CAAA,EAAA,EAAA,KAAA,EAAoD;AAC7D,UAAA,EAAA,EAAA,KAAA;;AAD6D,IAAA,eAAA,CAAA,IAAA,EAAA,OAAA,EAAA,KAAA,CAAA,CAAA;;AAE7D,UAAM;AAAA,MAAA,MAAA;AAAA,MAAA,EAAA;AAAaC,MAAAA;AAAb,QAAN,KAAA;AACA,SAAA,KAAA,GAAa,IAAA,SAAA,CAAA,EAAA,EAAkB;AAAA,MAAA,EAAA;AAAA,MAAA,EAAA;AAASC,MAAAA,OAAO,EAAE,CAAA,MAAA;AAAlB,KAAlB,CAAb;AACD;;AAEDC,EAAAA,MAAM,CAAA,MAAA,EAAwC;AAC5C,UAAMC,EAAE,GAAG,KAAX,EAAA;AAEAC,IAAAA,aAAa,CAAA,EAAA,EAAK;AAACC,MAAAA,QAAQ,EAAE,CAAA,CAAA,EAAA,CAAA,EAAOF,EAAE,CAAT,kBAAA,EAA8BA,EAAE,CAAhC,mBAAA;AAAX,KAAL,CAAbC;AAEAE,IAAAA,cAAc,CAAA,EAAA,EAAK;AAACC,MAAAA,WAAW,EAAEC,MAAM,CAApB,YAAA;AAAmCC,MAAAA,UAAU,EAAE,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AAA/C,KAAL,EAAmE,MAC/E,KAAA,WAAA,CAAA,EAAA,EADFH,MACE,CADY,CAAdA;AAGD;;AAEDI,EAAAA,MAAM,GAAG;AACP,SAAA,KAAA,CAAA,MAAA;AACA,SAAA,KAAA,GAAA,IAAA;AACD;;AAUSC,EAAAA,WAAW,CAAA,EAAA,EAAA,OAAA,EAA8D;AACjF,UAAM;AAACC,MAAAA;AAAD,QAAN,OAAA;AACAC,IAAAA,KAAK,CAAA,EAAA,EAAK;AAACC,MAAAA,KAAK,EAAE;AAAR,KAAL,CAALD;AACA,SAAA,KAAA,CAAA,IAAA,CAAgB;AACdE,MAAAA,cAAc,EAAE,KAAA,KAAA,CADF,cAAA;AAEdC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,OAAO,EADC,WAAA;AAERC,QAAAA,OAAO,EAAE,CAACN,WAAW,CAAZ,KAAA,EAAoBA,WAAW,CAA/B,MAAA;AAFD,OAFI;AAMdO,MAAAA,UAAU,EAAE;AACVC,QAAAA,UAAU,EADA,KAAA;AAEVC,QAAAA,SAAS,EAAE;AAFD;AANE,KAAhB;AAWD;;AA9C0C","sourcesContent":["//\n// A base render pass.\n//\n// Attribution: This class and the multipass system were inspired by\n// the THREE.js EffectComposer and *Pass classes\n\nimport type {Framebuffer} from '@luma.gl/core';\nimport {ClipSpace, setParameters, withParameters, clear} from '@luma.gl/core';\nimport Pass from './pass';\n\nimport type {ShaderModule} from '../types/types';\n\ntype ScreenPassProps = {\n  module: ShaderModule;\n  fs: string | null;\n  id: string;\n  moduleSettings: any;\n};\n\ntype ScreenPassRenderOptions = {\n  inputBuffer: Framebuffer;\n  outputBuffer: Framebuffer;\n};\n\nexport default class ScreenPass extends Pass {\n  model: ClipSpace;\n\n  constructor(gl: WebGLRenderingContext, props: ScreenPassProps) {\n    super(gl, props);\n    const {module, fs, id} = props;\n    this.model = new ClipSpace(gl, {id, fs, modules: [module]});\n  }\n\n  render(params: ScreenPassRenderOptions): void {\n    const gl = this.gl;\n\n    setParameters(gl, {viewport: [0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight]});\n\n    withParameters(gl, {framebuffer: params.outputBuffer, clearColor: [0, 0, 0, 0]}, () =>\n      this._renderPass(gl, params)\n    );\n  }\n\n  delete() {\n    this.model.delete();\n    this.model = null;\n  }\n\n  // Private methods\n\n  /**\n   * Renders the pass.\n   * This is an abstract method that should be overridden.\n   * @param inputBuffer - Frame buffer that contains the result of the previous pass\n   * @param outputBuffer - Frame buffer that serves as the output render target\n   */\n  protected _renderPass(gl: WebGLRenderingContext, options: ScreenPassRenderOptions) {\n    const {inputBuffer} = options;\n    clear(gl, {color: true});\n    this.model.draw({\n      moduleSettings: this.props.moduleSettings,\n      uniforms: {\n        texture: inputBuffer,\n        texSize: [inputBuffer.width, inputBuffer.height]\n      },\n      parameters: {\n        depthWrite: false,\n        depthTest: false\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}