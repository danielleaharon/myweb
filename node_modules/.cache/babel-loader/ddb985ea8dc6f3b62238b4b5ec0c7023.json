{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/\\u05E2\\u05D1\\u05D5\\u05D3\\u05D5\\u05EA \\u05DC\\u05D4\\u05D2\\u05E9\\u05D4/myweb/src/components/tetris/components/CellPreview.js\";\nimport React from 'react';\nimport { StyledCell } from '../styles/StyledCellPreview';\nimport { TETROMINOS } from '../tetrominos'; // React.memo makes sure we only re-render the changed cells\n\nconst CellPreview = ({\n  size,\n  type,\n  text,\n  shape\n}) => React.createElement(\"div\", {\n  className: \"preview-cell\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7\n  },\n  __self: this\n}, shape.map((item, index) => {\n  console.log(item.filter(x => x !== 0).length);\n\n  if (item.filter(x => x !== 0).length > 0) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, item.map((cube, indexCube) => {\n      return React.createElement(StyledCell, {\n        type: cube,\n        size: size,\n        color: cube !== 0 && TETROMINOS[cube].color,\n        title: cube !== 0 && text[index][indexCube],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13\n        },\n        __self: this\n      });\n    }));\n  }\n}));\n\nexport default React.memo(CellPreview);","map":{"version":3,"sources":["/Users/user/Desktop/עבודות להגשה/myweb/src/components/tetris/components/CellPreview.js"],"names":["React","StyledCell","TETROMINOS","CellPreview","size","type","text","shape","map","item","index","console","log","filter","x","length","cube","indexCube","color","memo"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,UAAT,QAA2B,eAA3B,C,CAEA;;AACA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAOC,EAAAA,IAAP;AAAYC,EAAAA,IAAZ;AAAiBC,EAAAA;AAAjB,CAAD,KAClB;AAAK,EAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAEGA,KAAK,CAACC,GAAN,CAAU,CAACC,IAAD,EAAMC,KAAN,KAAc;AACvBC,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACI,MAAL,CAAYC,CAAC,IAAEA,CAAC,KAAG,CAAnB,EAAsBC,MAAlC;;AACD,MAAGN,IAAI,CAACI,MAAL,CAAYC,CAAC,IAAEA,CAAC,KAAG,CAAnB,EAAsBC,MAAtB,GAA6B,CAAhC,EAAkC;AACjC,WAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAON,IAAI,CAACD,GAAL,CAAS,CAACQ,IAAD,EAAOC,SAAP,KAAmB;AAC1C,aAAO,oBAAC,UAAD;AAAY,QAAA,IAAI,EAAED,IAAlB;AAAyB,QAAA,IAAI,EAAEZ,IAA/B;AAAqC,QAAA,KAAK,EAAEY,IAAI,KAAG,CAAP,IAAUd,UAAU,CAACc,IAAD,CAAV,CAAiBE,KAAvE;AAA8E,QAAA,KAAK,EAAEF,IAAI,KAAG,CAAP,IAAUV,IAAI,CAACI,KAAD,CAAJ,CAAYO,SAAZ,CAA/F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAED,KAHe,CAAP,CAAT;AAMA;AACD,CAVA,CAFH,CADF;;AAmBA,eAAejB,KAAK,CAACmB,IAAN,CAAWhB,WAAX,CAAf","sourcesContent":["import React from 'react';\nimport { StyledCell } from '../styles/StyledCellPreview';\nimport { TETROMINOS } from '../tetrominos';\n\n// React.memo makes sure we only re-render the changed cells\nconst CellPreview = ({ size,type,text,shape }) => (\n  <div className='preview-cell'>\n    \n    {shape.map((item,index)=>{\n      console.log(item.filter(x=>x!==0).length)\n     if(item.filter(x=>x!==0).length>0){\n      return   <div >{item.map((cube, indexCube)=>{\n        return <StyledCell type={cube}  size={size} color={cube!==0&&TETROMINOS[cube].color} title={cube!==0&&text[index][indexCube]}>\n        </StyledCell>\n      })}\n    \n   </div>\n     }\n    }  \n    \n)}\n</div>\n);\n\nexport default React.memo(CellPreview);"]},"metadata":{},"sourceType":"module"}