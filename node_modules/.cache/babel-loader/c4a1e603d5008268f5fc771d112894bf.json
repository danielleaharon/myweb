{"ast":null,"code":"import MathArray from './math-array';\nimport { checkNumber } from '../../lib/validators';\nimport { config } from '../../lib/common';\nexport default class Matrix extends MathArray {\n  toString() {\n    let string = '[';\n\n    if (config.printRowMajor) {\n      string += 'row-major:';\n\n      for (let row = 0; row < this.RANK; ++row) {\n        for (let col = 0; col < this.RANK; ++col) {\n          string += \" \".concat(this[col * this.RANK + row]);\n        }\n      }\n    } else {\n      string += 'column-major:';\n\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        string += \" \".concat(this[i]);\n      }\n    }\n\n    string += ']';\n    return string;\n  }\n\n  getElementIndex(row, col) {\n    return col * this.RANK + row;\n  }\n\n  getElement(row, col) {\n    return this[col * this.RANK + row];\n  }\n\n  setElement(row, col, value) {\n    this[col * this.RANK + row] = checkNumber(value);\n    return this;\n  }\n\n  getColumn(columnIndex, result = new Array(this.RANK).fill(-0)) {\n    const firstIndex = columnIndex * this.RANK;\n\n    for (let i = 0; i < this.RANK; ++i) {\n      result[i] = this[firstIndex + i];\n    }\n\n    return result;\n  }\n\n  setColumn(columnIndex, columnVector) {\n    const firstIndex = columnIndex * this.RANK;\n\n    for (let i = 0; i < this.RANK; ++i) {\n      this[firstIndex + i] = columnVector[i];\n    }\n\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../../../../src/classes/base/matrix.ts"],"names":["toString","string","config","row","col","i","getElementIndex","getElement","setElement","checkNumber","getColumn","result","firstIndex","columnIndex","setColumn","columnVector"],"mappings":"AAGA,OAAA,SAAA,MAAA,cAAA;AACA,SAAA,WAAA,QAAA,sBAAA;AACA,SAAA,MAAA,QAAA,kBAAA;AAGA,eAAe,MAAA,MAAA,SAAA,SAAA,CAAwC;AAcrDA,EAAAA,QAAQ,GAAW;AACjB,QAAIC,MAAM,GAAV,GAAA;;AACA,QAAIC,MAAM,CAAV,aAAA,EAA0B;AACxBD,MAAAA,MAAM,IAANA,YAAAA;;AACA,WAAK,IAAIE,GAAG,GAAZ,CAAA,EAAkBA,GAAG,GAAG,KAAxB,IAAA,EAAmC,EAAnC,GAAA,EAA0C;AACxC,aAAK,IAAIC,GAAG,GAAZ,CAAA,EAAkBA,GAAG,GAAG,KAAxB,IAAA,EAAmC,EAAnC,GAAA,EAA0C;AACxCH,UAAAA,MAAM,IAAA,IAAA,MAAA,CAAQ,KAAKG,GAAG,GAAG,KAANA,IAAAA,GAAnBH,GAAc,CAAR,CAANA;AACD;AACF;AANH,KAAA,MAOO;AACLA,MAAAA,MAAM,IAANA,eAAAA;;AACA,WAAK,IAAII,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAG,KAApB,QAAA,EAAmC,EAAnC,CAAA,EAAwC;AACtCJ,QAAAA,MAAM,IAAA,IAAA,MAAA,CAAQ,KAAdA,CAAc,CAAR,CAANA;AACD;AACF;;AACDA,IAAAA,MAAM,IAANA,GAAAA;AACA,WAAA,MAAA;AACD;;AAEDK,EAAAA,eAAe,CAAA,GAAA,EAAA,GAAA,EAAmC;AAChD,WAAOF,GAAG,GAAG,KAANA,IAAAA,GAAP,GAAA;AACD;;AAGDG,EAAAA,UAAU,CAAA,GAAA,EAAA,GAAA,EAAmC;AAC3C,WAAO,KAAKH,GAAG,GAAG,KAANA,IAAAA,GAAZ,GAAO,CAAP;AACD;;AAGDI,EAAAA,UAAU,CAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAgD;AACxD,SAAKJ,GAAG,GAAG,KAANA,IAAAA,GAAL,GAAA,IAA8BK,WAAW,CAAzC,KAAyC,CAAzC;AACA,WAAA,IAAA;AACD;;AAIDC,EAAAA,SAAS,CAAA,WAAA,EAAsBC,MAAgB,GAAG,IAAA,KAAA,CAAU,KAAV,IAAA,EAAA,IAAA,CAA0B,CAAnE,CAAyC,CAAzC,EAAkF;AACzF,UAAMC,UAAU,GAAGC,WAAW,GAAG,KAAjC,IAAA;;AACA,SAAK,IAAIR,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAG,KAApB,IAAA,EAA+B,EAA/B,CAAA,EAAoC;AAClCM,MAAAA,MAAM,CAANA,CAAM,CAANA,GAAY,KAAKC,UAAU,GAA3BD,CAAY,CAAZA;AACD;;AACD,WAAA,MAAA;AACD;;AAEDG,EAAAA,SAAS,CAAA,WAAA,EAAA,YAAA,EAAkE;AACzE,UAAMF,UAAU,GAAGC,WAAW,GAAG,KAAjC,IAAA;;AACA,SAAK,IAAIR,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAG,KAApB,IAAA,EAA+B,EAA/B,CAAA,EAAoC;AAClC,WAAKO,UAAU,GAAf,CAAA,IAAuBG,YAAY,CAAnC,CAAmC,CAAnC;AACD;;AACD,WAAA,IAAA;AACD;;AAhEoD","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n// MIT License\nimport {NumericArray} from '@math.gl/types';\nimport MathArray from './math-array';\nimport {checkNumber} from '../../lib/validators';\nimport {config} from '../../lib/common';\n\n/** Base class for matrices */\nexport default abstract class Matrix extends MathArray {\n  abstract get RANK(): number;\n\n  // fromObject(object) {\n  //   const array = object.elements;\n  //   return this.fromRowMajor(array);\n  // }\n  // toObject(object) {\n  //   const array = object.elements;\n  //   this.toRowMajor(array);\n  //   return object;\n  // }\n\n  // TODO better override formatString?\n  toString(): string {\n    let string = '[';\n    if (config.printRowMajor) {\n      string += 'row-major:';\n      for (let row = 0; row < this.RANK; ++row) {\n        for (let col = 0; col < this.RANK; ++col) {\n          string += ` ${this[col * this.RANK + row]}`;\n        }\n      }\n    } else {\n      string += 'column-major:';\n      for (let i = 0; i < this.ELEMENTS; ++i) {\n        string += ` ${this[i]}`;\n      }\n    }\n    string += ']';\n    return string;\n  }\n\n  getElementIndex(row: number, col: number): number {\n    return col * this.RANK + row;\n  }\n\n  // By default assumes row major indices\n  getElement(row: number, col: number): number {\n    return this[col * this.RANK + row];\n  }\n\n  // By default assumes row major indices\n  setElement(row: number, col: number, value: number): this {\n    this[col * this.RANK + row] = checkNumber(value);\n    return this;\n  }\n  getColumn<NumArrayT>(columnIndex: number, result: NumArrayT): NumArrayT;\n  getColumn(columnIndex: number): number[];\n\n  getColumn(columnIndex: number, result: number[] = new Array(this.RANK).fill(-0)): number[] {\n    const firstIndex = columnIndex * this.RANK;\n    for (let i = 0; i < this.RANK; ++i) {\n      result[i] = this[firstIndex + i];\n    }\n    return result;\n  }\n\n  setColumn(columnIndex: number, columnVector: Readonly<NumericArray>): this {\n    const firstIndex = columnIndex * this.RANK;\n    for (let i = 0; i < this.RANK; ++i) {\n      this[firstIndex + i] = columnVector[i];\n    }\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}