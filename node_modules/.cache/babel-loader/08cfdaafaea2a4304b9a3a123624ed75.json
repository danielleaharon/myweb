{"ast":null,"code":"import Vector from './base/vector';\nimport { config, isArray } from '../lib/common';\nimport { checkNumber } from '../lib/validators';\nimport * as vec2 from 'gl-matrix/vec2';\nimport { vec2_transformMat4AsVector } from '../lib/gl-matrix-extras';\nexport default class Vector2 extends Vector {\n  constructor(x = 0, y = 0) {\n    super(2);\n\n    if (isArray(x) && arguments.length === 1) {\n      this.copy(x);\n    } else {\n      if (config.debug) {\n        checkNumber(x);\n        checkNumber(y);\n      }\n\n      this[0] = x;\n      this[1] = y;\n    }\n  }\n\n  set(x, y) {\n    this[0] = x;\n    this[1] = y;\n    return this.check();\n  }\n\n  copy(array) {\n    this[0] = array[0];\n    this[1] = array[1];\n    return this.check();\n  }\n\n  fromObject(object) {\n    if (config.debug) {\n      checkNumber(object.x);\n      checkNumber(object.y);\n    }\n\n    this[0] = object.x;\n    this[1] = object.y;\n    return this.check();\n  }\n\n  toObject(object) {\n    object.x = this[0];\n    object.y = this[1];\n    return object;\n  }\n\n  get ELEMENTS() {\n    return 2;\n  }\n\n  horizontalAngle() {\n    return Math.atan2(this.y, this.x);\n  }\n\n  verticalAngle() {\n    return Math.atan2(this.x, this.y);\n  }\n\n  transform(matrix4) {\n    return this.transformAsPoint(matrix4);\n  }\n\n  transformAsPoint(matrix4) {\n    vec2.transformMat4(this, this, matrix4);\n    return this.check();\n  }\n\n  transformAsVector(matrix4) {\n    vec2_transformMat4AsVector(this, this, matrix4);\n    return this.check();\n  }\n\n  transformByMatrix3(matrix3) {\n    vec2.transformMat3(this, this, matrix3);\n    return this.check();\n  }\n\n  transformByMatrix2x3(matrix2x3) {\n    vec2.transformMat2d(this, this, matrix2x3);\n    return this.check();\n  }\n\n  transformByMatrix2(matrix2) {\n    vec2.transformMat2(this, this, matrix2);\n    return this.check();\n  }\n\n}","map":{"version":3,"sources":["../../../src/classes/vector2.ts"],"names":["constructor","x","y","isArray","arguments","config","checkNumber","set","copy","array","fromObject","object","toObject","ELEMENTS","horizontalAngle","Math","verticalAngle","transform","transformAsPoint","vec2","transformAsVector","vec2_transformMat4AsVector","transformByMatrix3","transformByMatrix2x3","transformByMatrix2"],"mappings":"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","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n// MIT License\nimport Vector from './base/vector';\nimport {config, isArray} from '../lib/common';\nimport {checkNumber} from '../lib/validators';\nimport * as vec2 from 'gl-matrix/vec2';\n/* eslint-disable camelcase */\nimport {vec2_transformMat4AsVector} from '../lib/gl-matrix-extras';\nimport {NumericArray} from '@math.gl/types';\n\n/**\n * Two-element vector class.\n * Subclass of Array<number>\n */\nexport default class Vector2 extends Vector {\n  // Creates a new, empty vec2\n  constructor(x: number | Readonly<NumericArray> = 0, y: number = 0) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(2); // -0, -0);\n    if (isArray(x) && arguments.length === 1) {\n      this.copy(x as Readonly<NumericArray>);\n    } else {\n      if (config.debug) {\n        checkNumber(x);\n        checkNumber(y);\n      }\n      this[0] = x as number;\n      this[1] = y;\n    }\n  }\n\n  set(x: number, y: number): this {\n    this[0] = x;\n    this[1] = y;\n    return this.check();\n  }\n\n  copy(array: Readonly<NumericArray>): this {\n    this[0] = array[0];\n    this[1] = array[1];\n    return this.check();\n  }\n\n  fromObject(object: {x: number; y: number}): this {\n    if (config.debug) {\n      checkNumber(object.x);\n      checkNumber(object.y);\n    }\n    this[0] = object.x;\n    this[1] = object.y;\n    return this.check();\n  }\n\n  toObject(object: {x?: number; y?: number}): {x: number; y: number} {\n    object.x = this[0];\n    object.y = this[1];\n    return object as {x: number; y: number};\n  }\n\n  // Getters/setters\n\n  get ELEMENTS(): number {\n    return 2;\n  }\n\n  /**\n   * Returns angle from x axis\n   * @returns\n   */\n  horizontalAngle(): number {\n    return Math.atan2(this.y, this.x);\n  }\n\n  /**\n   * Returns angle from y axis\n   * @returns\n   */\n  verticalAngle(): number {\n    return Math.atan2(this.x, this.y);\n  }\n\n  // Transforms\n\n  /**\n   * Transforms as point\n   * @param matrix4\n   * @returns\n   */\n  transform(matrix4: Readonly<NumericArray>): this {\n    return this.transformAsPoint(matrix4);\n  }\n\n  /**\n   * transforms as point (4th component is implicitly 1)\n   * @param matrix4\n   * @returns\n   */\n  transformAsPoint(matrix4: Readonly<NumericArray>): this {\n    vec2.transformMat4(this, this, matrix4);\n    return this.check();\n  }\n\n  /**\n   * transforms as vector (4th component is implicitly 0, ignores translation. slightly faster)\n   * @param matrix4\n   * @returns\n   */\n  transformAsVector(matrix4: Readonly<NumericArray>): this {\n    vec2_transformMat4AsVector(this, this, matrix4);\n    return this.check();\n  }\n\n  transformByMatrix3(matrix3: Readonly<NumericArray>): this {\n    vec2.transformMat3(this, this, matrix3);\n    return this.check();\n  }\n\n  transformByMatrix2x3(matrix2x3: Readonly<NumericArray>): this {\n    vec2.transformMat2d(this, this, matrix2x3);\n    return this.check();\n  }\n\n  transformByMatrix2(matrix2: Readonly<NumericArray>): this {\n    vec2.transformMat2(this, this, matrix2);\n    return this.check();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}