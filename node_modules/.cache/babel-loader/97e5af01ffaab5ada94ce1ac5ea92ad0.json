{"ast":null,"code":"import { getTransferList } from '../worker-utils/get-transfer-list';\n\nfunction getParentPort() {\n  let parentPort;\n\n  try {\n    eval('globalThis.parentPort = require(\\'worker_threads\\').parentPort');\n    parentPort = globalThis.parentPort;\n  } catch {}\n\n  return parentPort;\n}\n\nconst onMessageWrapperMap = new Map();\nexport default class WorkerBody {\n  static inWorkerThread() {\n    return typeof self !== 'undefined' || Boolean(getParentPort());\n  }\n\n  static set onmessage(onMessage) {\n    function handleMessage(message) {\n      const parentPort = getParentPort();\n      const {\n        type,\n        payload\n      } = parentPort ? message : message.data;\n      onMessage(type, payload);\n    }\n\n    const parentPort = getParentPort();\n\n    if (parentPort) {\n      parentPort.on('message', handleMessage);\n      parentPort.on('exit', () => console.debug('Node worker closing'));\n    } else {\n      globalThis.onmessage = handleMessage;\n    }\n  }\n\n  static addEventListener(onMessage) {\n    let onMessageWrapper = onMessageWrapperMap.get(onMessage);\n\n    if (!onMessageWrapper) {\n      onMessageWrapper = message => {\n        if (!isKnownMessage(message)) {\n          return;\n        }\n\n        const parentPort = getParentPort();\n        const {\n          type,\n          payload\n        } = parentPort ? message : message.data;\n        onMessage(type, payload);\n      };\n    }\n\n    const parentPort = getParentPort();\n\n    if (parentPort) {\n      console.error('not implemented');\n    } else {\n      globalThis.addEventListener('message', onMessageWrapper);\n    }\n  }\n\n  static removeEventListener(onMessage) {\n    const onMessageWrapper = onMessageWrapperMap.get(onMessage);\n    onMessageWrapperMap.delete(onMessage);\n    const parentPort = getParentPort();\n\n    if (parentPort) {\n      console.error('not implemented');\n    } else {\n      globalThis.removeEventListener('message', onMessageWrapper);\n    }\n  }\n\n  static postMessage(type, payload) {\n    const data = {\n      source: 'loaders.gl',\n      type,\n      payload\n    };\n    const transferList = getTransferList(payload);\n    const parentPort = getParentPort();\n\n    if (parentPort) {\n      parentPort.postMessage(data, transferList);\n    } else {\n      globalThis.postMessage(data, transferList);\n    }\n  }\n\n}\n\nfunction isKnownMessage(message) {\n  const {\n    type,\n    data\n  } = message;\n  return type === 'message' && data && typeof data.source === 'string' && data.source.startsWith('loaders.gl');\n}","map":{"version":3,"sources":["../../../../src/lib/worker-farm/worker-body.ts"],"names":["eval","parentPort","globalThis","onMessageWrapperMap","inWorkerThread","Boolean","getParentPort","onmessage","payload","message","onMessage","console","addEventListener","onMessageWrapper","isKnownMessage","removeEventListener","postMessage","data","source","transferList","getTransferList","type"],"mappings":"AACA,SAAA,eAAA,QAAA,mCAAA;;AAGA,SAAA,aAAA,GAAyB;AAEvB,MAAA,UAAA;;AACA,MAAI;AAEFA,IAAAA,IAAI,CAAJA,gEAAI,CAAJA;AACAC,IAAAA,UAAU,GAAGC,UAAU,CAAvBD,UAAAA;AAHF,GAAA,CAKE,MAAM,CAAE;;AACV,SAAA,UAAA;AACD;;AAED,MAAME,mBAAmB,GAAG,IAA5B,GAA4B,EAA5B;AAKA,eAAe,MAAA,UAAA,CAAiB;AAET,SAAdC,cAAc,GAAY;AAC/B,WAAO,OAAA,IAAA,KAAA,WAAA,IAA+BC,OAAO,CAACC,aAA9C,EAA6C,CAA7C;AACD;;AAKmB,aAATC,SAAS,CAAA,SAAA,EAA6E;AAC/F,aAAA,aAAA,CAAA,OAAA,EAAgC;AAE9B,YAAMN,UAAU,GAAGK,aAAnB,EAAA;AACA,YAAM;AAAA,QAAA,IAAA;AAAOE,QAAAA;AAAP,UAAkBP,UAAU,GAAA,OAAA,GAAaQ,OAAO,CAAtD,IAAA;AAIAC,MAAAA,SAAS,CAAA,IAAA,EAATA,OAAS,CAATA;AACD;;AAED,UAAMT,UAAU,GAAGK,aAAnB,EAAA;;AACA,QAAA,UAAA,EAAgB;AACdL,MAAAA,UAAU,CAAVA,EAAAA,CAAAA,SAAAA,EAAAA,aAAAA;AAGAA,MAAAA,UAAU,CAAVA,EAAAA,CAAAA,MAAAA,EAAsB,MAAMU,OAAO,CAAPA,KAAAA,CAA5BV,qBAA4BU,CAA5BV;AAJF,KAAA,MAKO;AAELC,MAAAA,UAAU,CAAVA,SAAAA,GAAAA,aAAAA;AACD;AACF;;AAEsB,SAAhBU,gBAAgB,CAAA,SAAA,EAErB;AACA,QAAIC,gBAAgB,GAAGV,mBAAmB,CAAnBA,GAAAA,CAAvB,SAAuBA,CAAvB;;AAEA,QAAI,CAAJ,gBAAA,EAAuB;AACrBU,MAAAA,gBAAgB,GAAIJ,OAAD,IAAgC;AACjD,YAAI,CAACK,cAAc,CAAnB,OAAmB,CAAnB,EAA8B;AAC5B;AACD;;AAGD,cAAMb,UAAU,GAAGK,aAAnB,EAAA;AACA,cAAM;AAAA,UAAA,IAAA;AAAOE,UAAAA;AAAP,YAAkBP,UAAU,GAAA,OAAA,GAAaQ,OAAO,CAAtD,IAAA;AACAC,QAAAA,SAAS,CAAA,IAAA,EAATA,OAAS,CAATA;AARFG,OAAAA;AAUD;;AAED,UAAMZ,UAAU,GAAGK,aAAnB,EAAA;;AACA,QAAA,UAAA,EAAgB;AACdK,MAAAA,OAAO,CAAPA,KAAAA,CAAAA,iBAAAA;AADF,KAAA,MAEO;AACLT,MAAAA,UAAU,CAAVA,gBAAAA,CAAAA,SAAAA,EAAAA,gBAAAA;AACD;AACF;;AAEyB,SAAnBa,mBAAmB,CAAA,SAAA,EAExB;AACA,UAAMF,gBAAgB,GAAGV,mBAAmB,CAAnBA,GAAAA,CAAzB,SAAyBA,CAAzB;AACAA,IAAAA,mBAAmB,CAAnBA,MAAAA,CAAAA,SAAAA;AACA,UAAMF,UAAU,GAAGK,aAAnB,EAAA;;AACA,QAAA,UAAA,EAAgB;AACdK,MAAAA,OAAO,CAAPA,KAAAA,CAAAA,iBAAAA;AADF,KAAA,MAEO;AACLT,MAAAA,UAAU,CAAVA,mBAAAA,CAAAA,SAAAA,EAAAA,gBAAAA;AACD;AACF;;AAOiB,SAAXc,WAAW,CAAA,IAAA,EAAA,OAAA,EAA+D;AAC/E,UAAMC,IAAuB,GAAG;AAACC,MAAAA,MAAM,EAAP,YAAA;AAAA,MAAA,IAAA;AAA6BV,MAAAA;AAA7B,KAAhC;AAEA,UAAMW,YAAY,GAAGC,eAAe,CAApC,OAAoC,CAApC;AAEA,UAAMnB,UAAU,GAAGK,aAAnB,EAAA;;AACA,QAAA,UAAA,EAAgB;AACdL,MAAAA,UAAU,CAAVA,WAAAA,CAAAA,IAAAA,EAAAA,YAAAA;AADF,KAAA,MAGO;AAELC,MAAAA,UAAU,CAAVA,WAAAA,CAAAA,IAAAA,EAAAA,YAAAA;AACD;AACF;;AAzF6B;;AA6FhC,SAAA,cAAA,CAAA,OAAA,EAAoD;AAClD,QAAM;AAAA,IAAA,IAAA;AAAOe,IAAAA;AAAP,MAAN,OAAA;AACA,SACEI,IAAI,KAAJA,SAAAA,IAAAA,IAAAA,IAEA,OAAOJ,IAAI,CAAX,MAAA,KAFAI,QAAAA,IAGAJ,IAAI,CAAJA,MAAAA,CAAAA,UAAAA,CAJF,YAIEA,CAJF;AAMD","sourcesContent":["import type {WorkerMessageData, WorkerMessageType, WorkerMessagePayload} from '../../types';\nimport {getTransferList} from '../worker-utils/get-transfer-list';\n\n/** Vile hack to defeat over-zealous bundlers from stripping out the require */\nfunction getParentPort() {\n  // const isNode = globalThis.process;\n  let parentPort;\n  try {\n    // prettier-ignore\n    eval('globalThis.parentPort = require(\\'worker_threads\\').parentPort'); // eslint-disable-line no-eval\n    parentPort = globalThis.parentPort;\n    // eslint-disable-next-line no-empty\n  } catch {}\n  return parentPort;\n}\n\nconst onMessageWrapperMap = new Map();\n\n/**\n * Type safe wrapper for worker code\n */\nexport default class WorkerBody {\n  /** Check that we are actually in a worker thread */\n  static inWorkerThread(): boolean {\n    return typeof self !== 'undefined' || Boolean(getParentPort());\n  }\n\n  /*\n   * (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n   */\n  static set onmessage(onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any) {\n    function handleMessage(message) {\n      // Confusingly the message itself also has a 'type' field which is always set to 'message'\n      const parentPort = getParentPort();\n      const {type, payload} = parentPort ? message : message.data;\n      // if (!isKnownMessage(message)) {\n      //   return;\n      // }\n      onMessage(type, payload);\n    }\n\n    const parentPort = getParentPort();\n    if (parentPort) {\n      parentPort.on('message', handleMessage);\n      // if (message == 'exit') { parentPort.unref(); }\n      // eslint-disable-next-line\n      parentPort.on('exit', () => console.debug('Node worker closing'));\n    } else {\n      // eslint-disable-next-line no-restricted-globals\n      globalThis.onmessage = handleMessage;\n    }\n  }\n\n  static addEventListener(\n    onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n  ) {\n    let onMessageWrapper = onMessageWrapperMap.get(onMessage);\n\n    if (!onMessageWrapper) {\n      onMessageWrapper = (message: MessageEvent<any>) => {\n        if (!isKnownMessage(message)) {\n          return;\n        }\n\n        // Confusingly in the browser, the message itself also has a 'type' field which is always set to 'message'\n        const parentPort = getParentPort();\n        const {type, payload} = parentPort ? message : message.data;\n        onMessage(type, payload);\n      };\n    }\n\n    const parentPort = getParentPort();\n    if (parentPort) {\n      console.error('not implemented'); // eslint-disable-line\n    } else {\n      globalThis.addEventListener('message', onMessageWrapper);\n    }\n  }\n\n  static removeEventListener(\n    onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n  ) {\n    const onMessageWrapper = onMessageWrapperMap.get(onMessage);\n    onMessageWrapperMap.delete(onMessage);\n    const parentPort = getParentPort();\n    if (parentPort) {\n      console.error('not implemented'); // eslint-disable-line\n    } else {\n      globalThis.removeEventListener('message', onMessageWrapper);\n    }\n  }\n\n  /**\n   * Send a message from a worker to creating thread (main thread)\n   * @param type\n   * @param payload\n   */\n  static postMessage(type: WorkerMessageType, payload: WorkerMessagePayload): void {\n    const data: WorkerMessageData = {source: 'loaders.gl', type, payload};\n    // console.log('posting message', data);\n    const transferList = getTransferList(payload);\n\n    const parentPort = getParentPort();\n    if (parentPort) {\n      parentPort.postMessage(data, transferList);\n      // console.log('posted message', data);\n    } else {\n      // @ts-ignore\n      globalThis.postMessage(data, transferList);\n    }\n  }\n}\n\n// Filter out noise messages sent to workers\nfunction isKnownMessage(message: MessageEvent<any>) {\n  const {type, data} = message;\n  return (\n    type === 'message' &&\n    data &&\n    typeof data.source === 'string' &&\n    data.source.startsWith('loaders.gl')\n  );\n}\n"]},"metadata":{},"sourceType":"module"}