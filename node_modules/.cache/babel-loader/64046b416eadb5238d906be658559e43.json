{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0);\n  useEffect(() => {\n    setRowsCleared(0);\n\n    const sweepRows = newStage => newStage.reduce((ack, row) => {\n      if (row.findIndex(cell => cell[0] === 0) === -1) {\n        setRowsCleared(prev => prev + 1);\n        ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n        return ack;\n      }\n\n      ack.push(row);\n      return ack;\n    }, []);\n\n    const updateStage = prevStage => {\n      // First flush the stage\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === 'clear' ? [0, 'clear'] : cell)); // Then draw the tetromino\n\n      console.log(player.tetromino);\n      player.tetromino.forEach((row, y) => {\n        console.log(player.texts);\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [value, `${player.collided ? 'merged' : 'clear'}`, player.texts[y][x]];\n          }\n        });\n      }); // Then check if we got some score if collided\n\n      if (player.collided) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n\n      return newStage;\n    }; // Here are the updates\n\n\n    setStage(prev => updateStage(prev));\n  }, [player.collided, player.pos.x, player.pos.y, player.tetromino, resetPlayer]);\n  return [stage, setStage, rowsCleared];\n};","map":{"version":3,"sources":["/Users/user/Desktop/עבודות להגשה/myweb/src/components/tetris/hooks/useStage.js"],"names":["useState","useEffect","createStage","useStage","player","resetPlayer","stage","setStage","rowsCleared","setRowsCleared","sweepRows","newStage","reduce","ack","row","findIndex","cell","prev","unshift","Array","length","fill","push","updateStage","prevStage","map","console","log","tetromino","forEach","y","texts","value","x","pos","collided"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,MAAD,EAASC,WAAT,KAAyB;AAC/C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAACE,WAAW,EAAZ,CAAlC;AACA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,CAAD,CAA9C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,cAAc,CAAC,CAAD,CAAd;;AACA,UAAMC,SAAS,GAAGC,QAAQ,IACxBA,QAAQ,CAACC,MAAT,CAAgB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC5B,UAAIA,GAAG,CAACC,SAAJ,CAAcC,IAAI,IAAIA,IAAI,CAAC,CAAD,CAAJ,KAAY,CAAlC,MAAyC,CAAC,CAA9C,EAAiD;AAC/CP,QAAAA,cAAc,CAACQ,IAAI,IAAIA,IAAI,GAAG,CAAhB,CAAd;AACAJ,QAAAA,GAAG,CAACK,OAAJ,CAAY,IAAIC,KAAJ,CAAUR,QAAQ,CAAC,CAAD,CAAR,CAAYS,MAAtB,EAA8BC,IAA9B,CAAmC,CAAC,CAAD,EAAI,OAAJ,CAAnC,CAAZ;AACA,eAAOR,GAAP;AACD;;AACDA,MAAAA,GAAG,CAACS,IAAJ,CAASR,GAAT;AACA,aAAOD,GAAP;AACD,KARD,EAQG,EARH,CADF;;AAWA,UAAMU,WAAW,GAAGC,SAAS,IAAI;AAC/B;AACA,YAAMb,QAAQ,GAAGa,SAAS,CAACC,GAAV,CAAcX,GAAG,IAChCA,GAAG,CAACW,GAAJ,CAAQT,IAAI,IAAKA,IAAI,CAAC,CAAD,CAAJ,KAAY,OAAZ,GAAsB,CAAC,CAAD,EAAI,OAAJ,CAAtB,GAAqCA,IAAtD,CADe,CAAjB,CAF+B,CAM/B;;AACAU,MAAAA,OAAO,CAACC,GAAR,CAAYvB,MAAM,CAACwB,SAAnB;AACAxB,MAAAA,MAAM,CAACwB,SAAP,CAAiBC,OAAjB,CAAyB,CAACf,GAAD,EAAMgB,CAAN,KAAY;AACnCJ,QAAAA,OAAO,CAACC,GAAR,CAAYvB,MAAM,CAAC2B,KAAnB;AACAjB,QAAAA,GAAG,CAACe,OAAJ,CAAY,CAACG,KAAD,EAAQC,CAAR,KAAc;AACxB,cAAID,KAAK,KAAK,CAAd,EAAiB;AACfrB,YAAAA,QAAQ,CAACmB,CAAC,GAAG1B,MAAM,CAAC8B,GAAP,CAAWJ,CAAhB,CAAR,CAA2BG,CAAC,GAAG7B,MAAM,CAAC8B,GAAP,CAAWD,CAA1C,IAA+C,CAC7CD,KAD6C,EAE5C,GAAE5B,MAAM,CAAC+B,QAAP,GAAkB,QAAlB,GAA6B,OAAQ,EAFK,EAG7C/B,MAAM,CAAC2B,KAAP,CAAaD,CAAb,EAAgBG,CAAhB,CAH6C,CAA/C;AAKD;AACF,SARD;AASD,OAXD,EAR+B,CAoB/B;;AACA,UAAI7B,MAAM,CAAC+B,QAAX,EAAqB;AACnB9B,QAAAA,WAAW;AACX,eAAOK,SAAS,CAACC,QAAD,CAAhB;AACD;;AACD,aAAOA,QAAP;AACD,KA1BD,CAbc,CAyCd;;;AACAJ,IAAAA,QAAQ,CAACU,IAAI,IAAIM,WAAW,CAACN,IAAD,CAApB,CAAR;AACD,GA3CQ,EA2CN,CACDb,MAAM,CAAC+B,QADN,EAED/B,MAAM,CAAC8B,GAAP,CAAWD,CAFV,EAGD7B,MAAM,CAAC8B,GAAP,CAAWJ,CAHV,EAID1B,MAAM,CAACwB,SAJN,EAKDvB,WALC,CA3CM,CAAT;AAmDA,SAAO,CAACC,KAAD,EAAQC,QAAR,EAAkBC,WAAlB,CAAP;AACD,CAxDM","sourcesContent":["import { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\n\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0);\n\n  useEffect(() => {\n    setRowsCleared(0);\n    const sweepRows = newStage =>\n      newStage.reduce((ack, row) => {\n        if (row.findIndex(cell => cell[0] === 0) === -1) {\n          setRowsCleared(prev => prev + 1);\n          ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n          return ack;\n        }\n        ack.push(row);\n        return ack;\n      }, []);\n\n    const updateStage = prevStage => {\n      // First flush the stage\n      const newStage = prevStage.map(row =>\n        row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell))\n      );\n\n      // Then draw the tetromino\n      console.log(player.tetromino)\n      player.tetromino.forEach((row, y) => {\n        console.log(player.texts)\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [\n              value,\n              `${player.collided ? 'merged' : 'clear'}`,\n              player.texts[y][x]\n            ];\n          }\n        });\n      });\n      // Then check if we got some score if collided\n      if (player.collided) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n      return newStage;\n    };\n\n    // Here are the updates\n    setStage(prev => updateStage(prev));\n  }, [\n    player.collided,\n    player.pos.x,\n    player.pos.y,\n    player.tetromino,\n    resetPlayer,\n  ]);\n\n  return [stage, setStage, rowsCleared];\n};"]},"metadata":{},"sourceType":"module"}