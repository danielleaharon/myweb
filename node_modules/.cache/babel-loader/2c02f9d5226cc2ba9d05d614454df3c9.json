{"ast":null,"code":"import Vector from './base/vector';\nimport { config, isArray } from '../lib/common';\nimport { checkNumber } from '../lib/validators';\nimport * as vec3 from 'gl-matrix/vec3';\nimport { vec3_transformMat2, vec3_transformMat4AsVector } from '../lib/gl-matrix-extras';\nconst ORIGIN = [0, 0, 0];\nlet ZERO;\nexport default class Vector3 extends Vector {\n  static get ZERO() {\n    if (!ZERO) {\n      ZERO = new Vector3(0, 0, 0);\n      Object.freeze(ZERO);\n    }\n\n    return ZERO;\n  }\n\n  constructor(x = 0, y = 0, z = 0) {\n    super(-0, -0, -0);\n\n    if (arguments.length === 1 && isArray(x)) {\n      this.copy(x);\n    } else {\n      if (config.debug) {\n        checkNumber(x);\n        checkNumber(y);\n        checkNumber(z);\n      }\n\n      this[0] = x;\n      this[1] = y;\n      this[2] = z;\n    }\n  }\n\n  set(x, y, z) {\n    this[0] = x;\n    this[1] = y;\n    this[2] = z;\n    return this.check();\n  }\n\n  copy(array) {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    return this.check();\n  }\n\n  fromObject(object) {\n    if (config.debug) {\n      checkNumber(object.x);\n      checkNumber(object.y);\n      checkNumber(object.z);\n    }\n\n    this[0] = object.x;\n    this[1] = object.y;\n    this[2] = object.z;\n    return this.check();\n  }\n\n  toObject(object) {\n    object.x = this[0];\n    object.y = this[1];\n    object.z = this[2];\n    return object;\n  }\n\n  get ELEMENTS() {\n    return 3;\n  }\n\n  get z() {\n    return this[2];\n  }\n\n  set z(value) {\n    this[2] = checkNumber(value);\n  }\n\n  angle(vector) {\n    return vec3.angle(this, vector);\n  }\n\n  cross(vector) {\n    vec3.cross(this, this, vector);\n    return this.check();\n  }\n\n  rotateX({\n    radians,\n    origin = ORIGIN\n  }) {\n    vec3.rotateX(this, this, origin, radians);\n    return this.check();\n  }\n\n  rotateY({\n    radians,\n    origin = ORIGIN\n  }) {\n    vec3.rotateY(this, this, origin, radians);\n    return this.check();\n  }\n\n  rotateZ({\n    radians,\n    origin = ORIGIN\n  }) {\n    vec3.rotateZ(this, this, origin, radians);\n    return this.check();\n  }\n\n  transform(matrix4) {\n    return this.transformAsPoint(matrix4);\n  }\n\n  transformAsPoint(matrix4) {\n    vec3.transformMat4(this, this, matrix4);\n    return this.check();\n  }\n\n  transformAsVector(matrix4) {\n    vec3_transformMat4AsVector(this, this, matrix4);\n    return this.check();\n  }\n\n  transformByMatrix3(matrix3) {\n    vec3.transformMat3(this, this, matrix3);\n    return this.check();\n  }\n\n  transformByMatrix2(matrix2) {\n    vec3_transformMat2(this, this, matrix2);\n    return this.check();\n  }\n\n  transformByQuaternion(quaternion) {\n    vec3.transformQuat(this, this, quaternion);\n    return this.check();\n  }\n\n}","map":{"version":3,"sources":["../../../src/classes/vector3.ts"],"names":["ORIGIN","ZERO","Object","constructor","x","y","z","arguments","isArray","config","checkNumber","set","copy","array","fromObject","object","toObject","ELEMENTS","angle","vec3","cross","rotateX","origin","rotateY","rotateZ","transform","transformAsPoint","transformAsVector","vec3_transformMat4AsVector","transformByMatrix3","transformByMatrix2","vec3_transformMat2","transformByQuaternion"],"mappings":"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","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n// MIT License\nimport {NumericArray} from '@math.gl/types';\nimport Vector from './base/vector';\nimport {config, isArray} from '../lib/common';\nimport {checkNumber} from '../lib/validators';\nimport * as vec3 from 'gl-matrix/vec3';\n/* eslint-disable camelcase */\nimport {vec3_transformMat2, vec3_transformMat4AsVector} from '../lib/gl-matrix-extras';\n\nconst ORIGIN = [0, 0, 0];\n\nlet ZERO: Vector3;\n\n/**\n * Three-element vector class.\n * Subclass of Array<number>\n */\nexport default class Vector3 extends Vector {\n  static get ZERO(): Vector3 {\n    if (!ZERO) {\n      ZERO = new Vector3(0, 0, 0);\n      Object.freeze(ZERO);\n    }\n    return ZERO;\n  }\n\n  /**\n   * @class\n   * @param x\n   * @param y\n   * @param z\n   */\n  constructor(x: number | Readonly<NumericArray> = 0, y: number = 0, z: number = 0) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0);\n    if (arguments.length === 1 && isArray(x)) {\n      this.copy(x as NumericArray);\n    } else {\n      // this.set(x, y, z);\n      if (config.debug) {\n        checkNumber(x);\n        checkNumber(y);\n        checkNumber(z);\n      }\n      // @ts-expect-error TS2412: Property '0' of type 'number | [number, number, number]' is not assignable to numeric index type 'number'\n      this[0] = x;\n      this[1] = y;\n      this[2] = z;\n    }\n  }\n\n  set(x: number, y: number, z: number): this {\n    this[0] = x;\n    this[1] = y;\n    this[2] = z;\n    return this.check();\n  }\n\n  copy(array: Readonly<NumericArray>): this {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    return this.check();\n  }\n\n  fromObject(object: {x: number; y: number; z: number}): this {\n    if (config.debug) {\n      checkNumber(object.x);\n      checkNumber(object.y);\n      checkNumber(object.z);\n    }\n    this[0] = object.x;\n    this[1] = object.y;\n    this[2] = object.z;\n    return this.check();\n  }\n\n  toObject(object: {x?: number; y?: number; z?: number}): {x: number; y: number; z: number} {\n    object.x = this[0];\n    object.y = this[1];\n    object.z = this[2];\n    return object as {x: number; y: number; z: number};\n  }\n\n  // Getters/setters\n\n  get ELEMENTS(): number {\n    return 3;\n  }\n  get z(): number {\n    return this[2];\n  }\n  set z(value: number) {\n    this[2] = checkNumber(value);\n  }\n\n  // ACCESSORS\n\n  angle(vector: Readonly<NumericArray>): number {\n    return vec3.angle(this, vector);\n  }\n\n  // MODIFIERS\n\n  cross(vector: Readonly<NumericArray>): this {\n    vec3.cross(this, this, vector);\n    return this.check();\n  }\n\n  rotateX({radians, origin = ORIGIN}: {radians: number; origin?: Readonly<NumericArray>}): this {\n    vec3.rotateX(this, this, origin, radians);\n    return this.check();\n  }\n\n  rotateY({radians, origin = ORIGIN}: {radians: number; origin?: Readonly<NumericArray>}): this {\n    vec3.rotateY(this, this, origin, radians);\n    return this.check();\n  }\n\n  rotateZ({radians, origin = ORIGIN}: {radians: number; origin?: Readonly<NumericArray>}): this {\n    vec3.rotateZ(this, this, origin, radians);\n    return this.check();\n  }\n\n  // Transforms\n\n  // transforms as point (4th component is implicitly 1)\n  transform(matrix4: Readonly<NumericArray>): this {\n    return this.transformAsPoint(matrix4);\n  }\n\n  // transforms as point (4th component is implicitly 1)\n  transformAsPoint(matrix4: Readonly<NumericArray>): this {\n    vec3.transformMat4(this, this, matrix4);\n    return this.check();\n  }\n\n  // transforms as vector  (4th component is implicitly 0, ignores translation. slightly faster)\n  transformAsVector(matrix4: Readonly<NumericArray>): this {\n    vec3_transformMat4AsVector(this, this, matrix4);\n    return this.check();\n  }\n\n  transformByMatrix3(matrix3: Readonly<NumericArray>): this {\n    vec3.transformMat3(this, this, matrix3);\n    return this.check();\n  }\n\n  transformByMatrix2(matrix2: Readonly<NumericArray>): this {\n    vec3_transformMat2(this, this, matrix2);\n    return this.check();\n  }\n\n  transformByQuaternion(quaternion: Readonly<NumericArray>): this {\n    vec3.transformQuat(this, this, quaternion);\n    return this.check();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}