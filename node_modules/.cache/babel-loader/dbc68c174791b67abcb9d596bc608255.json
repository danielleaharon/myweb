{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport TransitionInterpolator from './transition-interpolator';\nimport { lerp } from '@math.gl/core';\nimport { flyToViewport, getFlyToDuration } from '@math.gl/web-mercator';\nconst LINEARLY_INTERPOLATED_PROPS = ['bearing', 'pitch'];\nconst DEFAULT_OPTS = {\n  speed: 1.2,\n  curve: 1.414\n};\nexport default class FlyToInterpolator extends TransitionInterpolator {\n  constructor(opts = {}) {\n    super({\n      compare: ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'],\n      extract: ['width', 'height', 'longitude', 'latitude', 'zoom', 'bearing', 'pitch'],\n      required: ['width', 'height', 'latitude', 'longitude', 'zoom']\n    });\n\n    _defineProperty(this, \"opts\", void 0);\n\n    this.opts = { ...DEFAULT_OPTS,\n      ...opts\n    };\n  }\n\n  interpolateProps(startProps, endProps, t) {\n    const viewport = flyToViewport(startProps, endProps, t, this.opts);\n\n    for (const key of LINEARLY_INTERPOLATED_PROPS) {\n      viewport[key] = lerp(startProps[key] || 0, endProps[key] || 0, t);\n    }\n\n    return viewport;\n  }\n\n  getDuration(startProps, endProps) {\n    let {\n      transitionDuration\n    } = endProps;\n\n    if (transitionDuration === 'auto') {\n      transitionDuration = getFlyToDuration(startProps, endProps, this.opts);\n    }\n\n    return transitionDuration;\n  }\n\n}","map":{"version":3,"sources":["../../../src/transitions/fly-to-interpolator.ts"],"names":["LINEARLY_INTERPOLATED_PROPS","DEFAULT_OPTS","speed","curve","constructor","opts","compare","extract","required","interpolateProps","viewport","flyToViewport","lerp","startProps","endProps","getDuration","transitionDuration","getFlyToDuration"],"mappings":";AAAA,OAAA,sBAAA,MAAA,2BAAA;AACA,SAAA,IAAA,QAAA,eAAA;AAEA,SAAA,aAAA,EAAA,gBAAA,QAAA,uBAAA;AAEA,MAAMA,2BAA2B,GAAG,CAAA,SAAA,EAApC,OAAoC,CAApC;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EADc,GAAA;AAEnBC,EAAAA,KAAK,EAAE;AAFY,CAArB;AAYA,eAAe,MAAA,iBAAA,SAAA,sBAAA,CAAuD;AAQpEC,EAAAA,WAAW,CACTC,IASC,GAVQ,EAAA,EAWT;AACA,UAAM;AACJC,MAAAA,OAAO,EAAE,CAAA,WAAA,EAAA,UAAA,EAAA,MAAA,EAAA,SAAA,EADL,OACK,CADL;AAEJC,MAAAA,OAAO,EAAE,CAAA,OAAA,EAAA,QAAA,EAAA,WAAA,EAAA,UAAA,EAAA,MAAA,EAAA,SAAA,EAFL,OAEK,CAFL;AAGJC,MAAAA,QAAQ,EAAE,CAAA,OAAA,EAAA,QAAA,EAAA,UAAA,EAAA,WAAA,EAAA,MAAA;AAHN,KAAN;;AADA,IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EAAA,KAAA,CAAA,CAAA;;AAMA,SAAA,IAAA,GAAY,EAAC,GAAD,YAAA;AAAkB,SAAGH;AAArB,KAAZ;AACD;;AAEDI,EAAAA,gBAAgB,CAAA,UAAA,EAAA,QAAA,EAAA,CAAA,EAA0B;AACxC,UAAMC,QAAQ,GAAGC,aAAa,CAAA,UAAA,EAAA,QAAA,EAAA,CAAA,EAA0B,KAAxD,IAA8B,CAA9B;;AAOA,SAAK,MAAL,GAAA,IAAA,2BAAA,EAA+C;AAC7CD,MAAAA,QAAQ,CAARA,GAAQ,CAARA,GAAgBE,IAAI,CAACC,UAAU,CAAVA,GAAU,CAAVA,IAAD,CAAA,EAAuBC,QAAQ,CAARA,GAAQ,CAARA,IAAvB,CAAA,EAApBJ,CAAoB,CAApBA;AACD;;AAED,WAAA,QAAA;AACD;;AAGDK,EAAAA,WAAW,CAAA,UAAA,EAAA,QAAA,EAAuB;AAChC,QAAI;AAACC,MAAAA;AAAD,QAAJ,QAAA;;AACA,QAAIA,kBAAkB,KAAtB,MAAA,EAAmC;AAEjCA,MAAAA,kBAAkB,GAAGC,gBAAgB,CAAA,UAAA,EAAA,QAAA,EAAuB,KAA5DD,IAAqC,CAArCA;AACD;;AACD,WAAA,kBAAA;AACD;;AAnDmE","sourcesContent":["import TransitionInterpolator from './transition-interpolator';\nimport {lerp} from '@math.gl/core';\n\nimport {flyToViewport, getFlyToDuration} from '@math.gl/web-mercator';\n\nconst LINEARLY_INTERPOLATED_PROPS = ['bearing', 'pitch'];\nconst DEFAULT_OPTS = {\n  speed: 1.2,\n  curve: 1.414\n};\n\n/**\n * This class adapts mapbox-gl-js Map#flyTo animation so it can be used in\n * react/redux architecture.\n * mapbox-gl-js flyTo : https://www.mapbox.com/mapbox-gl-js/api/#map#flyto.\n * It implements “Smooth and efficient zooming and panning.” algorithm by\n * \"Jarke J. van Wijk and Wim A.A. Nuij\"\n */\nexport default class FlyToInterpolator extends TransitionInterpolator {\n  opts: {\n    curve: number;\n    speed: number;\n    screenSpeed?: number;\n    maxDuration?: number;\n  };\n\n  constructor(\n    opts: {\n      /** The zooming \"curve\" that will occur along the flight path. Default 1.414 */\n      curve?: number;\n      /** The average speed of the animation defined in relation to `options.curve`, it linearly affects the duration, higher speed returns smaller durations and vice versa. Default 1.2 */\n      speed?: number;\n      /** The average speed of the animation measured in screenfuls per second. Similar to `opts.speed` it linearly affects the duration,  when specified `opts.speed` is ignored. */\n      screenSpeed?: number;\n      /** Maximum duration in milliseconds, if calculated duration exceeds this value, `0` is returned. */\n      maxDuration?: number;\n    } = {}\n  ) {\n    super({\n      compare: ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'],\n      extract: ['width', 'height', 'longitude', 'latitude', 'zoom', 'bearing', 'pitch'],\n      required: ['width', 'height', 'latitude', 'longitude', 'zoom']\n    });\n    this.opts = {...DEFAULT_OPTS, ...opts};\n  }\n\n  interpolateProps(startProps, endProps, t) {\n    const viewport = flyToViewport(startProps, endProps, t, this.opts);\n\n    // Linearly interpolate 'bearing' and 'pitch'.\n    // If pitch/bearing are not supplied, they are interpreted as zeros in viewport calculation\n    // (fallback defined in WebMercatorViewport)\n    // Because there is no guarantee that the current controller's ViewState normalizes\n    // these props, safe guard is needed to avoid generating NaNs\n    for (const key of LINEARLY_INTERPOLATED_PROPS) {\n      viewport[key] = lerp(startProps[key] || 0, endProps[key] || 0, t);\n    }\n\n    return viewport;\n  }\n\n  // computes the transition duration\n  getDuration(startProps, endProps) {\n    let {transitionDuration} = endProps;\n    if (transitionDuration === 'auto') {\n      // auto calculate duration based on start and end props\n      transitionDuration = getFlyToDuration(startProps, endProps, this.opts);\n    }\n    return transitionDuration;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}