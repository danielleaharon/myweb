{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Framebuffer, Texture2D, withParameters } from '@luma.gl/core';\nimport { OPERATION } from '../lib/constants';\nimport LayersPass from './layers-pass';\nexport default class MaskPass extends LayersPass {\n  constructor(gl, props) {\n    super(gl, props);\n\n    _defineProperty(this, \"maskMap\", void 0);\n\n    _defineProperty(this, \"fbo\", void 0);\n\n    const {\n      mapSize = 2048\n    } = props;\n    this.maskMap = new Texture2D(gl, {\n      width: mapSize,\n      height: mapSize,\n      parameters: {\n        [10241]: 9729,\n        [10240]: 9729,\n        [10242]: 33071,\n        [10243]: 33071\n      }\n    });\n    this.fbo = new Framebuffer(gl, {\n      id: 'maskmap',\n      width: mapSize,\n      height: mapSize,\n      attachments: {\n        [36064]: this.maskMap\n      }\n    });\n  }\n\n  render(options) {\n    const gl = this.gl;\n    const colorMask = [false, false, false, false];\n    colorMask[options.channel] = true;\n    return withParameters(gl, {\n      clearColor: [255, 255, 255, 255],\n      blend: true,\n      blendFunc: [0, 1],\n      blendEquation: 32778,\n      colorMask,\n      depthTest: false\n    }, () => super.render({ ...options,\n      target: this.fbo,\n      pass: 'mask'\n    }));\n  }\n\n  shouldDrawLayer(layer) {\n    return layer.props.operation === OPERATION.MASK;\n  }\n\n  delete() {\n    this.fbo.delete();\n    this.maskMap.delete();\n  }\n\n}","map":{"version":3,"sources":["../../../src/passes/mask-pass.ts"],"names":["constructor","mapSize","width","height","parameters","id","attachments","maskMap","render","gl","colorMask","options","withParameters","clearColor","blend","blendFunc","blendEquation","depthTest","target","pass","shouldDrawLayer","layer","OPERATION","delete"],"mappings":";AAAA,SAAA,WAAA,EAAA,SAAA,EAAA,cAAA,QAAA,eAAA;AACA,SAAA,SAAA,QAAA,kBAAA;AACA,OAAA,UAAA,MAAA,eAAA;AASA,eAAe,MAAA,QAAA,SAAA,UAAA,CAAkC;AAI/CA,EAAAA,WAAW,CAAA,EAAA,EAAA,KAAA,EAA4C;AACrD,UAAA,EAAA,EAAA,KAAA;;AADqD,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,KAAA,EAAA,KAAA,CAAA,CAAA;;AAGrD,UAAM;AAACC,MAAAA,OAAO,GAAG;AAAX,QAAN,KAAA;AAEA,SAAA,OAAA,GAAe,IAAA,SAAA,CAAA,EAAA,EAAkB;AAC/BC,MAAAA,KAAK,EAD0B,OAAA;AAE/BC,MAAAA,MAAM,EAFyB,OAAA;AAG/BC,MAAAA,UAAU,EAAE;AACV,SAAA,KAAA,GADU,IAAA;AAEV,SAAA,KAAA,GAFU,IAAA;AAGV,SAAA,KAAA,GAHU,KAAA;AAIV,SAAA,KAAA,GAAA;AAJU;AAHmB,KAAlB,CAAf;AAWA,SAAA,GAAA,GAAW,IAAA,WAAA,CAAA,EAAA,EAAoB;AAC7BC,MAAAA,EAAE,EAD2B,SAAA;AAE7BH,MAAAA,KAAK,EAFwB,OAAA;AAG7BC,MAAAA,MAAM,EAHuB,OAAA;AAI7BG,MAAAA,WAAW,EAAE;AACX,SAAA,KAAA,GAAwB,KAAKC;AADlB;AAJgB,KAApB,CAAX;AAQD;;AAEDC,EAAAA,MAAM,CAAA,OAAA,EAAiC;AACrC,UAAMC,EAAE,GAAG,KAAX,EAAA;AAEA,UAAMC,SAAS,GAAG,CAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAlB,KAAkB,CAAlB;AACAA,IAAAA,SAAS,CAACC,OAAO,CAAjBD,OAAS,CAATA,GAAAA,IAAAA;AAEA,WAAOE,cAAc,CAAA,EAAA,EAEnB;AACEC,MAAAA,UAAU,EAAE,CAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EADd,GACc,CADd;AAEEC,MAAAA,KAAK,EAFP,IAAA;AAGEC,MAAAA,SAAS,EAAE,CAAA,CAAA,EAHb,CAGa,CAHb;AAIEC,MAAAA,aAAa,EAJf,KAAA;AAAA,MAAA,SAAA;AAMEC,MAAAA,SAAS,EAAE;AANb,KAFmB,EAUnB,MAAM,MAAA,MAAA,CAAa,EAAC,GAAD,OAAA;AAAaC,MAAAA,MAAM,EAAE,KAArB,GAAA;AAA+BC,MAAAA,IAAI,EAAE;AAArC,KAAb,CAVa,CAArB;AAYD;;AAEDC,EAAAA,eAAe,CAAA,KAAA,EAAQ;AACrB,WAAOC,KAAK,CAALA,KAAAA,CAAAA,SAAAA,KAA0BC,SAAS,CAA1C,IAAA;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,SAAA,GAAA,CAAA,MAAA;AACA,SAAA,OAAA,CAAA,MAAA;AACD;;AAzD8C","sourcesContent":["import {Framebuffer, Texture2D, withParameters} from '@luma.gl/core';\nimport {OPERATION} from '../lib/constants';\nimport LayersPass from './layers-pass';\n\nimport type {LayersPassRenderOptions} from './layers-pass';\n\ntype MaskPassRenderOptions = LayersPassRenderOptions & {\n  /** The channel to render into, 0:red, 1:green, 2:blue, 3:alpha */\n  channel: number;\n};\n\nexport default class MaskPass extends LayersPass {\n  maskMap: Texture2D;\n  fbo: Framebuffer;\n\n  constructor(gl, props: {id: string; mapSize?: number}) {\n    super(gl, props);\n\n    const {mapSize = 2048} = props;\n\n    this.maskMap = new Texture2D(gl, {\n      width: mapSize,\n      height: mapSize,\n      parameters: {\n        [gl.TEXTURE_MIN_FILTER]: gl.LINEAR,\n        [gl.TEXTURE_MAG_FILTER]: gl.LINEAR,\n        [gl.TEXTURE_WRAP_S]: gl.CLAMP_TO_EDGE,\n        [gl.TEXTURE_WRAP_T]: gl.CLAMP_TO_EDGE\n      }\n    });\n\n    this.fbo = new Framebuffer(gl, {\n      id: 'maskmap',\n      width: mapSize,\n      height: mapSize,\n      attachments: {\n        [gl.COLOR_ATTACHMENT0]: this.maskMap\n      }\n    });\n  }\n\n  render(options: MaskPassRenderOptions) {\n    const gl = this.gl;\n\n    const colorMask = [false, false, false, false];\n    colorMask[options.channel] = true;\n\n    return withParameters(\n      gl,\n      {\n        clearColor: [255, 255, 255, 255],\n        blend: true,\n        blendFunc: [gl.ZERO, gl.ONE],\n        blendEquation: gl.FUNC_SUBTRACT,\n        colorMask,\n        depthTest: false\n      },\n      () => super.render({...options, target: this.fbo, pass: 'mask'})\n    );\n  }\n\n  shouldDrawLayer(layer) {\n    return layer.props.operation === OPERATION.MASK;\n  }\n\n  delete() {\n    this.fbo.delete();\n    this.maskMap.delete();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}