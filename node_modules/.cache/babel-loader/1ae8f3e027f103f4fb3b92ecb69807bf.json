{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { clamp } from '@math.gl/core';\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport { normalizeViewportProps } from '@math.gl/web-mercator';\nimport assert from '../utils/assert';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\nexport class MapState extends ViewState {\n  constructor(options) {\n    const {\n      width,\n      height,\n      latitude,\n      longitude,\n      zoom,\n      bearing = 0,\n      pitch = 0,\n      altitude = 1.5,\n      position = [0, 0, 0],\n      maxZoom = 20,\n      minZoom = 0,\n      maxPitch = 60,\n      minPitch = 0,\n      startPanLngLat,\n      startZoomLngLat,\n      startRotatePos,\n      startBearing,\n      startPitch,\n      startZoom,\n      normalize = true\n    } = options;\n    assert(Number.isFinite(longitude));\n    assert(Number.isFinite(latitude));\n    assert(Number.isFinite(zoom));\n    super({\n      width,\n      height,\n      latitude,\n      longitude,\n      zoom,\n      bearing,\n      pitch,\n      altitude,\n      maxZoom,\n      minZoom,\n      maxPitch,\n      minPitch,\n      normalize,\n      position\n    }, {\n      startPanLngLat,\n      startZoomLngLat,\n      startRotatePos,\n      startBearing,\n      startPitch,\n      startZoom\n    });\n\n    _defineProperty(this, \"makeViewport\", void 0);\n\n    this.makeViewport = options.makeViewport;\n  }\n\n  panStart({\n    pos\n  }) {\n    return this._getUpdatedState({\n      startPanLngLat: this._unproject(pos)\n    });\n  }\n\n  pan({\n    pos,\n    startPos\n  }) {\n    const startPanLngLat = this.getState().startPanLngLat || this._unproject(startPos);\n\n    if (!startPanLngLat) {\n      return this;\n    }\n\n    const viewport = this.makeViewport(this.getViewportProps());\n    const newProps = viewport.panByPosition(startPanLngLat, pos);\n    return this._getUpdatedState(newProps);\n  }\n\n  panEnd() {\n    return this._getUpdatedState({\n      startPanLngLat: null\n    });\n  }\n\n  rotateStart({\n    pos\n  }) {\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startBearing: this.getViewportProps().bearing,\n      startPitch: this.getViewportProps().pitch\n    });\n  }\n\n  rotate({\n    pos,\n    deltaAngleX = 0,\n    deltaAngleY = 0\n  }) {\n    const {\n      startRotatePos,\n      startBearing,\n      startPitch\n    } = this.getState();\n\n    if (!startRotatePos || startBearing === undefined || startPitch === undefined) {\n      return this;\n    }\n\n    let newRotation;\n\n    if (pos) {\n      newRotation = this._getNewRotation(pos, startRotatePos, startPitch, startBearing);\n    } else {\n      newRotation = {\n        bearing: startBearing + deltaAngleX,\n        pitch: startPitch + deltaAngleY\n      };\n    }\n\n    return this._getUpdatedState(newRotation);\n  }\n\n  rotateEnd() {\n    return this._getUpdatedState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  zoomStart({\n    pos\n  }) {\n    return this._getUpdatedState({\n      startZoomLngLat: this._unproject(pos),\n      startZoom: this.getViewportProps().zoom\n    });\n  }\n\n  zoom({\n    pos,\n    startPos,\n    scale\n  }) {\n    let {\n      startZoom,\n      startZoomLngLat\n    } = this.getState();\n\n    if (!startZoomLngLat) {\n      startZoom = this.getViewportProps().zoom;\n      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n    }\n\n    if (!startZoomLngLat) {\n      return this;\n    }\n\n    const {\n      maxZoom,\n      minZoom\n    } = this.getViewportProps();\n    let zoom = startZoom + Math.log2(scale);\n    zoom = clamp(zoom, minZoom, maxZoom);\n    const zoomedViewport = this.makeViewport({ ...this.getViewportProps(),\n      zoom\n    });\n    return this._getUpdatedState({\n      zoom,\n      ...zoomedViewport.panByPosition(startZoomLngLat, pos)\n    });\n  }\n\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomLngLat: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn(speed = 2) {\n    return this._zoomFromCenter(speed);\n  }\n\n  zoomOut(speed = 2) {\n    return this._zoomFromCenter(1 / speed);\n  }\n\n  moveLeft(speed = 100) {\n    return this._panFromCenter([speed, 0]);\n  }\n\n  moveRight(speed = 100) {\n    return this._panFromCenter([-speed, 0]);\n  }\n\n  moveUp(speed = 100) {\n    return this._panFromCenter([0, speed]);\n  }\n\n  moveDown(speed = 100) {\n    return this._panFromCenter([0, -speed]);\n  }\n\n  rotateLeft(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this.getViewportProps().bearing - speed\n    });\n  }\n\n  rotateRight(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this.getViewportProps().bearing + speed\n    });\n  }\n\n  rotateUp(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this.getViewportProps().pitch + speed\n    });\n  }\n\n  rotateDown(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this.getViewportProps().pitch - speed\n    });\n  }\n\n  shortestPathFrom(viewState) {\n    const fromProps = viewState.getViewportProps();\n    const props = { ...this.getViewportProps()\n    };\n    const {\n      bearing,\n      longitude\n    } = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n\n    if (Math.abs(longitude - fromProps.longitude) > 180) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n\n    return props;\n  }\n\n  applyConstraints(props) {\n    const {\n      maxZoom,\n      minZoom,\n      zoom\n    } = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n    const {\n      maxPitch,\n      minPitch,\n      pitch\n    } = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n    const {\n      normalize = true\n    } = props;\n\n    if (normalize) {\n      Object.assign(props, normalizeViewportProps(props));\n    }\n\n    return props;\n  }\n\n  _zoomFromCenter(scale) {\n    const {\n      width,\n      height\n    } = this.getViewportProps();\n    return this.zoom({\n      pos: [width / 2, height / 2],\n      scale\n    });\n  }\n\n  _panFromCenter(offset) {\n    const {\n      width,\n      height\n    } = this.getViewportProps();\n    return this.pan({\n      startPos: [width / 2, height / 2],\n      pos: [width / 2 + offset[0], height / 2 + offset[1]]\n    });\n  }\n\n  _getUpdatedState(newProps) {\n    return new this.constructor({\n      makeViewport: this.makeViewport,\n      ...this.getViewportProps(),\n      ...this.getState(),\n      ...newProps\n    });\n  }\n\n  _unproject(pos) {\n    const viewport = this.makeViewport(this.getViewportProps());\n    return pos && viewport.unproject(pos);\n  }\n\n  _getNewRotation(pos, startPos, startPitch, startBearing) {\n    const deltaX = pos[0] - startPos[0];\n    const deltaY = pos[1] - startPos[1];\n    const centerY = pos[1];\n    const startY = startPos[1];\n    const {\n      width,\n      height\n    } = this.getViewportProps();\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        deltaScaleY = deltaY / (startY - height) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n\n    deltaScaleY = clamp(deltaScaleY, -1, 1);\n    const {\n      minPitch,\n      maxPitch\n    } = this.getViewportProps();\n    const bearing = startBearing + 180 * deltaScaleX;\n    let pitch = startPitch;\n\n    if (deltaScaleY > 0) {\n      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n    } else if (deltaScaleY < 0) {\n      pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n    }\n\n    return {\n      pitch,\n      bearing\n    };\n  }\n\n}\nexport default class MapController extends Controller {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"ControllerState\", MapState);\n\n    _defineProperty(this, \"transition\", {\n      transitionDuration: 300,\n      transitionInterpolator: new LinearInterpolator({\n        transitionProps: {\n          compare: ['longitude', 'latitude', 'zoom', 'bearing', 'pitch', 'position'],\n          required: ['longitude', 'latitude', 'zoom']\n        }\n      })\n    });\n\n    _defineProperty(this, \"dragMode\", 'pan');\n  }\n\n  setProps(props) {\n    props.position = props.position || [0, 0, 0];\n    const oldProps = this.props;\n    super.setProps(props);\n    const dimensionChanged = !oldProps || oldProps.height !== props.height;\n\n    if (dimensionChanged) {\n      this.updateViewport(new this.ControllerState({\n        makeViewport: this.makeViewport,\n        ...props,\n        ...this.state\n      }));\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../src/controllers/map-controller.ts"],"names":["PITCH_MOUSE_THRESHOLD","PITCH_ACCEL","constructor","bearing","pitch","altitude","position","maxZoom","minZoom","maxPitch","minPitch","normalize","assert","Number","startZoom","options","panStart","pos","startPanLngLat","pan","startPos","viewport","newProps","panEnd","rotateStart","startRotatePos","startBearing","startPitch","rotate","deltaAngleX","deltaAngleY","newRotation","rotateEnd","zoomStart","startZoomLngLat","zoom","scale","Math","clamp","zoomedViewport","zoomEnd","zoomIn","speed","zoomOut","moveLeft","moveRight","moveUp","moveDown","rotateLeft","rotateRight","rotateUp","rotateDown","shortestPathFrom","fromProps","viewState","props","longitude","applyConstraints","Object","normalizeViewportProps","_zoomFromCenter","height","width","_panFromCenter","offset","_getUpdatedState","makeViewport","_unproject","_getNewRotation","deltaX","deltaY","centerY","startY","deltaScaleX","deltaScaleY","transitionDuration","transitionInterpolator","transitionProps","compare","required","setProps","oldProps","dimensionChanged","state"],"mappings":"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","sourcesContent":["import {clamp} from '@math.gl/core';\nimport Controller, {ControllerProps} from './controller';\nimport ViewState from './view-state';\nimport {normalizeViewportProps} from '@math.gl/web-mercator';\nimport assert from '../utils/assert';\n\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport type Viewport from '../viewports/viewport';\n\nconst PITCH_MOUSE_THRESHOLD = 5;\nconst PITCH_ACCEL = 1.2;\n\nexport type MapStateProps = {\n  /** Mapbox viewport properties */\n  /** The width of the viewport */\n  width: number;\n  /** The height of the viewport */\n  height: number;\n  /** The latitude at the center of the viewport */\n  latitude: number;\n  /** The longitude at the center of the viewport */\n  longitude: number;\n  /** The tile zoom level of the map. */\n  zoom: number;\n  /** The bearing of the viewport in degrees */\n  bearing?: number;\n  /** The pitch of the viewport in degrees */\n  pitch?: number;\n  /**\n   * Specify the altitude of the viewport camera\n   * Unit: map heights, default 1.5\n   * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n   */\n  altitude?: number;\n  /** Viewport position */\n  position?: [number, number, number];\n\n  /** Viewport constraints */\n  maxZoom?: number;\n  minZoom?: number;\n  maxPitch?: number;\n  minPitch?: number;\n\n  /** Normalize viewport props to fit map height into viewport. Default `true` */\n  normalize?: boolean;\n};\n\ntype MapStateInternal = {\n  /** Interaction states, required to calculate change during transform */\n  /* The point on map being grabbed when the operation first started */\n  startPanLngLat?: [number, number];\n  /* Center of the zoom when the operation first started */\n  startZoomLngLat?: [number, number];\n  /* Pointer position when rotation started */\n  startRotatePos?: [number, number];\n  /** Bearing when current perspective rotate operation started */\n  startBearing?: number;\n  /** Pitch when current perspective rotate operation started */\n  startPitch?: number;\n  /** Zoom when current zoom operation started */\n  startZoom?: number;\n};\n\n/* Utils */\n\nexport class MapState extends ViewState<MapState, MapStateProps, MapStateInternal> {\n  makeViewport: (props: Record<string, any>) => Viewport;\n\n  constructor(\n    options: MapStateProps &\n      MapStateInternal & {\n        makeViewport: (props: Record<string, any>) => Viewport;\n      }\n  ) {\n    const {\n      /** Mapbox viewport properties */\n      /** The width of the viewport */\n      width,\n      /** The height of the viewport */\n      height,\n      /** The latitude at the center of the viewport */\n      latitude,\n      /** The longitude at the center of the viewport */\n      longitude,\n      /** The tile zoom level of the map. */\n      zoom,\n      /** The bearing of the viewport in degrees */\n      bearing = 0,\n      /** The pitch of the viewport in degrees */\n      pitch = 0,\n      /**\n       * Specify the altitude of the viewport camera\n       * Unit: map heights, default 1.5\n       * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n       */\n      altitude = 1.5,\n      /** Viewport position */\n      position = [0, 0, 0],\n\n      /** Viewport constraints */\n      maxZoom = 20,\n      minZoom = 0,\n      maxPitch = 60,\n      minPitch = 0,\n\n      /** Interaction states, required to calculate change during transform */\n      /* The point on map being grabbed when the operation first started */\n      startPanLngLat,\n      /* Center of the zoom when the operation first started */\n      startZoomLngLat,\n      /* Pointer position when rotation started */\n      startRotatePos,\n      /** Bearing when current perspective rotate operation started */\n      startBearing,\n      /** Pitch when current perspective rotate operation started */\n      startPitch,\n      /** Zoom when current zoom operation started */\n      startZoom,\n\n      /** Normalize viewport props to fit map height into viewport */\n      normalize = true\n    } = options;\n\n    assert(Number.isFinite(longitude)); // `longitude` must be supplied\n    assert(Number.isFinite(latitude)); // `latitude` must be supplied\n    assert(Number.isFinite(zoom)); // `zoom` must be supplied\n\n    super(\n      {\n        width,\n        height,\n        latitude,\n        longitude,\n        zoom,\n        bearing,\n        pitch,\n        altitude,\n        maxZoom,\n        minZoom,\n        maxPitch,\n        minPitch,\n        normalize,\n        position\n      },\n      {\n        startPanLngLat,\n        startZoomLngLat,\n        startRotatePos,\n        startBearing,\n        startPitch,\n        startZoom\n      }\n    );\n\n    this.makeViewport = options.makeViewport;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos}: {pos: [number, number]}): MapState {\n    return this._getUpdatedState({\n      startPanLngLat: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   * @param {[Number, Number], optional} startPos - where the pointer grabbed at\n   *   the start of the operation. Must be supplied of `panStart()` was not called\n   */\n  pan({pos, startPos}: {pos: [number, number]; startPos?: [number, number]}): MapState {\n    const startPanLngLat = this.getState().startPanLngLat || this._unproject(startPos);\n\n    if (!startPanLngLat) {\n      return this;\n    }\n\n    const viewport = this.makeViewport(this.getViewportProps());\n    const newProps = viewport.panByPosition(startPanLngLat, pos);\n\n    return this._getUpdatedState(newProps);\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd(): MapState {\n    return this._getUpdatedState({\n      startPanLngLat: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotateStart({pos}: {pos: [number, number]}): MapState {\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startBearing: this.getViewportProps().bearing,\n      startPitch: this.getViewportProps().pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotate({\n    pos,\n    deltaAngleX = 0,\n    deltaAngleY = 0\n  }: {\n    pos?: [number, number];\n    deltaAngleX?: number;\n    deltaAngleY?: number;\n  }): MapState {\n    const {startRotatePos, startBearing, startPitch} = this.getState();\n\n    if (!startRotatePos || startBearing === undefined || startPitch === undefined) {\n      return this;\n    }\n    let newRotation;\n    if (pos) {\n      newRotation = this._getNewRotation(pos, startRotatePos, startPitch, startBearing);\n    } else {\n      newRotation = {\n        bearing: startBearing + deltaAngleX,\n        pitch: startPitch + deltaAngleY\n      };\n    }\n    return this._getUpdatedState(newRotation);\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd(): MapState {\n    return this._getUpdatedState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  zoomStart({pos}: {pos: [number, number]}): MapState {\n    return this._getUpdatedState({\n      startZoomLngLat: this._unproject(pos),\n      startZoom: this.getViewportProps().zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({\n    pos,\n    startPos,\n    scale\n  }: {\n    pos: [number, number];\n    startPos?: [number, number];\n    scale: number;\n  }): MapState {\n    // Make sure we zoom around the current mouse position rather than map center\n    let {startZoom, startZoomLngLat} = this.getState();\n\n    if (!startZoomLngLat) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = this.getViewportProps().zoom;\n      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n    }\n    if (!startZoomLngLat) {\n      return this;\n    }\n\n    const {maxZoom, minZoom} = this.getViewportProps();\n    let zoom = (startZoom as number) + Math.log2(scale);\n    zoom = clamp(zoom, minZoom, maxZoom);\n\n    const zoomedViewport = this.makeViewport({...this.getViewportProps(), zoom});\n\n    return this._getUpdatedState({\n      zoom,\n      ...zoomedViewport.panByPosition(startZoomLngLat, pos)\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd(): MapState {\n    return this._getUpdatedState({\n      startZoomLngLat: null,\n      startZoom: null\n    });\n  }\n\n  zoomIn(speed: number = 2): MapState {\n    return this._zoomFromCenter(speed);\n  }\n\n  zoomOut(speed: number = 2): MapState {\n    return this._zoomFromCenter(1 / speed);\n  }\n\n  moveLeft(speed: number = 100): MapState {\n    return this._panFromCenter([speed, 0]);\n  }\n\n  moveRight(speed: number = 100): MapState {\n    return this._panFromCenter([-speed, 0]);\n  }\n\n  moveUp(speed: number = 100): MapState {\n    return this._panFromCenter([0, speed]);\n  }\n\n  moveDown(speed: number = 100): MapState {\n    return this._panFromCenter([0, -speed]);\n  }\n\n  rotateLeft(speed: number = 15): MapState {\n    return this._getUpdatedState({\n      bearing: this.getViewportProps().bearing - speed\n    });\n  }\n\n  rotateRight(speed: number = 15): MapState {\n    return this._getUpdatedState({\n      bearing: this.getViewportProps().bearing + speed\n    });\n  }\n\n  rotateUp(speed: number = 10): MapState {\n    return this._getUpdatedState({\n      pitch: this.getViewportProps().pitch + speed\n    });\n  }\n\n  rotateDown(speed: number = 10): MapState {\n    return this._getUpdatedState({\n      pitch: this.getViewportProps().pitch - speed\n    });\n  }\n\n  shortestPathFrom(viewState: MapState): MapStateProps {\n    // const endViewStateProps = new this.ControllerState(endProps).shortestPathFrom(startViewstate);\n    const fromProps = viewState.getViewportProps();\n    const props = {...this.getViewportProps()};\n    const {bearing, longitude} = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n    if (Math.abs(longitude - fromProps.longitude) > 180) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n    return props;\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  applyConstraints(props: Required<MapStateProps>): Required<MapStateProps> {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    // Ensure pitch is within specified range\n    const {maxPitch, minPitch, pitch} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    // Normalize viewport props to fit map height into viewport\n    const {normalize = true} = props;\n    if (normalize) {\n      Object.assign(props, normalizeViewportProps(props));\n    }\n\n    return props;\n  }\n\n  /* Private methods */\n\n  _zoomFromCenter(scale) {\n    const {width, height} = this.getViewportProps();\n    return this.zoom({\n      pos: [width / 2, height / 2],\n      scale\n    });\n  }\n\n  _panFromCenter(offset) {\n    const {width, height} = this.getViewportProps();\n    return this.pan({\n      startPos: [width / 2, height / 2],\n      pos: [width / 2 + offset[0], height / 2 + offset[1]]\n    });\n  }\n\n  _getUpdatedState(newProps): MapState {\n    // @ts-ignore\n    return new this.constructor({\n      makeViewport: this.makeViewport,\n      ...this.getViewportProps(),\n      ...this.getState(),\n      ...newProps\n    });\n  }\n\n  _unproject(pos?: [number, number]): [number, number] | undefined {\n    const viewport = this.makeViewport(this.getViewportProps());\n    // @ts-ignore\n    return pos && viewport.unproject(pos);\n  }\n\n  _getNewRotation(\n    pos: [number, number],\n    startPos: [number, number],\n    startPitch: number,\n    startBearing: number\n  ): {\n    pitch: number;\n    bearing: number;\n  } {\n    const deltaX = pos[0] - startPos[0];\n    const deltaY = pos[1] - startPos[1];\n    const centerY = pos[1];\n    const startY = startPos[1];\n    const {width, height} = this.getViewportProps();\n\n    const deltaScaleX = deltaX / width;\n    let deltaScaleY = 0;\n\n    if (deltaY > 0) {\n      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to -1 as we drag upwards\n        deltaScaleY = (deltaY / (startY - height)) * PITCH_ACCEL;\n      }\n    } else if (deltaY < 0) {\n      if (startY > PITCH_MOUSE_THRESHOLD) {\n        // Move from 0 to 1 as we drag upwards\n        deltaScaleY = 1 - centerY / startY;\n      }\n    }\n    // clamp deltaScaleY to [-1, 1] so that rotation is constrained between minPitch and maxPitch.\n    // deltaScaleX does not need to be clamped as bearing does not have constraints.\n    deltaScaleY = clamp(deltaScaleY, -1, 1);\n\n    const {minPitch, maxPitch} = this.getViewportProps();\n\n    const bearing = startBearing + 180 * deltaScaleX;\n    let pitch = startPitch;\n    if (deltaScaleY > 0) {\n      // Gradually increase pitch\n      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n    } else if (deltaScaleY < 0) {\n      // Gradually decrease pitch\n      pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n    }\n\n    return {\n      pitch,\n      bearing\n    };\n  }\n}\n\nexport default class MapController extends Controller<MapState> {\n  ControllerState = MapState;\n\n  transition = {\n    transitionDuration: 300,\n    transitionInterpolator: new LinearInterpolator({\n      transitionProps: {\n        compare: ['longitude', 'latitude', 'zoom', 'bearing', 'pitch', 'position'],\n        required: ['longitude', 'latitude', 'zoom']\n      }\n    })\n  };\n\n  dragMode: 'pan' | 'rotate' = 'pan';\n\n  setProps(props: ControllerProps & MapStateProps) {\n    props.position = props.position || [0, 0, 0];\n    const oldProps = this.props;\n\n    super.setProps(props);\n\n    const dimensionChanged = !oldProps || oldProps.height !== props.height;\n    if (dimensionChanged) {\n      // Dimensions changed, normalize the props\n      this.updateViewport(\n        new this.ControllerState({\n          makeViewport: this.makeViewport,\n          ...props,\n          ...this.state\n        })\n      );\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}