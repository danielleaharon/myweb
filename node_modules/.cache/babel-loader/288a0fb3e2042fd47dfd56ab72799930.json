{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport Viewport from '../viewports/viewport';\nimport { Matrix4 } from '@math.gl/core';\nimport { pixelsToWorld, fovyToAltitude } from '@math.gl/web-mercator';\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nfunction getViewMatrix({\n  height,\n  focalDistance,\n  orbitAxis,\n  rotationX,\n  rotationOrbit,\n  zoom\n}) {\n  const up = orbitAxis === 'Z' ? [0, 0, 1] : [0, 1, 0];\n  const eye = orbitAxis === 'Z' ? [0, -focalDistance, 0] : [0, 0, focalDistance];\n  const viewMatrix = new Matrix4().lookAt({\n    eye,\n    up\n  });\n  viewMatrix.rotateX(rotationX * DEGREES_TO_RADIANS);\n\n  if (orbitAxis === 'Z') {\n    viewMatrix.rotateZ(rotationOrbit * DEGREES_TO_RADIANS);\n  } else {\n    viewMatrix.rotateY(rotationOrbit * DEGREES_TO_RADIANS);\n  }\n\n  const projectionScale = Math.pow(2, zoom) / height;\n  viewMatrix.scale(projectionScale);\n  return viewMatrix;\n}\n\nexport default class OrbitViewport extends Viewport {\n  constructor(props) {\n    const {\n      height,\n      projectionMatrix,\n      fovy = 50,\n      orbitAxis = 'Z',\n      target = [0, 0, 0],\n      rotationX = 0,\n      rotationOrbit = 0,\n      zoom = 0\n    } = props;\n    const focalDistance = projectionMatrix ? projectionMatrix[5] / 2 : fovyToAltitude(fovy);\n    super({ ...props,\n      longitude: undefined,\n      viewMatrix: getViewMatrix({\n        height: height || 1,\n        focalDistance,\n        orbitAxis,\n        rotationX,\n        rotationOrbit,\n        zoom\n      }),\n      fovy,\n      focalDistance,\n      position: target,\n      zoom\n    });\n\n    _defineProperty(this, \"projectedCenter\", void 0);\n\n    this.projectedCenter = this.project(this.center);\n  }\n\n  unproject(xyz, {\n    topLeft = true\n  } = {}) {\n    const [x, y, z = this.projectedCenter[2]] = xyz;\n    const y2 = topLeft ? y : this.height - y;\n    const [X, Y, Z] = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix);\n    return [X, Y, Z];\n  }\n\n  panByPosition(coords, pixel) {\n    const p0 = this.project(coords);\n    const nextCenter = [this.width / 2 + p0[0] - pixel[0], this.height / 2 + p0[1] - pixel[1], this.projectedCenter[2]];\n    return {\n      target: this.unproject(nextCenter)\n    };\n  }\n\n}","map":{"version":3,"sources":["../../../src/viewports/orbit-viewport.ts"],"names":["DEGREES_TO_RADIANS","Math","zoom","up","orbitAxis","eye","viewMatrix","rotationX","rotationOrbit","projectionScale","constructor","fovy","target","focalDistance","projectionMatrix","fovyToAltitude","longitude","getViewMatrix","height","position","unproject","topLeft","z","y2","pixelsToWorld","panByPosition","p0","nextCenter","pixel"],"mappings":"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","sourcesContent":["import Viewport from '../viewports/viewport';\n\nimport {Matrix4} from '@math.gl/core';\nimport {pixelsToWorld, fovyToAltitude} from '@math.gl/web-mercator';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nfunction getViewMatrix({\n  height,\n  focalDistance,\n  orbitAxis,\n  rotationX,\n  rotationOrbit,\n  zoom\n}: {\n  height: number;\n  focalDistance: number;\n  orbitAxis: 'Y' | 'Z';\n  rotationX: number;\n  rotationOrbit: number;\n  zoom: number;\n}): Matrix4 {\n  // We position the camera so that one common space unit (world space unit scaled by zoom)\n  // at the target maps to one screen pixel.\n  // This is a similar technique to that used in web mercator projection\n  // By doing so we are able to convert between common space and screen space sizes efficiently\n  // in the vertex shader.\n  const up = orbitAxis === 'Z' ? [0, 0, 1] : [0, 1, 0];\n  const eye = orbitAxis === 'Z' ? [0, -focalDistance, 0] : [0, 0, focalDistance];\n\n  const viewMatrix = new Matrix4().lookAt({eye, up});\n\n  viewMatrix.rotateX(rotationX * DEGREES_TO_RADIANS);\n  if (orbitAxis === 'Z') {\n    viewMatrix.rotateZ(rotationOrbit * DEGREES_TO_RADIANS);\n  } else {\n    viewMatrix.rotateY(rotationOrbit * DEGREES_TO_RADIANS);\n  }\n\n  // When height increases, we need to increase the distance from the camera to the target to\n  // keep the 1:1 mapping. However, this also changes the projected depth of each position by\n  // moving them further away between the near/far plane.\n  // Without modifying the default near/far planes, we instead scale down the common space to\n  // remove the distortion to the depth field.\n  const projectionScale = Math.pow(2, zoom) / height;\n  viewMatrix.scale(projectionScale);\n\n  return viewMatrix;\n}\n\nexport type OrbitViewportOptions = {\n  /** Name of the viewport */\n  id?: string;\n  /** Left offset from the canvas edge, in pixels */\n  x?: number;\n  /** Top offset from the canvas edge, in pixels */\n  y?: number;\n  /** Viewport width in pixels */\n  width?: number;\n  /** Viewport height in pixels */\n  height?: number;\n  /** Axis with 360 degrees rotating freedom, either `'Y'` or `'Z'`, default to `'Z'`. */\n  orbitAxis?: 'Y' | 'Z';\n  /** The world position at the center of the viewport. Default `[0, 0, 0]`. */\n  target?: [number, number, number];\n  /** The zoom level of the viewport. `zoom: 0` maps one unit distance to one pixel on screen, and increasing `zoom` by `1` scales the same object to twice as large. Default `0`. */\n  zoom?: number;\n  /** Rotating angle around orbit axis. Default `0`. */\n  rotationOrbit?: number;\n  /** Rotating angle around orbit axis. Default `0`. */\n  rotationX?: number;\n  /** Custom projection matrix */\n  projectionMatrix?: number[];\n  /** Field of view covered by camera, in the perspective case. In degrees. Default `50`. */\n  fovy?: number;\n  /** Distance of near clipping plane. Default `0.1`. */\n  near?: number;\n  /** Distance of far clipping plane. Default `1000`. */\n  far?: number;\n  /** Whether to create an orthographic or perspective projection matrix. Default is `false` (perspective projection). */\n  orthographic?: boolean;\n};\n\nexport default class OrbitViewport extends Viewport {\n  projectedCenter: number[];\n\n  constructor(props: OrbitViewportOptions) {\n    const {\n      height,\n\n      projectionMatrix,\n\n      fovy = 50, // For setting camera position\n      orbitAxis = 'Z', // Orbit axis with 360 degrees rotating freedom, can only be 'Y' or 'Z'\n      target = [0, 0, 0], // Which point is camera looking at, default origin\n\n      rotationX = 0, // Rotating angle around X axis\n      rotationOrbit = 0, // Rotating angle around orbit axis\n\n      zoom = 0\n    } = props;\n\n    const focalDistance = projectionMatrix ? projectionMatrix[5] / 2 : fovyToAltitude(fovy);\n\n    super({\n      ...props,\n      // in case viewState contains longitude/latitude values,\n      // make sure that the base Viewport class does not treat this as a geospatial viewport\n      longitude: undefined,\n      viewMatrix: getViewMatrix({\n        height: height || 1,\n        focalDistance,\n        orbitAxis,\n        rotationX,\n        rotationOrbit,\n        zoom\n      }),\n      fovy,\n      focalDistance,\n      position: target,\n      zoom\n    });\n\n    this.projectedCenter = this.project(this.center);\n  }\n\n  unproject(xyz: number[], {topLeft = true}: {topLeft?: boolean} = {}): [number, number, number] {\n    const [x, y, z = this.projectedCenter[2]] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const [X, Y, Z] = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix);\n    return [X, Y, Z];\n  }\n\n  panByPosition(coords: number[], pixel: number[]): OrbitViewportOptions {\n    const p0 = this.project(coords);\n    const nextCenter = [\n      this.width / 2 + p0[0] - pixel[0],\n      this.height / 2 + p0[1] - pixel[1],\n      this.projectedCenter[2]\n    ];\n    return {\n      target: this.unproject(nextCenter)\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}