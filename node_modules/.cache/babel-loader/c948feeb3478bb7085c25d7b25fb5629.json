{"ast":null,"code":"import { BOX_WIDTH, BOX_HEIGHT, GRID_WIDTH, GRID_HEIGHT, GAME_OVER, GAME_ON } from '../config/variables';\nimport { getRandomColor, getLayout, getSnakes, getLadders } from '../config/utils';\nimport { ADD_NEW_PLAYER, MOVE_PLAYER, CHANGE_PLAYER, CHANGE_PLAYER_POSITION_IN_BOX, RECORD_DICE_LOG, LOG_MESSAGE, SET_PLAYER_PERSISTENCE, ENABLE_DICE, END_GAME, ADD_SNAKE_BITE, ADD_LADDER_HIKE, RESTART_GAME, REDRAW } from '../actions/GameActions';\nconst firstPlayerColor = getRandomColor();\nconst initialState = {\n  status: GAME_ON,\n  dice: {\n    disabled: false\n  },\n  messages: ['Start rolling'],\n  grid: {\n    layout: getLayout(GRID_WIDTH, GRID_HEIGHT),\n    width: GRID_WIDTH,\n    height: GRID_HEIGHT,\n    occupancy: _initializeOccupancy(),\n    box: {\n      height: BOX_HEIGHT,\n      width: BOX_WIDTH\n    }\n  },\n  snakes: getSnakes(),\n  ladders: getLadders(),\n  players: {\n    count: 1,\n    persistence: 1,\n    current: {\n      id: 1,\n      pos: 1,\n      color: firstPlayerColor,\n      path: [1],\n      diceLog: [],\n      boxPosition: -1,\n      //center\n      snakeBites: 0,\n      ladderHikes: 0\n    },\n    all: [{\n      id: 1,\n      pos: 1,\n      color: firstPlayerColor,\n      path: [1],\n      diceLog: [],\n      boxPosition: -1,\n      //center\n      snakeBites: 0,\n      ladderHikes: 0\n    }]\n  }\n};\nexport function game(state = initialState, action) {\n  switch (action.type) {\n    case ADD_NEW_PLAYER:\n      const newPlayer = _generateNewPlayer(state.players.count);\n\n      return { ...state,\n        grid: { ...state.grid,\n          occupancy: { ...state.grid.occupancy,\n            1: state.grid.occupancy[1] + 1\n          }\n        },\n        players: { ...state.players,\n          all: [...state.players.all, newPlayer],\n          count: state.players.count + 1\n        }\n      };\n\n    case MOVE_PLAYER:\n      let newOccupancy = {};\n      newOccupancy[action.newPos] = state.grid.occupancy[action.newPos] + 1;\n      newOccupancy[state.players.current.pos] = state.grid.occupancy[state.players.current.pos] - 1;\n      return { ...state,\n        dice: { ...state.dice,\n          disabled: true\n        },\n        grid: { ...state.grid,\n          occupancy: { ...state.grid.occupancy,\n            ...newOccupancy\n          }\n        },\n        players: { ...state.players,\n          all: state.players.all.map(p => {\n            if (p.id === state.players.current.id) {\n              return { ...p,\n                pos: action.newPos,\n                boxPosition: -1,\n                path: [...p.path, action.newPos]\n              };\n            }\n\n            return p;\n          }),\n          current: { ...state.players.current,\n            pos: action.newPos,\n            boxPosition: -1,\n            path: [...state.players.current.path, action.newPos]\n          }\n        }\n      };\n\n    case CHANGE_PLAYER:\n      var nextPlayer = _getNextPlayer(state.players);\n\n      return { ...state,\n        dice: {\n          disabled: false\n        },\n        players: { ...state.players,\n          current: nextPlayer\n        }\n      };\n\n    case RECORD_DICE_LOG:\n      return { ...state,\n        players: { ...state.players,\n          all: state.players.all.map(p => {\n            if (p.id === state.players.current.id) {\n              return { ...p,\n                diceLog: [...p.diceLog, action.diceResult]\n              };\n            }\n\n            return p;\n          }),\n          current: { ...state.players.current,\n            diceLog: [...state.players.current.diceLog, action.diceResult]\n          }\n        }\n      };\n\n    case CHANGE_PLAYER_POSITION_IN_BOX:\n      let curPlayer = state.players.current.id === action.playerId ? { ...state.players.current,\n        boxPosition: action.newBoxPosition\n      } : state.players.current;\n      return { ...state,\n        players: { ...state.players,\n          all: state.players.all.map(p => {\n            if (p.id === action.playerId) {\n              return { ...p,\n                boxPosition: action.newBoxPosition\n              };\n            }\n\n            return p;\n          }),\n          current: curPlayer\n        }\n      };\n\n    case LOG_MESSAGE:\n      return { ...state,\n        messages: [action.message, ...state.messages]\n      };\n\n    case SET_PLAYER_PERSISTENCE:\n      return { ...state,\n        players: { ...state.players,\n          persistence: action.persistence\n        }\n      };\n\n    case ENABLE_DICE:\n      return { ...state,\n        dice: { ...state.dice,\n          disabled: false\n        }\n      };\n\n    case END_GAME:\n      return { ...state,\n        status: GAME_OVER\n      };\n\n    case ADD_SNAKE_BITE:\n      const newSnakeBites = state.players.current.snakeBites + 1;\n      return { ...state,\n        players: { ...state.players,\n          all: state.players.all.map(p => {\n            if (p.id === state.players.current.id) {\n              return { ...p,\n                snakeBites: newSnakeBites\n              };\n            }\n\n            return p;\n          }),\n          current: { ...state.players.current,\n            snakeBites: newSnakeBites\n          }\n        }\n      };\n\n    case ADD_LADDER_HIKE:\n      const newLadderHikes = state.players.current.ladderHikes + 1;\n      return { ...state,\n        players: { ...state.players,\n          all: state.players.all.map(p => {\n            if (p.id === state.players.current.id) {\n              return { ...p,\n                ladderHikes: newLadderHikes\n              };\n            }\n\n            return p;\n          }),\n          current: { ...state.players.current,\n            ladderHikes: newLadderHikes\n          }\n        }\n      };\n\n    case RESTART_GAME:\n      return initialState;\n\n    case REDRAW:\n      let newGrid = {};\n      let newWidth = action.width - 32;\n      let newHeight = action.height - 32;\n      newWidth = newWidth > 672 ? newWidth / 2 : newWidth;\n      newGrid = {\n        layout: getLayout(newWidth, newWidth),\n        width: newWidth,\n        height: newWidth,\n        box: {\n          height: newWidth / 10,\n          width: newWidth / 10\n        }\n      };\n      return { ...state,\n        grid: { ...state.grid,\n          ...newGrid\n        }\n      };\n\n    default:\n      return state;\n  }\n}\n/*\n * Private functions\n */\n\nfunction _generateNewPlayer(curCount) {\n  return {\n    id: curCount + 1,\n    color: getRandomColor(),\n    pos: 1,\n    path: [1],\n    diceLog: [],\n    boxPosition: -1,\n    //center\n    snakeBites: 0,\n    ladderHikes: 0\n  };\n}\n\nfunction _getNextPlayer({\n  all,\n  current,\n  count\n}) {\n  return current.id === count ? all[0] : all.filter(p => p.id === current.id + 1)[0];\n}\n\nfunction _initializeOccupancy() {\n  var occupacy = {};\n  occupacy[1] = 1;\n\n  for (let i = 2; i <= 100; i++) {\n    occupacy[i] = 0;\n  }\n\n  return occupacy;\n}","map":{"version":3,"sources":["/Users/user/Desktop/עבודות להגשה/myweb/src/components/snakes/reducers/gameReducer.js"],"names":["BOX_WIDTH","BOX_HEIGHT","GRID_WIDTH","GRID_HEIGHT","GAME_OVER","GAME_ON","getRandomColor","getLayout","getSnakes","getLadders","ADD_NEW_PLAYER","MOVE_PLAYER","CHANGE_PLAYER","CHANGE_PLAYER_POSITION_IN_BOX","RECORD_DICE_LOG","LOG_MESSAGE","SET_PLAYER_PERSISTENCE","ENABLE_DICE","END_GAME","ADD_SNAKE_BITE","ADD_LADDER_HIKE","RESTART_GAME","REDRAW","firstPlayerColor","initialState","status","dice","disabled","messages","grid","layout","width","height","occupancy","_initializeOccupancy","box","snakes","ladders","players","count","persistence","current","id","pos","color","path","diceLog","boxPosition","snakeBites","ladderHikes","all","game","state","action","type","newPlayer","_generateNewPlayer","newOccupancy","newPos","map","p","nextPlayer","_getNextPlayer","diceResult","curPlayer","playerId","newBoxPosition","message","newSnakeBites","newLadderHikes","newGrid","newWidth","newHeight","curCount","filter","occupacy","i"],"mappings":"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","sourcesContent":["import {\n  BOX_WIDTH,\n  BOX_HEIGHT,\n  GRID_WIDTH,\n  GRID_HEIGHT,\n  GAME_OVER,\n  GAME_ON\n} from '../config/variables';\nimport {\n  getRandomColor,\n  getLayout,\n  getSnakes,\n  getLadders\n} from '../config/utils';\nimport {\n  ADD_NEW_PLAYER,\n  MOVE_PLAYER,\n  CHANGE_PLAYER,\n  CHANGE_PLAYER_POSITION_IN_BOX,\n  RECORD_DICE_LOG,\n  LOG_MESSAGE,\n  SET_PLAYER_PERSISTENCE,\n  ENABLE_DICE,\n  END_GAME,\n  ADD_SNAKE_BITE,\n  ADD_LADDER_HIKE,\n  RESTART_GAME,\n  REDRAW\n} from '../actions/GameActions';\n\nconst firstPlayerColor = getRandomColor();\nconst initialState = {\n  status: GAME_ON,\n  dice: {\n    disabled: false\n  },\n  messages: [\n    'Start rolling'\n  ],\n  grid: {\n    layout: getLayout(GRID_WIDTH, GRID_HEIGHT),\n    width: GRID_WIDTH,\n    height: GRID_HEIGHT,\n    occupancy: _initializeOccupancy(),\n    box: {\n      height: BOX_HEIGHT,\n      width: BOX_WIDTH\n    }\n  },\n  snakes: getSnakes(),\n  ladders: getLadders(),\n  players: {\n    count: 1,\n    persistence: 1,\n    current: {\n      id: 1,\n      pos: 1,\n      color: firstPlayerColor,\n      path: [1],\n      diceLog: [],\n      boxPosition: -1, //center\n      snakeBites: 0,\n      ladderHikes:0\n    },\n    all: [\n      {\n        id: 1,\n        pos: 1,\n        color: firstPlayerColor,\n        path: [1],\n        diceLog: [],\n        boxPosition: -1, //center\n        snakeBites: 0,\n        ladderHikes:0\n      }\n    ]\n  }\n}\n\nexport function game (state = initialState, action) {\n\n  switch (action.type) {\n    case ADD_NEW_PLAYER:\n      const newPlayer = _generateNewPlayer(state.players.count);\n\n      return {\n          ...state,\n          grid: {\n            ...state.grid,\n            occupancy: {\n              ...state.grid.occupancy,\n              1: state.grid.occupancy[1] + 1\n            }\n          },\n          players: {\n            ...state.players,\n            all: [ ...state.players.all ,newPlayer],\n            count: state.players.count + 1,\n          }\n      };\n\n    case MOVE_PLAYER:\n      let newOccupancy = {};\n      newOccupancy[action.newPos] = state.grid.occupancy[action.newPos] + 1;\n      newOccupancy[state.players.current.pos] = state.grid.occupancy[state.players.current.pos] - 1;\n\n      return {\n        ...state,\n        dice: {\n          ...state.dice,\n          disabled: true\n        },\n        grid: {\n          ...state.grid,\n          occupancy: {\n            ...state.grid.occupancy,\n            ...newOccupancy\n          }\n        },\n        players: {\n          ...state.players,\n          all: state.players.all.map((p) => {\n            if (p.id === state.players.current.id) {\n              return {\n                ...p,\n                pos: action.newPos,\n                boxPosition: -1,\n                path: [...p.path, action.newPos]\n              }\n            }\n            return p;\n          }),\n          current: {\n            ...state.players.current,\n            pos: action.newPos,\n            boxPosition: -1,\n            path: [...state.players.current.path, action.newPos]\n          }\n        }\n      };\n\n    case CHANGE_PLAYER:\n      var nextPlayer = _getNextPlayer(state.players)\n      return {\n        ...state,\n        dice: {\n          disabled: false\n        },\n        players: {\n          ...state.players,\n          current: nextPlayer\n        }\n      };\n\n    case RECORD_DICE_LOG:\n      return {\n        ...state,\n        players: {\n          ...state.players,\n          all: state.players.all.map((p) => {\n            if (p.id === state.players.current.id) {\n              return {\n                ...p,\n                diceLog: [...p.diceLog, action.diceResult]\n              }\n            }\n            return p;\n          }),\n          current: {\n            ...state.players.current,\n            diceLog: [...state.players.current.diceLog, action.diceResult]\n          }\n        }\n      };\n\n    case CHANGE_PLAYER_POSITION_IN_BOX:\n      let curPlayer = state.players.current.id === action.playerId\n                      ?\n                      { ...state.players.current, boxPosition: action.newBoxPosition }\n                      : state.players.current\n      return {\n        ...state,\n        players: {\n          ...state.players,\n          all: state.players.all.map((p) => {\n            if (p.id === action.playerId) {\n              return {\n                ...p,\n                boxPosition: action.newBoxPosition\n              }\n            }\n            return p;\n          }),\n          current: curPlayer\n        }\n      };\n\n    case LOG_MESSAGE:\n      return {\n        ...state,\n        messages: [action.message, ...state.messages]\n      };\n\n    case SET_PLAYER_PERSISTENCE:\n      return {\n        ...state,\n        players: {\n          ...state.players,\n          persistence: action.persistence\n        }\n      };\n\n    case ENABLE_DICE:\n      return {\n        ...state,\n        dice: {\n          ...state.dice,\n          disabled: false\n        }\n      };\n\n    case END_GAME:\n      return {\n        ...state,\n        status: GAME_OVER\n      };\n\n    case ADD_SNAKE_BITE:\n      const newSnakeBites = state.players.current.snakeBites + 1;\n      return {\n        ...state,\n        players: {\n          ...state.players,\n          all: state.players.all.map((p) => {\n            if (p.id === state.players.current.id) {\n              return {\n                ...p,\n                snakeBites: newSnakeBites\n              }\n            }\n            return p;\n          }),\n          current: {\n            ...state.players.current,\n            snakeBites: newSnakeBites\n          }\n        }\n      }\n\n    case ADD_LADDER_HIKE:\n      const newLadderHikes = state.players.current.ladderHikes + 1;\n      return {\n        ...state,\n        players: {\n          ...state.players,\n          all: state.players.all.map((p) => {\n            if (p.id === state.players.current.id) {\n              return {\n                ...p,\n                ladderHikes: newLadderHikes\n              }\n            }\n            return p;\n          }),\n          current: {\n            ...state.players.current,\n            ladderHikes: newLadderHikes\n          }\n        }\n      };\n\n    case RESTART_GAME:\n      return initialState;\n\n    case REDRAW:\n      let newGrid = {};\n      let newWidth = action.width - 32;\n      let newHeight = action.height - 32;\n      newWidth = newWidth > 672 ? newWidth / 2 : newWidth;\n      newGrid = {\n        layout: getLayout(newWidth, newWidth),\n        width: newWidth,\n        height: newWidth,\n        box: {\n          height: newWidth / 10,\n          width: newWidth / 10\n        }\n      }\n      return {\n        ...state,\n        grid: {\n          ...state.grid,\n          ...newGrid\n        }\n      }\n\n    default:\n      return state;\n  }\n}\n\n/*\n * Private functions\n */\n\nfunction _generateNewPlayer (curCount) {\n  return {\n    id: curCount + 1,\n    color: getRandomColor(),\n    pos: 1,\n    path: [1],\n    diceLog: [],\n    boxPosition: -1, //center\n    snakeBites: 0,\n    ladderHikes: 0,\n  }\n}\n\nfunction _getNextPlayer ({all, current, count}) {\n  return current.id === count ? all[0] : all.filter((p) => p.id === current.id + 1 )[0];\n}\n\nfunction _initializeOccupancy () {\n  var occupacy = {};\n  occupacy[1] = 1;\n  for (let i=2; i<=100; i++) {\n    occupacy[i] = 0;\n  }\n  return occupacy;\n}\n"]},"metadata":{},"sourceType":"module"}