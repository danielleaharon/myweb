{"ast":null,"code":"import React from'react';import{StyledCell}from'../styles/StyledCellPreview';import{TETROMINOS}from'../tetrominos';// React.memo makes sure we only re-render the changed cells\nvar CellPreview=function CellPreview(_ref){var size=_ref.size,type=_ref.type,text=_ref.text,shape=_ref.shape,delay=_ref.delay,left=_ref.left;return React.createElement(\"div\",{className:\"preview-cell\",style:{'--delay':delay,'--left':left}},shape.map(function(item,index){if(item.filter(function(x){return x!==0;}).length>0){return React.createElement(\"div\",null,item.map(function(cube,indexCube){return React.createElement(StyledCell,{type:cube,size:size,color:cube!==0&&TETROMINOS[cube].color,title:cube!==0&&text!==null&&text[index][indexCube]});}));}}));};export default React.memo(CellPreview);","map":{"version":3,"sources":["/Users/user/Desktop/עבודות להגשה/myweb/src/components/tetris/components/CellPreview.js"],"names":["React","StyledCell","TETROMINOS","CellPreview","size","type","text","shape","delay","left","map","item","index","filter","x","length","cube","indexCube","color","memo"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,UAAT,KAA2B,6BAA3B,CACA,OAASC,UAAT,KAA2B,eAA3B,CAEA;AACA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,UAAGC,CAAAA,IAAH,MAAGA,IAAH,CAAQC,IAAR,MAAQA,IAAR,CAAaC,IAAb,MAAaA,IAAb,CAAkBC,KAAlB,MAAkBA,KAAlB,CAAwBC,KAAxB,MAAwBA,KAAxB,CAA+BC,IAA/B,MAA+BA,IAA/B,OAClB,4BAAK,SAAS,CAAC,cAAf,CAA6B,KAAK,CAAE,CAAC,UAAUD,KAAX,CAAiB,SAASC,IAA1B,CAApC,EAEGF,KAAK,CAACG,GAAN,CAAU,SAACC,IAAD,CAAMC,KAAN,CAAc,CACxB,GAAGD,IAAI,CAACE,MAAL,CAAY,SAAAC,CAAC,QAAEA,CAAAA,CAAC,GAAG,CAAN,EAAb,EAAsBC,MAAtB,CAA6B,CAAhC,CAAkC,CACjC,MAAS,gCAAOJ,IAAI,CAACD,GAAL,CAAS,SAACM,IAAD,CAAOC,SAAP,CAAmB,CAC1C,MAAO,qBAAC,UAAD,EAAY,IAAI,CAAED,IAAlB,CAAyB,IAAI,CAAEZ,IAA/B,CAAqC,KAAK,CAAEY,IAAI,GAAG,CAAP,EAAUd,UAAU,CAACc,IAAD,CAAV,CAAiBE,KAAvE,CAA8E,KAAK,CAAEF,IAAI,GAAG,CAAP,EAAUV,IAAI,GAAG,IAAjB,EAAuBA,IAAI,CAACM,KAAD,CAAJ,CAAYK,SAAZ,CAA5G,EAAP,CAED,CAHe,CAAP,CAAT,CAMA,CACD,CATA,CAFH,CADkB,EAApB,CAkBA,cAAejB,CAAAA,KAAK,CAACmB,IAAN,CAAWhB,WAAX,CAAf","sourcesContent":["import React from 'react';\nimport { StyledCell } from '../styles/StyledCellPreview';\nimport { TETROMINOS } from '../tetrominos';\n\n// React.memo makes sure we only re-render the changed cells\nconst CellPreview = ({ size,type,text,shape,delay, left }) => (\n  <div className='preview-cell'style={{'--delay':delay,'--left':left}}>\n    \n    {shape.map((item,index)=>{\n     if(item.filter(x=>x!==0).length>0){\n      return   <div >{item.map((cube, indexCube)=>{\n        return <StyledCell type={cube}  size={size} color={cube!==0&&TETROMINOS[cube].color} title={cube!==0&&text!==null&&text[index][indexCube]}>\n        </StyledCell>\n      })}\n    \n   </div>\n     }\n    }  \n    \n)}\n</div>\n);\n\nexport default React.memo(CellPreview);"]},"metadata":{},"sourceType":"module"}