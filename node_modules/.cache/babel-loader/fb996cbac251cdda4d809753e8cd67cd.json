{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport Transition from '../transitions/transition';\n\nconst noop = () => {};\n\nexport const TRANSITION_EVENTS = {\n  BREAK: 1,\n  SNAP_TO_END: 2,\n  IGNORE: 3\n};\n\nconst DEFAULT_EASING = t => t;\n\nconst DEFAULT_INTERRUPTION = TRANSITION_EVENTS.BREAK;\nexport default class TransitionManager {\n  constructor(opts) {\n    _defineProperty(this, \"getControllerState\", void 0);\n\n    _defineProperty(this, \"props\", void 0);\n\n    _defineProperty(this, \"propsInTransition\", void 0);\n\n    _defineProperty(this, \"transition\", void 0);\n\n    _defineProperty(this, \"onViewStateChange\", void 0);\n\n    _defineProperty(this, \"onStateChange\", void 0);\n\n    _defineProperty(this, \"_onTransitionUpdate\", transition => {\n      const {\n        time,\n        settings: {\n          interpolator,\n          startProps,\n          endProps,\n          duration,\n          easing\n        }\n      } = transition;\n      const t = easing(time / duration);\n      const viewport = interpolator.interpolateProps(startProps, endProps, t);\n      this.propsInTransition = this.getControllerState({ ...this.props,\n        ...viewport\n      }).getViewportProps();\n      this.onViewStateChange({\n        viewState: this.propsInTransition,\n        oldViewState: this.props\n      });\n    });\n\n    this.getControllerState = opts.getControllerState;\n    this.propsInTransition = null;\n    this.transition = new Transition(opts.timeline);\n    this.onViewStateChange = opts.onViewStateChange || noop;\n    this.onStateChange = opts.onStateChange || noop;\n  }\n\n  finalize() {\n    this.transition.cancel();\n  }\n\n  getViewportInTransition() {\n    return this.propsInTransition;\n  }\n\n  processViewStateChange(nextProps) {\n    let transitionTriggered = false;\n    const currentProps = this.props;\n    this.props = nextProps;\n\n    if (!currentProps || this._shouldIgnoreViewportChange(currentProps, nextProps)) {\n      return false;\n    }\n\n    if (this._isTransitionEnabled(nextProps)) {\n      let startProps = currentProps;\n\n      if (this.transition.inProgress) {\n        const {\n          interruption,\n          endProps\n        } = this.transition.settings;\n        startProps = { ...currentProps,\n          ...(interruption === TRANSITION_EVENTS.SNAP_TO_END ? endProps : this.propsInTransition || currentProps)\n        };\n      }\n\n      this._triggerTransition(startProps, nextProps);\n\n      transitionTriggered = true;\n    } else {\n      this.transition.cancel();\n    }\n\n    return transitionTriggered;\n  }\n\n  updateTransition() {\n    this.transition.update();\n  }\n\n  _isTransitionEnabled(props) {\n    const {\n      transitionDuration,\n      transitionInterpolator\n    } = props;\n    return (transitionDuration > 0 || transitionDuration === 'auto') && Boolean(transitionInterpolator);\n  }\n\n  _isUpdateDueToCurrentTransition(props) {\n    if (this.transition.inProgress && this.propsInTransition) {\n      return this.transition.settings.interpolator.arePropsEqual(props, this.propsInTransition);\n    }\n\n    return false;\n  }\n\n  _shouldIgnoreViewportChange(currentProps, nextProps) {\n    if (this.transition.inProgress) {\n      return this.transition.settings.interruption === TRANSITION_EVENTS.IGNORE || this._isUpdateDueToCurrentTransition(nextProps);\n    }\n\n    if (this._isTransitionEnabled(nextProps)) {\n      return nextProps.transitionInterpolator.arePropsEqual(currentProps, nextProps);\n    }\n\n    return true;\n  }\n\n  _triggerTransition(startProps, endProps) {\n    const startViewstate = this.getControllerState(startProps);\n    const endViewStateProps = this.getControllerState(endProps).shortestPathFrom(startViewstate);\n    const transitionInterpolator = endProps.transitionInterpolator;\n    const duration = transitionInterpolator.getDuration ? transitionInterpolator.getDuration(startProps, endProps) : endProps.transitionDuration;\n\n    if (duration === 0) {\n      return;\n    }\n\n    const initialProps = transitionInterpolator.initializeProps(startProps, endViewStateProps);\n    this.propsInTransition = {};\n    const transitionSettings = {\n      duration,\n      easing: endProps.transitionEasing || DEFAULT_EASING,\n      interpolator: transitionInterpolator,\n      interruption: endProps.transitionInterruption || DEFAULT_INTERRUPTION,\n      startProps: initialProps.start,\n      endProps: initialProps.end,\n      onStart: endProps.onTransitionStart,\n      onUpdate: this._onTransitionUpdate,\n      onInterrupt: this._onTransitionEnd(endProps.onTransitionInterrupt),\n      onEnd: this._onTransitionEnd(endProps.onTransitionEnd)\n    };\n    this.transition.start(transitionSettings);\n    this.onStateChange({\n      inTransition: true\n    });\n    this.updateTransition();\n  }\n\n  _onTransitionEnd(callback) {\n    return transition => {\n      this.propsInTransition = null;\n      this.onStateChange({\n        inTransition: false,\n        isZooming: false,\n        isPanning: false,\n        isRotating: false\n      });\n      callback === null || callback === void 0 ? void 0 : callback(transition);\n    };\n  }\n\n}","map":{"version":3,"sources":["../../../src/controllers/transition-manager.ts"],"names":["noop","TRANSITION_EVENTS","BREAK","SNAP_TO_END","IGNORE","DEFAULT_EASING","t","DEFAULT_INTERRUPTION","constructor","opts","finalize","getViewportInTransition","processViewStateChange","transitionTriggered","currentProps","startProps","endProps","interruption","updateTransition","_isTransitionEnabled","transitionInterpolator","transitionDuration","Boolean","_isUpdateDueToCurrentTransition","_shouldIgnoreViewportChange","nextProps","_triggerTransition","startViewstate","endViewStateProps","duration","initialProps","transitionSettings","easing","interpolator","onStart","onUpdate","onInterrupt","onEnd","inTransition","_onTransitionEnd","transition","isZooming","isPanning","isRotating","callback","settings","time","viewport","viewState","oldViewState","props"],"mappings":"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","sourcesContent":["import Transition, {TransitionSettings as BaseTransitionSettings} from '../transitions/transition';\nimport TransitionInterpolator from '../transitions/transition-interpolator';\nimport type {IViewState} from './view-state';\n\nimport type {Timeline} from '@luma.gl/core';\nimport type {InteractionState} from './controller';\n\nconst noop = () => {};\n\n// Enums cannot be directly exported as they are not transpiled correctly into ES5, see https://github.com/visgl/deck.gl/issues/7130\nexport const TRANSITION_EVENTS = {\n  BREAK: 1,\n  SNAP_TO_END: 2,\n  IGNORE: 3\n} as const;\n\ntype TransitionEvent = 1 | 2 | 3;\n\nexport type TransitionProps = {\n  /** Transition duration in milliseconds, default value 0, implies no transition. When using `FlyToInterpolator`, it can also be set to `'auto'`. */\n  transitionDuration?: number | 'auto';\n  /** An interpolator object that defines the transition behavior between two viewports. */\n  transitionInterpolator?: TransitionInterpolator;\n  /** Easing function that can be used to achieve effects like \"Ease-In-Cubic\", \"Ease-Out-Cubic\", etc. Default value performs Linear easing. */\n  transitionEasing?: (t: number) => number;\n  /** Controls how to process a new view state change that occurs during an existing transition. */\n  transitionInterruption?: TransitionEvent;\n  /** Callback fired when requested transition starts. */\n  onTransitionStart?: (transition: Transition) => void;\n  /** Callback fired when requested transition is interrupted. */\n  onTransitionInterrupt?: (transition: Transition) => void;\n  /** Callback fired when requested transition ends. */\n  onTransitionEnd?: (transition: Transition) => void;\n};\n\nconst DEFAULT_EASING = t => t;\nconst DEFAULT_INTERRUPTION = TRANSITION_EVENTS.BREAK;\n\ntype TransitionSettings = BaseTransitionSettings & {\n  interpolator: TransitionInterpolator;\n  easing: (t: number) => number;\n  interruption: TransitionEvent;\n  startProps: Record<string, any>;\n  endProps: Record<string, any>;\n};\n\nexport default class TransitionManager<ControllerState extends IViewState<ControllerState>> {\n  getControllerState: (props: any) => ControllerState;\n  props?: TransitionProps;\n  propsInTransition: Record<string, any> | null;\n  transition: Transition;\n  onViewStateChange: (params: {\n    viewState: Record<string, any>;\n    oldViewState: Record<string, any>;\n  }) => void;\n  onStateChange: (state: InteractionState) => void;\n\n  constructor(opts: {\n    timeline: Timeline;\n    getControllerState: (props: any) => ControllerState;\n    onViewStateChange?: (params: {\n      viewState: Record<string, any>;\n      oldViewState: Record<string, any>;\n    }) => void;\n    onStateChange?: (state: InteractionState) => void;\n  }) {\n    this.getControllerState = opts.getControllerState;\n    this.propsInTransition = null;\n    this.transition = new Transition(opts.timeline);\n\n    this.onViewStateChange = opts.onViewStateChange || noop;\n    this.onStateChange = opts.onStateChange || noop;\n  }\n\n  finalize(): void {\n    this.transition.cancel();\n  }\n\n  // Returns current transitioned viewport.\n  getViewportInTransition(): Record<string, any> | null {\n    return this.propsInTransition;\n  }\n\n  // Process the vewiport change, either ignore or trigger a new transition.\n  // Return true if a new transition is triggered, false otherwise.\n  processViewStateChange(nextProps: TransitionProps) {\n    let transitionTriggered = false;\n    const currentProps = this.props;\n    // Set this.props here as '_triggerTransition' calls '_updateViewport' that uses this.props.\n    this.props = nextProps;\n\n    // NOTE: Be cautious re-ordering statements in this function.\n    if (!currentProps || this._shouldIgnoreViewportChange(currentProps, nextProps)) {\n      return false;\n    }\n\n    if (this._isTransitionEnabled(nextProps)) {\n      let startProps = currentProps;\n      if (this.transition.inProgress) {\n        const {interruption, endProps} = this.transition.settings as TransitionSettings;\n        startProps = {\n          ...currentProps,\n          ...(interruption === TRANSITION_EVENTS.SNAP_TO_END\n            ? endProps\n            : this.propsInTransition || currentProps)\n        };\n      }\n\n      this._triggerTransition(startProps, nextProps);\n\n      transitionTriggered = true;\n    } else {\n      this.transition.cancel();\n    }\n\n    return transitionTriggered;\n  }\n\n  updateTransition() {\n    this.transition.update();\n  }\n\n  // Helper methods\n\n  _isTransitionEnabled(props: TransitionProps): boolean {\n    const {transitionDuration, transitionInterpolator} = props;\n    return (\n      ((transitionDuration as number) > 0 || transitionDuration === 'auto') &&\n      Boolean(transitionInterpolator)\n    );\n  }\n\n  _isUpdateDueToCurrentTransition(props: TransitionProps): boolean {\n    if (this.transition.inProgress && this.propsInTransition) {\n      return (this.transition.settings as TransitionSettings).interpolator.arePropsEqual(\n        props,\n        this.propsInTransition\n      );\n    }\n    return false;\n  }\n\n  _shouldIgnoreViewportChange(currentProps: TransitionProps, nextProps: TransitionProps): boolean {\n    if (this.transition.inProgress) {\n      // Ignore update if it is requested to be ignored\n      return (\n        (this.transition.settings as TransitionSettings).interruption ===\n          TRANSITION_EVENTS.IGNORE ||\n        // Ignore update if it is due to current active transition.\n        this._isUpdateDueToCurrentTransition(nextProps)\n      );\n    }\n    if (this._isTransitionEnabled(nextProps)) {\n      // Ignore if none of the viewport props changed.\n      return (nextProps.transitionInterpolator as TransitionInterpolator).arePropsEqual(\n        currentProps,\n        nextProps\n      );\n    }\n    return true;\n  }\n\n  _triggerTransition(startProps: TransitionProps, endProps: TransitionProps): void {\n    const startViewstate = this.getControllerState(startProps);\n    const endViewStateProps = this.getControllerState(endProps).shortestPathFrom(startViewstate);\n\n    // update transitionDuration for 'auto' mode\n    const transitionInterpolator = endProps.transitionInterpolator as TransitionInterpolator;\n    const duration = transitionInterpolator.getDuration\n      ? transitionInterpolator.getDuration(startProps, endProps)\n      : (endProps.transitionDuration as number);\n\n    if (duration === 0) {\n      return;\n    }\n\n    const initialProps = transitionInterpolator.initializeProps(startProps, endViewStateProps);\n\n    this.propsInTransition = {};\n    const transitionSettings: TransitionSettings = {\n      duration,\n      easing: endProps.transitionEasing || DEFAULT_EASING,\n      interpolator: transitionInterpolator,\n      interruption: endProps.transitionInterruption || DEFAULT_INTERRUPTION,\n\n      startProps: initialProps.start,\n      endProps: initialProps.end,\n\n      onStart: endProps.onTransitionStart,\n      onUpdate: this._onTransitionUpdate,\n      onInterrupt: this._onTransitionEnd(endProps.onTransitionInterrupt),\n      onEnd: this._onTransitionEnd(endProps.onTransitionEnd)\n    };\n    this.transition.start(transitionSettings);\n\n    this.onStateChange({inTransition: true});\n\n    this.updateTransition();\n  }\n\n  _onTransitionEnd(callback?: (transition: Transition) => void) {\n    return transition => {\n      this.propsInTransition = null;\n\n      this.onStateChange({\n        inTransition: false,\n        isZooming: false,\n        isPanning: false,\n        isRotating: false\n      });\n\n      callback?.(transition);\n    };\n  }\n\n  _onTransitionUpdate = transition => {\n    // NOTE: Be cautious re-ordering statements in this function.\n    const {\n      time,\n      settings: {interpolator, startProps, endProps, duration, easing}\n    } = transition;\n    const t = easing(time / duration);\n    const viewport = interpolator.interpolateProps(startProps, endProps, t);\n\n    // This gurantees all props (e.g. bearing, longitude) are normalized\n    // So when viewports are compared they are in same range.\n    this.propsInTransition = this.getControllerState({\n      ...this.props,\n      ...viewport\n    }).getViewportProps();\n\n    this.onViewStateChange({\n      viewState: this.propsInTransition,\n      oldViewState: this.props as TransitionProps\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}