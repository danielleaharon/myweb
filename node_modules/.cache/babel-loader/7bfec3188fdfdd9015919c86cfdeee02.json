{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Layer, project32, gouraudLighting, phongLighting, picking, UNIT } from '@deck.gl/core';\nimport { Model, isWebGL2, hasFeature, FEATURES } from '@luma.gl/core';\nimport ColumnGeometry from './column-geometry';\nimport vs from './column-layer-vertex.glsl';\nimport fs from './column-layer-fragment.glsl';\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultProps = {\n  diskResolution: {\n    type: 'number',\n    min: 4,\n    value: 20\n  },\n  vertices: null,\n  radius: {\n    type: 'number',\n    min: 0,\n    value: 1000\n  },\n  angle: {\n    type: 'number',\n    value: 0\n  },\n  offset: {\n    type: 'array',\n    value: [0, 0]\n  },\n  coverage: {\n    type: 'number',\n    min: 0,\n    max: 1,\n    value: 1\n  },\n  elevationScale: {\n    type: 'number',\n    min: 0,\n    value: 1\n  },\n  radiusUnits: 'meters',\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  extruded: true,\n  wireframe: false,\n  filled: true,\n  stroked: false,\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getLineWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  getElevation: {\n    type: 'accessor',\n    value: 1000\n  },\n  material: true,\n  getColor: {\n    deprecatedFor: ['getFillColor', 'getLineColor']\n  }\n};\nexport default class ColumnLayer extends Layer {\n  getShaders() {\n    const {\n      gl\n    } = this.context;\n    const transpileToGLSL100 = !isWebGL2(gl);\n    const defines = {};\n    const useDerivatives = this.props.flatShading && hasFeature(gl, FEATURES.GLSL_DERIVATIVES);\n\n    if (useDerivatives) {\n      defines.FLAT_SHADING = 1;\n    }\n\n    return super.getShaders({\n      vs,\n      fs,\n      defines,\n      transpileToGLSL100,\n      modules: [project32, useDerivatives ? phongLighting : gouraudLighting, picking]\n    });\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceElevations: {\n        size: 1,\n        transition: true,\n        accessor: 'getElevation'\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        type: 5121,\n        normalized: true,\n        transition: true,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        type: 5121,\n        normalized: true,\n        transition: true,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getLineWidth',\n        transition: true\n      }\n    });\n  }\n\n  updateState(params) {\n    super.updateState(params);\n    const {\n      props,\n      oldProps,\n      changeFlags\n    } = params;\n    const regenerateModels = changeFlags.extensionsChanged || props.flatShading !== oldProps.flatShading;\n\n    if (regenerateModels) {\n      var _this$state$model;\n\n      const {\n        gl\n      } = this.context;\n      (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n\n    if (regenerateModels || props.diskResolution !== oldProps.diskResolution || props.vertices !== oldProps.vertices || (props.extruded || props.stroked) !== (oldProps.extruded || oldProps.stroked)) {\n      this._updateGeometry(props);\n    }\n  }\n\n  getGeometry(diskResolution, vertices, hasThinkness) {\n    const geometry = new ColumnGeometry({\n      radius: 1,\n      height: hasThinkness ? 2 : 0,\n      vertices,\n      nradial: diskResolution\n    });\n    let meanVertexDistance = 0;\n\n    if (vertices) {\n      for (let i = 0; i < diskResolution; i++) {\n        const p = vertices[i];\n        const d = Math.sqrt(p[0] * p[0] + p[1] * p[1]);\n        meanVertexDistance += d / diskResolution;\n      }\n    } else {\n      meanVertexDistance = 1;\n    }\n\n    this.setState({\n      edgeDistance: Math.cos(Math.PI / diskResolution) * meanVertexDistance\n    });\n    return geometry;\n  }\n\n  _getModel(gl) {\n    return new Model(gl, { ...this.getShaders(),\n      id: this.props.id,\n      isInstanced: true\n    });\n  }\n\n  _updateGeometry({\n    diskResolution,\n    vertices,\n    extruded,\n    stroked\n  }) {\n    const geometry = this.getGeometry(diskResolution, vertices, extruded || stroked);\n    this.setState({\n      fillVertexCount: geometry.attributes.POSITION.value.length / 3,\n      wireframeVertexCount: geometry.indices.value.length\n    });\n    this.state.model.setProps({\n      geometry\n    });\n  }\n\n  draw({\n    uniforms\n  }) {\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      radiusUnits,\n      elevationScale,\n      extruded,\n      filled,\n      stroked,\n      wireframe,\n      offset,\n      coverage,\n      radius,\n      angle\n    } = this.props;\n    const {\n      model,\n      fillVertexCount,\n      wireframeVertexCount,\n      edgeDistance\n    } = this.state;\n    model.setUniforms(uniforms).setUniforms({\n      radius,\n      angle: angle / 180 * Math.PI,\n      offset,\n      extruded,\n      stroked,\n      coverage,\n      elevationScale,\n      edgeDistance,\n      radiusUnits: UNIT[radiusUnits],\n      widthUnits: UNIT[lineWidthUnits],\n      widthScale: lineWidthScale,\n      widthMinPixels: lineWidthMinPixels,\n      widthMaxPixels: lineWidthMaxPixels\n    });\n\n    if (extruded && wireframe) {\n      model.setProps({\n        isIndexed: true\n      });\n      model.setVertexCount(wireframeVertexCount).setDrawMode(1).setUniforms({\n        isStroke: true\n      }).draw();\n    }\n\n    if (filled) {\n      model.setProps({\n        isIndexed: false\n      });\n      model.setVertexCount(fillVertexCount).setDrawMode(5).setUniforms({\n        isStroke: false\n      }).draw();\n    }\n\n    if (!extruded && stroked) {\n      model.setProps({\n        isIndexed: false\n      });\n      model.setVertexCount(fillVertexCount * 2 / 3).setDrawMode(5).setUniforms({\n        isStroke: true\n      }).draw();\n    }\n  }\n\n}\n\n_defineProperty(ColumnLayer, \"layerName\", 'ColumnLayer');\n\n_defineProperty(ColumnLayer, \"defaultProps\", defaultProps);","map":{"version":3,"sources":["../../../src/column-layer/column-layer.ts"],"names":["DEFAULT_COLOR","defaultProps","diskResolution","type","min","value","vertices","radius","angle","offset","coverage","max","elevationScale","radiusUnits","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","Number","extruded","wireframe","filled","stroked","getPosition","x","position","getFillColor","getLineColor","getLineWidth","getElevation","material","getColor","deprecatedFor","ColumnLayer","getShaders","gl","transpileToGLSL100","isWebGL2","defines","useDerivatives","hasFeature","FEATURES","modules","initializeState","attributeManager","instancePositions","size","fp64","transition","accessor","instanceElevations","instanceFillColors","normalized","defaultValue","instanceLineColors","instanceStrokeWidths","updateState","changeFlags","regenerateModels","props","oldProps","getGeometry","geometry","height","hasThinkness","nradial","meanVertexDistance","i","p","d","Math","edgeDistance","_getModel","id","isInstanced","_updateGeometry","fillVertexCount","wireframeVertexCount","length","draw","uniforms","model","UNIT","widthUnits","widthScale","widthMinPixels","widthMaxPixels","isIndexed","isStroke"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Layer,\n  project32,\n  gouraudLighting,\n  phongLighting,\n  picking,\n  UNIT,\n  LayerProps,\n  UpdateParameters,\n  Unit,\n  AccessorFunction,\n  Position,\n  Accessor,\n  Color,\n  Material,\n  DefaultProps\n} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, isWebGL2, hasFeature, FEATURES} from '@luma.gl/core';\nimport ColumnGeometry from './column-geometry';\n\nimport vs from './column-layer-vertex.glsl';\nimport fs from './column-layer-fragment.glsl';\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<ColumnLayerProps> = {\n  diskResolution: {type: 'number', min: 4, value: 20},\n  vertices: null,\n  radius: {type: 'number', min: 0, value: 1000},\n  angle: {type: 'number', value: 0},\n  offset: {type: 'array', value: [0, 0]},\n  coverage: {type: 'number', min: 0, max: 1, value: 1},\n  elevationScale: {type: 'number', min: 0, value: 1},\n  radiusUnits: 'meters',\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  extruded: true,\n  wireframe: false,\n  filled: true,\n  stroked: false,\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineWidth: {type: 'accessor', value: 1},\n  getElevation: {type: 'accessor', value: 1000},\n  material: true,\n  getColor: {deprecatedFor: ['getFillColor', 'getLineColor']}\n};\n\n/** All properties supported by ColumnLayer. */\nexport type ColumnLayerProps<DataT = any> = _ColumnLayerProps<DataT> & LayerProps<DataT>;\n\n/** Properties added by ColumnLayer. */\ntype _ColumnLayerProps<DataT> = {\n  /**\n   * The number of sides to render the disk as.\n   * @default 20\n   */\n  diskResolution?: number;\n\n  /**\n   * isk size in units specified by `radiusUnits`.\n   * @default 1000\n   */\n  radius?: number;\n\n  /**\n   * Disk rotation, counter-clockwise in degrees.\n   * @default 0\n   */\n  angle?: number;\n\n  /**\n   * Replace the default geometry (regular polygon that fits inside the unit circle) with a custom one.\n   * @default null\n   */\n  vertices: Position[] | null;\n\n  /**\n   * Disk offset from the position, relative to the radius.\n   * @default [0,0]\n   */\n  offset?: [number, number];\n\n  /**\n   * Radius multiplier, between 0 - 1\n   * @default 1\n   */\n  coverage?: number;\n\n  /**\n   * Column elevation multiplier.\n   * @default 1\n   */\n  elevationScale?: number;\n\n  /**\n   * Whether to draw a filled column (solid fill).\n   * @default true\n   */\n  filled?: boolean;\n\n  /**\n   * Whether to draw an outline around the disks.\n   * @default false\n   */\n  stroked?: boolean;\n\n  /**\n   * Whether to extrude the columns. If set to `false`, all columns will be rendered as flat polygons.\n   * @default true\n   */\n  extruded?: boolean;\n\n  /**\n   * Whether to generate a line wireframe of the column.\n   * @default false\n   */\n  wireframe?: boolean;\n\n  /**\n   * If `true`, the vertical surfaces of the columns use [flat shading](https://en.wikipedia.org/wiki/Shading#Flat_vs._smooth_shading).\n   * @default false\n   */\n  flatShading?: boolean;\n\n  /**\n   * The units of the radius.\n   * @default 'meters'\n   */\n  radiusUnits?: Unit;\n\n  /**\n   * The units of the line width.\n   * @default 'meters'\n   */\n  lineWidthUnits?: Unit;\n\n  /**\n   * The line width multiplier that multiplied to all outlines.\n   * @default 1\n   */\n  lineWidthScale?: number;\n\n  /**\n   * The minimum outline width in pixels.\n   * @default 0\n   */\n  lineWidthMinPixels?: number;\n\n  /**\n   * The maximum outline width in pixels.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  lineWidthMaxPixels?: number;\n\n  /**\n   * Material settings for lighting effect. Applies if `extruded: true`.\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting\n   */\n  material?: Material;\n\n  /**\n   * Method called to retrieve the position of each column.\n   * @default object => object.position\n   */\n  getPosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * @deprecated Use getFilledColor and getLineColor instead\n   */\n  getColor?: Accessor<DataT, Color>;\n\n  /**\n   * Fill collor value or accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getFillColor?: Accessor<DataT, Color>;\n\n  /**\n   * Line color value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getLineColor?: Accessor<DataT, Color>;\n\n  /**\n   * The elevation of each cell in meters.\n   * @default 1000\n   */\n  getElevation?: Accessor<DataT, number>;\n\n  /**\n   * The width of the outline of the column, in units specified by `lineWidthUnits`.\n   *\n   * @default 1\n   */\n  getLineWidth?: Accessor<DataT, number>;\n};\n\n/** Render extruded cylinders (tessellated regular polygons) at given coordinates. */\nexport default class ColumnLayer<DataT = any, ExtraPropsT = {}> extends Layer<\n  ExtraPropsT & Required<_ColumnLayerProps<DataT>>\n> {\n  static layerName = 'ColumnLayer';\n  static defaultProps = defaultProps;\n\n  getShaders() {\n    const {gl} = this.context;\n    const transpileToGLSL100 = !isWebGL2(gl);\n    const defines: Record<string, any> = {};\n\n    const useDerivatives = this.props.flatShading && hasFeature(gl, FEATURES.GLSL_DERIVATIVES);\n    if (useDerivatives) {\n      defines.FLAT_SHADING = 1;\n    }\n    return super.getShaders({\n      vs,\n      fs,\n      defines,\n      transpileToGLSL100,\n      modules: [project32, useDerivatives ? phongLighting : gouraudLighting, picking]\n    });\n  }\n\n  /**\n   * DeckGL calls initializeState when GL context is available\n   * Essentially a deferred constructor\n   */\n  initializeState() {\n    const attributeManager = this.getAttributeManager()!;\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceElevations: {\n        size: 1,\n        transition: true,\n        accessor: 'getElevation'\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getFillColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getLineColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getLineWidth',\n        transition: true\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState(params: UpdateParameters<this>): void {\n    super.updateState(params);\n\n    const {props, oldProps, changeFlags} = params;\n    const regenerateModels =\n      changeFlags.extensionsChanged || props.flatShading !== oldProps.flatShading;\n\n    if (regenerateModels) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager()!.invalidateAll();\n    }\n\n    if (\n      regenerateModels ||\n      props.diskResolution !== oldProps.diskResolution ||\n      props.vertices !== oldProps.vertices ||\n      (props.extruded || props.stroked) !== (oldProps.extruded || oldProps.stroked)\n    ) {\n      this._updateGeometry(props);\n    }\n  }\n\n  getGeometry(diskResolution: number, vertices: number[] | undefined, hasThinkness: boolean) {\n    const geometry = new ColumnGeometry({\n      radius: 1,\n      height: hasThinkness ? 2 : 0,\n      vertices,\n      nradial: diskResolution\n    });\n\n    let meanVertexDistance = 0;\n    if (vertices) {\n      for (let i = 0; i < diskResolution; i++) {\n        const p = vertices[i];\n        const d = Math.sqrt(p[0] * p[0] + p[1] * p[1]);\n        meanVertexDistance += d / diskResolution;\n      }\n    } else {\n      meanVertexDistance = 1;\n    }\n    this.setState({\n      edgeDistance: Math.cos(Math.PI / diskResolution) * meanVertexDistance\n    });\n\n    return geometry;\n  }\n\n  protected _getModel(gl: WebGLRenderingContext): Model {\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      isInstanced: true\n    });\n  }\n\n  protected _updateGeometry({diskResolution, vertices, extruded, stroked}) {\n    const geometry: any = this.getGeometry(diskResolution, vertices, extruded || stroked);\n\n    this.setState({\n      fillVertexCount: geometry.attributes.POSITION.value.length / 3,\n      wireframeVertexCount: geometry.indices.value.length\n    });\n\n    this.state.model.setProps({geometry});\n  }\n\n  draw({uniforms}) {\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      radiusUnits,\n      elevationScale,\n      extruded,\n      filled,\n      stroked,\n      wireframe,\n      offset,\n      coverage,\n      radius,\n      angle\n    } = this.props;\n    const {model, fillVertexCount, wireframeVertexCount, edgeDistance} = this.state;\n\n    model.setUniforms(uniforms).setUniforms({\n      radius,\n      angle: (angle / 180) * Math.PI,\n      offset,\n      extruded,\n      stroked,\n      coverage,\n      elevationScale,\n      edgeDistance,\n      radiusUnits: UNIT[radiusUnits],\n      widthUnits: UNIT[lineWidthUnits],\n      widthScale: lineWidthScale,\n      widthMinPixels: lineWidthMinPixels,\n      widthMaxPixels: lineWidthMaxPixels\n    });\n\n    // When drawing 3d: draw wireframe first so it doesn't get occluded by depth test\n    if (extruded && wireframe) {\n      model.setProps({isIndexed: true});\n      model\n        .setVertexCount(wireframeVertexCount)\n        .setDrawMode(GL.LINES)\n        .setUniforms({isStroke: true})\n        .draw();\n    }\n    if (filled) {\n      model.setProps({isIndexed: false});\n      model\n        .setVertexCount(fillVertexCount)\n        .setDrawMode(GL.TRIANGLE_STRIP)\n        .setUniforms({isStroke: false})\n        .draw();\n    }\n    // When drawing 2d: draw fill before stroke so that the outline is always on top\n    if (!extruded && stroked) {\n      model.setProps({isIndexed: false});\n      // The width of the stroke is achieved by flattening the side of the cylinder.\n      // Skip the last 1/3 of the vertices which is the top.\n      model\n        .setVertexCount((fillVertexCount * 2) / 3)\n        .setDrawMode(GL.TRIANGLE_STRIP)\n        .setUniforms({isStroke: true})\n        .draw();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}