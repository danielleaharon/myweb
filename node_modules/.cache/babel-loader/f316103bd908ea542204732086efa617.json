{"ast":null,"code":"import * as React from 'react';\nimport { createElement } from 'react';\nimport { inheritsFrom } from './inherits-from';\nimport { Layer, View } from '@deck.gl/core';\nimport { isComponent } from './evaluate-children';\n\nfunction wrapInView(node) {\n  if (typeof node === 'function') {\n    return createElement(View, {}, node);\n  }\n\n  if (Array.isArray(node)) {\n    return node.map(wrapInView);\n  }\n\n  if (isComponent(node)) {\n    if (node.type === React.Fragment) {\n      return wrapInView(node.props.children);\n    }\n\n    if (inheritsFrom(node.type, View)) {\n      return node;\n    }\n  }\n\n  return node;\n}\n\nexport default function extractJSXLayers({\n  children,\n  layers = [],\n  views = null\n}) {\n  const reactChildren = [];\n  const jsxLayers = [];\n  const jsxViews = {};\n  React.Children.forEach(wrapInView(children), reactElement => {\n    if (isComponent(reactElement)) {\n      const ElementType = reactElement.type;\n\n      if (inheritsFrom(ElementType, Layer)) {\n        const layer = createLayer(ElementType, reactElement.props);\n        jsxLayers.push(layer);\n      } else {\n        reactChildren.push(reactElement);\n      }\n\n      if (inheritsFrom(ElementType, View) && ElementType !== View && reactElement.props.id) {\n        const view = new ElementType(reactElement.props);\n        jsxViews[view.id] = view;\n      }\n    } else if (reactElement) {\n      reactChildren.push(reactElement);\n    }\n  });\n\n  if (Object.keys(jsxViews).length > 0) {\n    if (Array.isArray(views)) {\n      views.forEach(view => {\n        jsxViews[view.id] = view;\n      });\n    } else if (views) {\n      jsxViews[views.id] = views;\n    }\n\n    views = Object.values(jsxViews);\n  }\n\n  layers = jsxLayers.length > 0 ? [...jsxLayers, ...layers] : layers;\n  return {\n    layers,\n    children: reactChildren,\n    views\n  };\n}\n\nfunction createLayer(LayerType, reactProps) {\n  const props = {};\n  const defaultProps = LayerType.defaultProps || {};\n\n  for (const key in reactProps) {\n    if (defaultProps[key] !== reactProps[key]) {\n      props[key] = reactProps[key];\n    }\n  }\n\n  return new LayerType(props);\n}","map":{"version":3,"sources":["../../../src/utils/extract-jsx-layers.ts"],"names":["createElement","Array","node","isComponent","React","wrapInView","inheritsFrom","layers","views","reactChildren","jsxLayers","jsxViews","reactElement","ElementType","layer","createLayer","view","Object","children","props","defaultProps","LayerType","reactProps"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {createElement} from 'react';\nimport {inheritsFrom} from './inherits-from';\nimport {Layer, View} from '@deck.gl/core';\nimport {isComponent} from './evaluate-children';\nimport type {LayersList} from '@deck.gl/core';\n\n// recursively wrap render callbacks in `View`\nfunction wrapInView(node: React.ReactNode): React.ReactNode {\n  if (typeof node === 'function') {\n    // React.Children does not traverse functions.\n    // All render callbacks must be protected under a <View>\n    // @ts-expect-error View is not a ReactJSXElement constructor. Only used as a temporary wrapper and will be removed in extractJSXLayers\n    return createElement(View, {}, node);\n  }\n  if (Array.isArray(node)) {\n    return node.map(wrapInView);\n  }\n  if (isComponent(node)) {\n    if (node.type === React.Fragment) {\n      return wrapInView(node.props.children);\n    }\n    if (inheritsFrom(node.type, View)) {\n      return node;\n    }\n  }\n  return node;\n}\n\n// extracts any deck.gl layers masquerading as react elements from props.children\nexport default function extractJSXLayers({\n  children,\n  layers = [],\n  views = null\n}: {\n  children?: React.ReactNode;\n  layers?: LayersList;\n  views?: View | View[] | null;\n}): {\n  children: React.ReactNode[];\n  layers: LayersList;\n  views: View | View[] | null;\n} {\n  const reactChildren: React.ReactNode[] = []; // extract real react elements (i.e. not deck.gl layers)\n  const jsxLayers: LayersList = []; // extracted layer from react children, will add to deck.gl layer array\n  const jsxViews: Record<string, View> = {};\n\n  // React.children\n  React.Children.forEach(wrapInView(children), reactElement => {\n    if (isComponent(reactElement)) {\n      // For some reason Children.forEach doesn't filter out `null`s\n      const ElementType = reactElement.type;\n      if (inheritsFrom(ElementType, Layer)) {\n        const layer = createLayer(ElementType, reactElement.props);\n        jsxLayers.push(layer);\n      } else {\n        reactChildren.push(reactElement);\n      }\n\n      // empty id => default view\n      if (inheritsFrom(ElementType, View) && ElementType !== View && reactElement.props.id) {\n        // @ts-ignore Cannot instantiate an abstract class (View)\n        const view = new ElementType(reactElement.props);\n        jsxViews[view.id] = view;\n      }\n    } else if (reactElement) {\n      reactChildren.push(reactElement);\n    }\n  });\n\n  // Avoid modifying views if no JSX views were found\n  if (Object.keys(jsxViews).length > 0) {\n    // If a view is specified in both views prop and JSX, use the one in views\n    if (Array.isArray(views)) {\n      views.forEach(view => {\n        jsxViews[view.id] = view;\n      });\n    } else if (views) {\n      jsxViews[views.id] = views;\n    }\n    views = Object.values(jsxViews);\n  }\n\n  // Avoid modifying layers array if no JSX layers were found\n  layers = jsxLayers.length > 0 ? [...jsxLayers, ...layers] : layers;\n\n  return {layers, children: reactChildren, views};\n}\n\nfunction createLayer(LayerType: typeof Layer, reactProps: any): Layer {\n  const props = {};\n  // Layer.defaultProps is treated as ReactElement.defaultProps and merged into react props\n  // Remove them\n  const defaultProps = LayerType.defaultProps || {};\n  for (const key in reactProps) {\n    if (defaultProps[key] !== reactProps[key]) {\n      props[key] = reactProps[key];\n    }\n  }\n  // @ts-ignore Cannot instantiate an abstract class (Layer)\n  return new LayerType(props);\n}\n"]},"metadata":{},"sourceType":"module"}