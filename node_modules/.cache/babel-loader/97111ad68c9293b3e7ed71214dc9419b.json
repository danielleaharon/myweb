{"ast":null,"code":"import { cloneElement } from 'react';\nconst MAP_STYLE = {\n  position: 'absolute',\n  zIndex: -1\n};\nexport default function evaluateChildren(children, childProps) {\n  if (typeof children === 'function') {\n    return children(childProps);\n  }\n\n  if (Array.isArray(children)) {\n    return children.map(child => evaluateChildren(child, childProps));\n  }\n\n  if (isComponent(children)) {\n    if (isReactMap(children)) {\n      childProps.style = MAP_STYLE;\n      return cloneElement(children, childProps);\n    }\n\n    if (needsDeckGLViewProps(children)) {\n      return cloneElement(children, childProps);\n    }\n  }\n\n  return children;\n}\nexport function isComponent(child) {\n  return child && typeof child === 'object' && 'type' in child || false;\n}\n\nfunction isReactMap(child) {\n  const componentClass = child.type;\n  const componentProps = componentClass && componentClass.defaultProps;\n  return componentProps && componentProps.mapStyle;\n}\n\nfunction needsDeckGLViewProps(child) {\n  const componentClass = child.type;\n  return componentClass && componentClass.deckGLViewProps;\n}","map":{"version":3,"sources":["../../../src/utils/evaluate-children.ts"],"names":["MAP_STYLE","position","zIndex","children","Array","child","evaluateChildren","isComponent","isReactMap","childProps","cloneElement","needsDeckGLViewProps","componentClass","componentProps"],"mappings":"AACA,SAAA,YAAA,QAAA,OAAA;AAEA,MAAMA,SAAS,GAAG;AAACC,EAAAA,QAAQ,EAAT,UAAA;AAAuBC,EAAAA,MAAM,EAAE,CAAC;AAAhC,CAAlB;AAEA,eAAe,SAAA,gBAAA,CAAA,QAAA,EAAA,UAAA,EAGI;AACjB,MAAI,OAAA,QAAA,KAAJ,UAAA,EAAoC;AAClC,WAAOC,QAAQ,CAAf,UAAe,CAAf;AACD;;AACD,MAAIC,KAAK,CAALA,OAAAA,CAAJ,QAAIA,CAAJ,EAA6B;AAC3B,WAAOD,QAAQ,CAARA,GAAAA,CAAaE,KAAK,IAAIC,gBAAgB,CAAA,KAAA,EAA7C,UAA6C,CAAtCH,CAAP;AACD;;AACD,MAAII,WAAW,CAAf,QAAe,CAAf,EAA2B;AAGzB,QAAIC,UAAU,CAAd,QAAc,CAAd,EAA0B;AAExBC,MAAAA,UAAU,CAAVA,KAAAA,GAAAA,SAAAA;AACA,aAAOC,YAAY,CAAA,QAAA,EAAnB,UAAmB,CAAnB;AACD;;AACD,QAAIC,oBAAoB,CAAxB,QAAwB,CAAxB,EAAoC;AAClC,aAAOD,YAAY,CAAA,QAAA,EAAnB,UAAmB,CAAnB;AACD;AACF;;AAED,SAAA,QAAA;AACD;AAED,OAAO,SAAA,WAAA,CAAA,KAAA,EAA0E;AAC/E,SAAQL,KAAK,IAAI,OAAA,KAAA,KAATA,QAAAA,IAAsC,UAAvC,KAACA,IAAR,KAAA;AACD;;AAED,SAAA,UAAA,CAAA,KAAA,EAAwD;AACtD,QAAMO,cAAc,GAAGP,KAAK,CAA5B,IAAA;AAEA,QAAMQ,cAAc,GAAGD,cAAc,IAAIA,cAAc,CAAvD,YAAA;AACA,SAAOC,cAAc,IAAIA,cAAc,CAAvC,QAAA;AACD;;AAED,SAAA,oBAAA,CAAA,KAAA,EAAkE;AAChE,QAAMD,cAAc,GAAGP,KAAK,CAA5B,IAAA;AAEA,SAAOO,cAAc,IAAIA,cAAc,CAAvC,eAAA;AACD","sourcesContent":["import * as React from 'react';\nimport {cloneElement} from 'react';\n\nconst MAP_STYLE = {position: 'absolute', zIndex: -1};\n\nexport default function evaluateChildren(\n  children: React.ReactNode,\n  childProps: any\n): React.ReactNode {\n  if (typeof children === 'function') {\n    return children(childProps);\n  }\n  if (Array.isArray(children)) {\n    return children.map(child => evaluateChildren(child, childProps));\n  }\n  if (isComponent(children)) {\n    // Special treatment for react-map-gl's Map component\n    // to support shorthand use case <DeckGL><StaticMap /></DeckGL>\n    if (isReactMap(children)) {\n      // Place map under the canvas\n      childProps.style = MAP_STYLE;\n      return cloneElement(children, childProps);\n    }\n    if (needsDeckGLViewProps(children)) {\n      return cloneElement(children, childProps);\n    }\n  }\n\n  return children;\n}\n\nexport function isComponent(child: React.ReactNode): child is React.ReactElement {\n  return (child && typeof child === 'object' && 'type' in child) || false;\n}\n\nfunction isReactMap(child: React.ReactElement): boolean {\n  const componentClass = child.type;\n  // @ts-expect-error defaultProps is not defined on JSXElementConstructor\n  const componentProps = componentClass && componentClass.defaultProps;\n  return componentProps && componentProps.mapStyle;\n}\n\nfunction needsDeckGLViewProps(child: React.ReactElement): boolean {\n  const componentClass = child.type;\n  // @ts-expect-error deckGLViewProps is a custom hack defined on the constructor (nebula.gl)\n  return componentClass && componentClass.deckGLViewProps;\n}\n"]},"metadata":{},"sourceType":"module"}