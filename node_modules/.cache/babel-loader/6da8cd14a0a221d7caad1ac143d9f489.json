{"ast":null,"code":"import MathArray from './base/math-array';\nimport Quaternion from './quaternion';\nimport { clamp } from '../lib/common';\nimport { checkNumber } from '../lib/validators';\nconst ERR_UNKNOWN_ORDER = 'Unknown Euler angle order';\nconst ALMOST_ONE = 0.99999;\nvar RotationOrder;\n\n(function (RotationOrder) {\n  RotationOrder[RotationOrder[\"ZYX\"] = 0] = \"ZYX\";\n  RotationOrder[RotationOrder[\"YXZ\"] = 1] = \"YXZ\";\n  RotationOrder[RotationOrder[\"XZY\"] = 2] = \"XZY\";\n  RotationOrder[RotationOrder[\"ZXY\"] = 3] = \"ZXY\";\n  RotationOrder[RotationOrder[\"YZX\"] = 4] = \"YZX\";\n  RotationOrder[RotationOrder[\"XYZ\"] = 5] = \"XYZ\";\n})(RotationOrder || (RotationOrder = {}));\n\nexport default class Euler extends MathArray {\n  static get ZYX() {\n    return RotationOrder.ZYX;\n  }\n\n  static get YXZ() {\n    return RotationOrder.YXZ;\n  }\n\n  static get XZY() {\n    return RotationOrder.XZY;\n  }\n\n  static get ZXY() {\n    return RotationOrder.ZXY;\n  }\n\n  static get YZX() {\n    return RotationOrder.YZX;\n  }\n\n  static get XYZ() {\n    return RotationOrder.XYZ;\n  }\n\n  static get RollPitchYaw() {\n    return RotationOrder.ZYX;\n  }\n\n  static get DefaultOrder() {\n    return RotationOrder.ZYX;\n  }\n\n  static get RotationOrders() {\n    return RotationOrder;\n  }\n\n  static rotationOrder(order) {\n    return RotationOrder[order];\n  }\n\n  get ELEMENTS() {\n    return 4;\n  }\n\n  constructor(x = 0, y = 0, z = 0, order = Euler.DefaultOrder) {\n    super(-0, -0, -0, -0);\n\n    if (arguments.length > 0 && Array.isArray(arguments[0])) {\n      this.fromVector3(...arguments);\n    } else {\n      this.set(x, y, z, order);\n    }\n  }\n\n  fromQuaternion(quaternion) {\n    const [x, y, z, w] = quaternion;\n    const ysqr = y * y;\n    const t0 = -2 * (ysqr + z * z) + 1;\n    const t1 = +2 * (x * y + w * z);\n    let t2 = -2 * (x * z - w * y);\n    const t3 = +2 * (y * z + w * x);\n    const t4 = -2 * (x * x + ysqr) + 1;\n    t2 = t2 > 1 ? 1 : t2;\n    t2 = t2 < -1 ? -1 : t2;\n    const roll = Math.atan2(t3, t4);\n    const pitch = Math.asin(t2);\n    const yaw = Math.atan2(t1, t0);\n    return this.set(roll, pitch, yaw, Euler.RollPitchYaw);\n  }\n\n  fromObject(object) {\n    throw new Error('not implemented');\n  }\n\n  copy(array) {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    this[3] = Number.isFinite(array[3]) || this.order;\n    return this.check();\n  }\n\n  set(x = 0, y = 0, z = 0, order) {\n    this[0] = x;\n    this[1] = y;\n    this[2] = z;\n    this[3] = Number.isFinite(order) ? order : this[3];\n    return this.check();\n  }\n\n  validate() {\n    return validateOrder(this[3]) && Number.isFinite(this[0]) && Number.isFinite(this[1]) && Number.isFinite(this[2]);\n  }\n\n  toArray(array = [], offset = 0) {\n    array[offset] = this[0];\n    array[offset + 1] = this[1];\n    array[offset + 2] = this[2];\n    return array;\n  }\n\n  toArray4(array = [], offset = 0) {\n    array[offset] = this[0];\n    array[offset + 1] = this[1];\n    array[offset + 2] = this[2];\n    array[offset + 3] = this[3];\n    return array;\n  }\n\n  toVector3(result = [-0, -0, -0]) {\n    result[0] = this[0];\n    result[1] = this[1];\n    result[2] = this[2];\n    return result;\n  }\n\n  get x() {\n    return this[0];\n  }\n\n  set x(value) {\n    this[0] = checkNumber(value);\n  }\n\n  get y() {\n    return this[1];\n  }\n\n  set y(value) {\n    this[1] = checkNumber(value);\n  }\n\n  get z() {\n    return this[2];\n  }\n\n  set z(value) {\n    this[2] = checkNumber(value);\n  }\n\n  get alpha() {\n    return this[0];\n  }\n\n  set alpha(value) {\n    this[0] = checkNumber(value);\n  }\n\n  get beta() {\n    return this[1];\n  }\n\n  set beta(value) {\n    this[1] = checkNumber(value);\n  }\n\n  get gamma() {\n    return this[2];\n  }\n\n  set gamma(value) {\n    this[2] = checkNumber(value);\n  }\n\n  get phi() {\n    return this[0];\n  }\n\n  set phi(value) {\n    this[0] = checkNumber(value);\n  }\n\n  get theta() {\n    return this[1];\n  }\n\n  set theta(value) {\n    this[1] = checkNumber(value);\n  }\n\n  get psi() {\n    return this[2];\n  }\n\n  set psi(value) {\n    this[2] = checkNumber(value);\n  }\n\n  get roll() {\n    return this[0];\n  }\n\n  set roll(value) {\n    this[0] = checkNumber(value);\n  }\n\n  get pitch() {\n    return this[1];\n  }\n\n  set pitch(value) {\n    this[1] = checkNumber(value);\n  }\n\n  get yaw() {\n    return this[2];\n  }\n\n  set yaw(value) {\n    this[2] = checkNumber(value);\n  }\n\n  get order() {\n    return this[3];\n  }\n\n  set order(value) {\n    this[3] = checkOrder(value);\n  }\n\n  fromVector3(v, order) {\n    return this.set(v[0], v[1], v[2], Number.isFinite(order) ? order : this[3]);\n  }\n\n  fromArray(array, offset = 0) {\n    this[0] = array[0 + offset];\n    this[1] = array[1 + offset];\n    this[2] = array[2 + offset];\n\n    if (array[3] !== undefined) {\n      this[3] = array[3];\n    }\n\n    return this.check();\n  }\n\n  fromRollPitchYaw(roll, pitch, yaw) {\n    return this.set(roll, pitch, yaw, RotationOrder.ZYX);\n  }\n\n  fromRotationMatrix(m, order = Euler.DefaultOrder) {\n    this._fromRotationMatrix(m, order);\n\n    return this.check();\n  }\n\n  getRotationMatrix(m) {\n    return this._getRotationMatrix(m);\n  }\n\n  getQuaternion() {\n    const q = new Quaternion();\n\n    switch (this[4]) {\n      case RotationOrder.XYZ:\n        return q.rotateX(this[0]).rotateY(this[1]).rotateZ(this[2]);\n\n      case RotationOrder.YXZ:\n        return q.rotateY(this[0]).rotateX(this[1]).rotateZ(this[2]);\n\n      case RotationOrder.ZXY:\n        return q.rotateZ(this[0]).rotateX(this[1]).rotateY(this[2]);\n\n      case RotationOrder.ZYX:\n        return q.rotateZ(this[0]).rotateY(this[1]).rotateX(this[2]);\n\n      case RotationOrder.YZX:\n        return q.rotateY(this[0]).rotateZ(this[1]).rotateX(this[2]);\n\n      case RotationOrder.XZY:\n        return q.rotateX(this[0]).rotateZ(this[1]).rotateY(this[2]);\n\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n  }\n\n  _fromRotationMatrix(m, order = Euler.DefaultOrder) {\n    const m11 = m[0],\n          m12 = m[4],\n          m13 = m[8];\n    const m21 = m[1],\n          m22 = m[5],\n          m23 = m[9];\n    const m31 = m[2],\n          m32 = m[6],\n          m33 = m[10];\n    order = order || this[3];\n\n    switch (order) {\n      case Euler.XYZ:\n        this[1] = Math.asin(clamp(m13, -1, 1));\n\n        if (Math.abs(m13) < ALMOST_ONE) {\n          this[0] = Math.atan2(-m23, m33);\n          this[2] = Math.atan2(-m12, m11);\n        } else {\n          this[0] = Math.atan2(m32, m22);\n          this[2] = 0;\n        }\n\n        break;\n\n      case Euler.YXZ:\n        this[0] = Math.asin(-clamp(m23, -1, 1));\n\n        if (Math.abs(m23) < ALMOST_ONE) {\n          this[1] = Math.atan2(m13, m33);\n          this[2] = Math.atan2(m21, m22);\n        } else {\n          this[1] = Math.atan2(-m31, m11);\n          this[2] = 0;\n        }\n\n        break;\n\n      case Euler.ZXY:\n        this[0] = Math.asin(clamp(m32, -1, 1));\n\n        if (Math.abs(m32) < ALMOST_ONE) {\n          this[1] = Math.atan2(-m31, m33);\n          this[2] = Math.atan2(-m12, m22);\n        } else {\n          this[1] = 0;\n          this[2] = Math.atan2(m21, m11);\n        }\n\n        break;\n\n      case Euler.ZYX:\n        this[1] = Math.asin(-clamp(m31, -1, 1));\n\n        if (Math.abs(m31) < ALMOST_ONE) {\n          this[0] = Math.atan2(m32, m33);\n          this[2] = Math.atan2(m21, m11);\n        } else {\n          this[0] = 0;\n          this[2] = Math.atan2(-m12, m22);\n        }\n\n        break;\n\n      case Euler.YZX:\n        this[2] = Math.asin(clamp(m21, -1, 1));\n\n        if (Math.abs(m21) < ALMOST_ONE) {\n          this[0] = Math.atan2(-m23, m22);\n          this[1] = Math.atan2(-m31, m11);\n        } else {\n          this[0] = 0;\n          this[1] = Math.atan2(m13, m33);\n        }\n\n        break;\n\n      case Euler.XZY:\n        this[2] = Math.asin(-clamp(m12, -1, 1));\n\n        if (Math.abs(m12) < ALMOST_ONE) {\n          this[0] = Math.atan2(m32, m22);\n          this[1] = Math.atan2(m13, m11);\n        } else {\n          this[0] = Math.atan2(-m23, m33);\n          this[1] = 0;\n        }\n\n        break;\n\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n\n    this[3] = order;\n    return this;\n  }\n\n  _getRotationMatrix(result) {\n    const te = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n    const x = this.x,\n          y = this.y,\n          z = this.z;\n    const a = Math.cos(x);\n    const c = Math.cos(y);\n    const e = Math.cos(z);\n    const b = Math.sin(x);\n    const d = Math.sin(y);\n    const f = Math.sin(z);\n\n    switch (this[3]) {\n      case Euler.XYZ:\n        {\n          const ae = a * e,\n                af = a * f,\n                be = b * e,\n                bf = b * f;\n          te[0] = c * e;\n          te[4] = -c * f;\n          te[8] = d;\n          te[1] = af + be * d;\n          te[5] = ae - bf * d;\n          te[9] = -b * c;\n          te[2] = bf - ae * d;\n          te[6] = be + af * d;\n          te[10] = a * c;\n          break;\n        }\n\n      case Euler.YXZ:\n        {\n          const ce = c * e,\n                cf = c * f,\n                de = d * e,\n                df = d * f;\n          te[0] = ce + df * b;\n          te[4] = de * b - cf;\n          te[8] = a * d;\n          te[1] = a * f;\n          te[5] = a * e;\n          te[9] = -b;\n          te[2] = cf * b - de;\n          te[6] = df + ce * b;\n          te[10] = a * c;\n          break;\n        }\n\n      case Euler.ZXY:\n        {\n          const ce = c * e,\n                cf = c * f,\n                de = d * e,\n                df = d * f;\n          te[0] = ce - df * b;\n          te[4] = -a * f;\n          te[8] = de + cf * b;\n          te[1] = cf + de * b;\n          te[5] = a * e;\n          te[9] = df - ce * b;\n          te[2] = -a * d;\n          te[6] = b;\n          te[10] = a * c;\n          break;\n        }\n\n      case Euler.ZYX:\n        {\n          const ae = a * e,\n                af = a * f,\n                be = b * e,\n                bf = b * f;\n          te[0] = c * e;\n          te[4] = be * d - af;\n          te[8] = ae * d + bf;\n          te[1] = c * f;\n          te[5] = bf * d + ae;\n          te[9] = af * d - be;\n          te[2] = -d;\n          te[6] = b * c;\n          te[10] = a * c;\n          break;\n        }\n\n      case Euler.YZX:\n        {\n          const ac = a * c,\n                ad = a * d,\n                bc = b * c,\n                bd = b * d;\n          te[0] = c * e;\n          te[4] = bd - ac * f;\n          te[8] = bc * f + ad;\n          te[1] = f;\n          te[5] = a * e;\n          te[9] = -b * e;\n          te[2] = -d * e;\n          te[6] = ad * f + bc;\n          te[10] = ac - bd * f;\n          break;\n        }\n\n      case Euler.XZY:\n        {\n          const ac = a * c,\n                ad = a * d,\n                bc = b * c,\n                bd = b * d;\n          te[0] = c * e;\n          te[4] = -f;\n          te[8] = d * e;\n          te[1] = ac * f + bd;\n          te[5] = a * e;\n          te[9] = ad * f - bc;\n          te[2] = bc * f - ad;\n          te[6] = b * e;\n          te[10] = bd * f + ac;\n          break;\n        }\n\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n\n    te[3] = 0;\n    te[7] = 0;\n    te[11] = 0;\n    te[12] = 0;\n    te[13] = 0;\n    te[14] = 0;\n    te[15] = 1;\n    return te;\n  }\n\n  toQuaternion() {\n    const cy = Math.cos(this.yaw * 0.5);\n    const sy = Math.sin(this.yaw * 0.5);\n    const cr = Math.cos(this.roll * 0.5);\n    const sr = Math.sin(this.roll * 0.5);\n    const cp = Math.cos(this.pitch * 0.5);\n    const sp = Math.sin(this.pitch * 0.5);\n    const w = cy * cr * cp + sy * sr * sp;\n    const x = cy * sr * cp - sy * cr * sp;\n    const y = cy * cr * sp + sy * sr * cp;\n    const z = sy * cr * cp - cy * sr * sp;\n    return new Quaternion(x, y, z, w);\n  }\n\n}\n\nfunction validateOrder(value) {\n  return value >= 0 && value < 6;\n}\n\nfunction checkOrder(value) {\n  if (value < 0 && value >= 6) {\n    throw new Error(ERR_UNKNOWN_ORDER);\n  }\n\n  return value;\n}","map":{"version":3,"sources":["../../../src/classes/euler.ts"],"names":["ERR_UNKNOWN_ORDER","ALMOST_ONE","RotationOrder","ZYX","YXZ","XZY","ZXY","YZX","XYZ","RollPitchYaw","DefaultOrder","RotationOrders","rotationOrder","ELEMENTS","constructor","x","y","z","order","Euler","arguments","Array","fromQuaternion","ysqr","t0","t1","w","t2","t3","t4","roll","Math","pitch","yaw","fromObject","copy","array","Number","set","validate","validateOrder","toArray","offset","toArray4","toVector3","result","checkNumber","alpha","beta","gamma","phi","theta","psi","checkOrder","fromVector3","v","fromArray","fromRollPitchYaw","fromRotationMatrix","getRotationMatrix","getQuaternion","q","_fromRotationMatrix","m11","m","m12","m13","m21","m22","m23","m31","m32","m33","clamp","_getRotationMatrix","te","a","c","e","b","d","f","ae","af","be","bf","ce","cf","de","df","ac","ad","bc","bd","toQuaternion","cy","sy","cr","sr","cp","sp","value"],"mappings":"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","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n// MIT License\nimport MathArray from './base/math-array';\nimport Quaternion from './quaternion';\nimport {NumericArray} from '@math.gl/types';\n\nimport {clamp} from '../lib/common';\nimport {checkNumber} from '../lib/validators';\n\n// Internal constants\nconst ERR_UNKNOWN_ORDER = 'Unknown Euler angle order';\nconst ALMOST_ONE = 0.99999;\n\nenum RotationOrder {\n  ZYX = 0,\n  YXZ = 1,\n  XZY = 2,\n  ZXY = 3,\n  YZX = 4,\n  XYZ = 5\n}\n\nexport default class Euler extends MathArray {\n  // Constants\n  static get ZYX(): RotationOrder {\n    return RotationOrder.ZYX;\n  }\n  static get YXZ(): RotationOrder {\n    return RotationOrder.YXZ;\n  }\n  static get XZY(): RotationOrder {\n    return RotationOrder.XZY;\n  }\n  static get ZXY(): RotationOrder {\n    return RotationOrder.ZXY;\n  }\n  static get YZX(): RotationOrder {\n    return RotationOrder.YZX;\n  }\n  static get XYZ(): RotationOrder {\n    return RotationOrder.XYZ;\n  }\n  static get RollPitchYaw(): RotationOrder {\n    return RotationOrder.ZYX;\n  }\n  static get DefaultOrder(): RotationOrder {\n    return RotationOrder.ZYX;\n  }\n  static get RotationOrders(): typeof RotationOrder {\n    return RotationOrder;\n  }\n  static rotationOrder(order: RotationOrder): string {\n    return RotationOrder[order];\n  }\n  get ELEMENTS(): number {\n    return 4;\n  }\n\n  /**\n   * @class\n   * @param {Number | Number[]} x\n   * @param {Number=} [y]\n   * @param {Number=} [z]\n   * @param {Number=} [order]\n   */\n  constructor(x = 0, y = 0, z = 0, order = Euler.DefaultOrder) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0, -0);\n    // eslint-disable-next-line prefer-rest-params\n    if (arguments.length > 0 && Array.isArray(arguments[0])) {\n      // eslint-disable-next-line prefer-rest-params\n      // @ts-expect-error\n      this.fromVector3(...arguments);\n    } else {\n      this.set(x, y, z, order);\n    }\n  }\n\n  fromQuaternion(quaternion: Readonly<NumericArray>): this {\n    const [x, y, z, w] = quaternion;\n    const ysqr = y * y;\n    const t0 = -2 * (ysqr + z * z) + 1;\n    const t1 = +2 * (x * y + w * z);\n    let t2 = -2 * (x * z - w * y);\n    const t3 = +2 * (y * z + w * x);\n    const t4 = -2 * (x * x + ysqr) + 1;\n    t2 = t2 > 1 ? 1 : t2;\n    t2 = t2 < -1 ? -1 : t2;\n    const roll = Math.atan2(t3, t4);\n    const pitch = Math.asin(t2);\n    const yaw = Math.atan2(t1, t0);\n    return this.set(roll, pitch, yaw, Euler.RollPitchYaw);\n  }\n\n  fromObject(object: object): this {\n    throw new Error('not implemented');\n    //  return this.set(object.x, object.y, object.z, object.order);\n  }\n\n  // fromQuaternion(q, order) {\n  //   this._fromRotationMat[-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n  //   return this.check();\n  // }\n  // If copied array does contain fourth element, preserves currently set order\n  copy(array: Readonly<NumericArray>): this {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    // @ts-expect-error\n    this[3] = Number.isFinite(array[3]) || this.order;\n    return this.check();\n  }\n\n  // Sets the three angles, and optionally sets the rotation order\n  // If order is not specified, preserves currently set order\n  set(x = 0, y = 0, z = 0, order: RotationOrder): this {\n    this[0] = x;\n    this[1] = y;\n    this[2] = z;\n    this[3] = Number.isFinite(order) ? order : this[3];\n    return this.check();\n  }\n\n  validate(): boolean {\n    return (\n      validateOrder(this[3]) &&\n      Number.isFinite(this[0]) &&\n      Number.isFinite(this[1]) &&\n      Number.isFinite(this[2])\n    );\n  }\n\n  // Does not copy the orientation element\n  toArray(array: NumericArray = [], offset: number = 0): NumericArray {\n    array[offset] = this[0];\n    array[offset + 1] = this[1];\n    array[offset + 2] = this[2];\n    return array;\n  }\n\n  // Copies the orientation element\n  toArray4(array: NumericArray = [], offset: number = 0): NumericArray {\n    array[offset] = this[0];\n    array[offset + 1] = this[1];\n    array[offset + 2] = this[2];\n    array[offset + 3] = this[3];\n    return array;\n  }\n\n  toVector3(result: NumericArray = [-0, -0, -0]): NumericArray {\n    result[0] = this[0];\n    result[1] = this[1];\n    result[2] = this[2];\n    return result;\n  }\n  /* eslint-disable no-multi-spaces, brace-style, no-return-assign */\n  // x, y, z angle notation (note: only corresponds to axis in XYZ orientation)\n\n  get x(): number {\n    return this[0];\n  }\n  set x(value: number) {\n    this[0] = checkNumber(value);\n  }\n\n  get y(): number {\n    return this[1];\n  }\n  set y(value: number) {\n    this[1] = checkNumber(value);\n  }\n\n  get z(): number {\n    return this[2];\n  }\n  set z(value: number) {\n    this[2] = checkNumber(value);\n  }\n  // alpha, beta, gamma angle notation\n  get alpha(): number {\n    return this[0];\n  }\n  set alpha(value: number) {\n    this[0] = checkNumber(value);\n  }\n\n  get beta(): number {\n    return this[1];\n  }\n  set beta(value: number) {\n    this[1] = checkNumber(value);\n  }\n\n  get gamma(): number {\n    return this[2];\n  }\n  set gamma(value: number) {\n    this[2] = checkNumber(value);\n  }\n\n  // phi, theta, psi angle notation\n  get phi(): number {\n    return this[0];\n  }\n  set phi(value: number) {\n    this[0] = checkNumber(value);\n  }\n\n  get theta(): number {\n    return this[1];\n  }\n  set theta(value: number) {\n    this[1] = checkNumber(value);\n  }\n\n  get psi(): number {\n    return this[2];\n  }\n  set psi(value: number) {\n    this[2] = checkNumber(value);\n  }\n  // roll, pitch, yaw angle notation\n\n  get roll(): number {\n    return this[0];\n  }\n  set roll(value: number) {\n    this[0] = checkNumber(value);\n  }\n\n  get pitch(): number {\n    return this[1];\n  }\n  set pitch(value: number) {\n    this[1] = checkNumber(value);\n  }\n\n  get yaw(): number {\n    return this[2];\n  }\n  set yaw(value: number) {\n    this[2] = checkNumber(value);\n  }\n\n  // rotation order, in all three angle notations\n  get order(): RotationOrder {\n    return this[3];\n  }\n  set order(value: RotationOrder) {\n    this[3] = checkOrder(value);\n  }\n\n  // Constructors\n  fromVector3(v: Readonly<NumericArray>, order: RotationOrder): this {\n    return this.set(v[0], v[1], v[2], Number.isFinite(order) ? order : this[3]);\n  }\n\n  // TODO - with and without 4th element\n  fromArray(array: Readonly<NumericArray>, offset: number = 0): this {\n    this[0] = array[0 + offset];\n    this[1] = array[1 + offset];\n    this[2] = array[2 + offset];\n    if (array[3] !== undefined) {\n      this[3] = array[3];\n    }\n    return this.check();\n  }\n\n  // Common ZYX rotation order\n  fromRollPitchYaw(roll: number, pitch: number, yaw: number): this {\n    return this.set(roll, pitch, yaw, RotationOrder.ZYX);\n  }\n\n  fromRotationMatrix(m: Readonly<NumericArray>, order: RotationOrder = Euler.DefaultOrder): this {\n    this._fromRotationMatrix(m, order);\n    return this.check();\n  }\n\n  // ACCESSORS\n\n  getRotationMatrix(m: NumericArray): NumericArray {\n    return this._getRotationMatrix(m);\n  }\n\n  // TODO - move to Quaternion\n  getQuaternion(): Quaternion {\n    const q = new Quaternion();\n    switch (this[4]) {\n      case RotationOrder.XYZ:\n        return q.rotateX(this[0]).rotateY(this[1]).rotateZ(this[2]);\n      case RotationOrder.YXZ:\n        return q.rotateY(this[0]).rotateX(this[1]).rotateZ(this[2]);\n      case RotationOrder.ZXY:\n        return q.rotateZ(this[0]).rotateX(this[1]).rotateY(this[2]);\n      case RotationOrder.ZYX:\n        return q.rotateZ(this[0]).rotateY(this[1]).rotateX(this[2]);\n      case RotationOrder.YZX:\n        return q.rotateY(this[0]).rotateZ(this[1]).rotateX(this[2]);\n      case RotationOrder.XZY:\n        return q.rotateX(this[0]).rotateZ(this[1]).rotateY(this[2]);\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n  }\n\n  // INTERNAL METHODS\n  // Conversion from Euler to rotation matrix and from matrix to Euler\n  // Adapted from three.js under MIT license\n  // // WARNING: this discards revolution information -bhouston\n  // reorder(newOrder) {\n  //   const q = new Quaternion().setFromEuler(this);\n  //   return this.setFromQuaternion(q, newOrder);\n  /* eslint-disable complexity, max-statements, one-var */\n  _fromRotationMatrix(m: Readonly<NumericArray>, order = Euler.DefaultOrder): this {\n    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n    const m11 = m[0],\n      m12 = m[4],\n      m13 = m[8];\n    const m21 = m[1],\n      m22 = m[5],\n      m23 = m[9];\n    const m31 = m[2],\n      m32 = m[6],\n      m33 = m[10];\n    order = order || this[3];\n    switch (order) {\n      case Euler.XYZ:\n        this[1] = Math.asin(clamp(m13, -1, 1));\n        if (Math.abs(m13) < ALMOST_ONE) {\n          this[0] = Math.atan2(-m23, m33);\n          this[2] = Math.atan2(-m12, m11);\n        } else {\n          this[0] = Math.atan2(m32, m22);\n          this[2] = 0;\n        }\n        break;\n      case Euler.YXZ:\n        this[0] = Math.asin(-clamp(m23, -1, 1));\n        if (Math.abs(m23) < ALMOST_ONE) {\n          this[1] = Math.atan2(m13, m33);\n          this[2] = Math.atan2(m21, m22);\n        } else {\n          this[1] = Math.atan2(-m31, m11);\n          this[2] = 0;\n        }\n        break;\n      case Euler.ZXY:\n        this[0] = Math.asin(clamp(m32, -1, 1));\n        if (Math.abs(m32) < ALMOST_ONE) {\n          this[1] = Math.atan2(-m31, m33);\n          this[2] = Math.atan2(-m12, m22);\n        } else {\n          this[1] = 0;\n          this[2] = Math.atan2(m21, m11);\n        }\n        break;\n      case Euler.ZYX:\n        this[1] = Math.asin(-clamp(m31, -1, 1));\n        if (Math.abs(m31) < ALMOST_ONE) {\n          this[0] = Math.atan2(m32, m33);\n          this[2] = Math.atan2(m21, m11);\n        } else {\n          this[0] = 0;\n          this[2] = Math.atan2(-m12, m22);\n        }\n        break;\n      case Euler.YZX:\n        this[2] = Math.asin(clamp(m21, -1, 1));\n        if (Math.abs(m21) < ALMOST_ONE) {\n          this[0] = Math.atan2(-m23, m22);\n          this[1] = Math.atan2(-m31, m11);\n        } else {\n          this[0] = 0;\n          this[1] = Math.atan2(m13, m33);\n        }\n        break;\n      case Euler.XZY:\n        this[2] = Math.asin(-clamp(m12, -1, 1));\n        if (Math.abs(m12) < ALMOST_ONE) {\n          this[0] = Math.atan2(m32, m22);\n          this[1] = Math.atan2(m13, m11);\n        } else {\n          this[0] = Math.atan2(-m23, m33);\n          this[1] = 0;\n        }\n        break;\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n    this[3] = order;\n    return this;\n  }\n\n  _getRotationMatrix(result: NumericArray): NumericArray {\n    const te = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n    const x = this.x,\n      y = this.y,\n      z = this.z;\n    const a = Math.cos(x);\n    const c = Math.cos(y);\n    const e = Math.cos(z);\n    const b = Math.sin(x);\n    const d = Math.sin(y);\n    const f = Math.sin(z);\n    switch (this[3]) {\n      case Euler.XYZ: {\n        const ae = a * e,\n          af = a * f,\n          be = b * e,\n          bf = b * f;\n        te[0] = c * e;\n        te[4] = -c * f;\n        te[8] = d;\n        te[1] = af + be * d;\n        te[5] = ae - bf * d;\n        te[9] = -b * c;\n        te[2] = bf - ae * d;\n        te[6] = be + af * d;\n        te[10] = a * c;\n        break;\n      }\n      case Euler.YXZ: {\n        const ce = c * e,\n          cf = c * f,\n          de = d * e,\n          df = d * f;\n        te[0] = ce + df * b;\n        te[4] = de * b - cf;\n        te[8] = a * d;\n        te[1] = a * f;\n        te[5] = a * e;\n        te[9] = -b;\n        te[2] = cf * b - de;\n        te[6] = df + ce * b;\n        te[10] = a * c;\n        break;\n      }\n      case Euler.ZXY: {\n        const ce = c * e,\n          cf = c * f,\n          de = d * e,\n          df = d * f;\n        te[0] = ce - df * b;\n        te[4] = -a * f;\n        te[8] = de + cf * b;\n        te[1] = cf + de * b;\n        te[5] = a * e;\n        te[9] = df - ce * b;\n        te[2] = -a * d;\n        te[6] = b;\n        te[10] = a * c;\n        break;\n      }\n      case Euler.ZYX: {\n        const ae = a * e,\n          af = a * f,\n          be = b * e,\n          bf = b * f;\n        te[0] = c * e;\n        te[4] = be * d - af;\n        te[8] = ae * d + bf;\n        te[1] = c * f;\n        te[5] = bf * d + ae;\n        te[9] = af * d - be;\n        te[2] = -d;\n        te[6] = b * c;\n        te[10] = a * c;\n        break;\n      }\n      case Euler.YZX: {\n        const ac = a * c,\n          ad = a * d,\n          bc = b * c,\n          bd = b * d;\n        te[0] = c * e;\n        te[4] = bd - ac * f;\n        te[8] = bc * f + ad;\n        te[1] = f;\n        te[5] = a * e;\n        te[9] = -b * e;\n        te[2] = -d * e;\n        te[6] = ad * f + bc;\n        te[10] = ac - bd * f;\n        break;\n      }\n      case Euler.XZY: {\n        const ac = a * c,\n          ad = a * d,\n          bc = b * c,\n          bd = b * d;\n        te[0] = c * e;\n        te[4] = -f;\n        te[8] = d * e;\n        te[1] = ac * f + bd;\n        te[5] = a * e;\n        te[9] = ad * f - bc;\n        te[2] = bc * f - ad;\n        te[6] = b * e;\n        te[10] = bd * f + ac;\n        break;\n      }\n      default:\n        throw new Error(ERR_UNKNOWN_ORDER);\n    }\n    // last column\n    te[3] = 0;\n    te[7] = 0;\n    te[11] = 0;\n    // bottom row\n    te[12] = 0;\n    te[13] = 0;\n    te[14] = 0;\n    te[15] = 1;\n    return te;\n  }\n\n  toQuaternion(): Quaternion {\n    // Abbreviations for the various angular functions\n    const cy = Math.cos(this.yaw * 0.5);\n    const sy = Math.sin(this.yaw * 0.5);\n    const cr = Math.cos(this.roll * 0.5);\n    const sr = Math.sin(this.roll * 0.5);\n    const cp = Math.cos(this.pitch * 0.5);\n    const sp = Math.sin(this.pitch * 0.5);\n    const w = cy * cr * cp + sy * sr * sp;\n    const x = cy * sr * cp - sy * cr * sp;\n    const y = cy * cr * sp + sy * sr * cp;\n    const z = sy * cr * cp - cy * sr * sp;\n    return new Quaternion(x, y, z, w);\n  }\n}\n\n// HELPER FUNCTIONS\n\nfunction validateOrder(value: number): boolean {\n  return value >= 0 && value < 6;\n}\n\nfunction checkOrder(value: number) {\n  if (value < 0 && value >= 6) {\n    throw new Error(ERR_UNKNOWN_ORDER);\n  }\n  return value;\n}\n"]},"metadata":{},"sourceType":"module"}