{"ast":null,"code":"const DEGREES_TO_RADIANS = Math.PI / 180;\nconst DAY_IN_MS = 1000 * 60 * 60 * 24;\nconst JD1970 = 2440588;\nconst JD2000 = 2451545;\nconst e = DEGREES_TO_RADIANS * 23.4397;\nconst M0 = 357.5291;\nconst M1 = 0.98560028;\nconst THETA0 = 280.147;\nconst THETA1 = 360.9856235;\nexport function getSunPosition(timestamp, latitude, longitude) {\n  const longitudeWestInRadians = DEGREES_TO_RADIANS * -longitude;\n  const phi = DEGREES_TO_RADIANS * latitude;\n  const d = toDays(timestamp);\n  const c = getSunCoords(d);\n  const H = getSiderealTime(d, longitudeWestInRadians) - c.rightAscension;\n  return {\n    azimuth: getAzimuth(H, phi, c.declination),\n    altitude: getAltitude(H, phi, c.declination)\n  };\n}\nexport function getSunDirection(timestamp, latitude, longitude) {\n  const {\n    azimuth,\n    altitude\n  } = getSunPosition(timestamp, latitude, longitude);\n  return [Math.sin(azimuth) * Math.cos(altitude), Math.cos(azimuth) * Math.cos(altitude), -Math.sin(altitude)];\n}\n\nfunction toJulianDay(timestamp) {\n  const ts = typeof timestamp === 'number' ? timestamp : timestamp.getTime();\n  return ts / DAY_IN_MS - 0.5 + JD1970;\n}\n\nfunction toDays(timestamp) {\n  return toJulianDay(timestamp) - JD2000;\n}\n\nfunction getRightAscension(eclipticLongitude, b) {\n  const lambda = eclipticLongitude;\n  return Math.atan2(Math.sin(lambda) * Math.cos(e) - Math.tan(b) * Math.sin(e), Math.cos(lambda));\n}\n\nfunction getDeclination(eclipticLongitude, b) {\n  const lambda = eclipticLongitude;\n  return Math.asin(Math.sin(b) * Math.cos(e) + Math.cos(b) * Math.sin(e) * Math.sin(lambda));\n}\n\nfunction getAzimuth(hourAngle, latitudeInRadians, declination) {\n  const H = hourAngle;\n  const phi = latitudeInRadians;\n  const delta = declination;\n  return Math.atan2(Math.sin(H), Math.cos(H) * Math.sin(phi) - Math.tan(delta) * Math.cos(phi));\n}\n\nfunction getAltitude(hourAngle, latitudeInRadians, declination) {\n  const H = hourAngle;\n  const phi = latitudeInRadians;\n  const delta = declination;\n  return Math.asin(Math.sin(phi) * Math.sin(delta) + Math.cos(phi) * Math.cos(delta) * Math.cos(H));\n}\n\nfunction getSiderealTime(dates, longitudeWestInRadians) {\n  return DEGREES_TO_RADIANS * (THETA0 + THETA1 * dates) - longitudeWestInRadians;\n}\n\nfunction getSolarMeanAnomaly(days) {\n  return DEGREES_TO_RADIANS * (M0 + M1 * days);\n}\n\nfunction getEclipticLongitude(meanAnomaly) {\n  const M = meanAnomaly;\n  const C = DEGREES_TO_RADIANS * (1.9148 * Math.sin(M) + 0.02 * Math.sin(2 * M) + 0.0003 * Math.sin(3 * M));\n  const P = DEGREES_TO_RADIANS * 102.9372;\n  return M + C + P + Math.PI;\n}\n\nfunction getSunCoords(dates) {\n  const M = getSolarMeanAnomaly(dates);\n  const L = getEclipticLongitude(M);\n  return {\n    declination: getDeclination(L, 0),\n    rightAscension: getRightAscension(L, 0)\n  };\n}","map":{"version":3,"sources":["../../src/suncalc.ts"],"names":["DEGREES_TO_RADIANS","Math","DAY_IN_MS","JD1970","JD2000","e","M0","M1","THETA0","THETA1","longitudeWestInRadians","phi","d","toDays","c","getSunCoords","H","getSiderealTime","azimuth","getAzimuth","altitude","getAltitude","getSunPosition","ts","timestamp","toJulianDay","lambda","delta","M","C","P","getSolarMeanAnomaly","L","getEclipticLongitude","declination","getDeclination","rightAscension","getRightAscension"],"mappings":"AAAA,MAAMA,kBAAkB,GAAGC,IAAI,CAAJA,EAAAA,GAA3B,GAAA;AAEA,MAAMC,SAAS,GAAG,OAAA,EAAA,GAAA,EAAA,GAAlB,EAAA;AACA,MAAMC,MAAM,GAAZ,OAAA;AACA,MAAMC,MAAM,GAAZ,OAAA;AAGA,MAAMC,CAAC,GAAGL,kBAAkB,GAA5B,OAAA;AAIA,MAAMM,EAAE,GAAR,QAAA;AACA,MAAMC,EAAE,GAAR,UAAA;AAEA,MAAMC,MAAM,GAAZ,OAAA;AACA,MAAMC,MAAM,GAAZ,WAAA;AAkBA,OAAO,SAAA,cAAA,CAAA,SAAA,EAAA,QAAA,EAAA,SAAA,EAIc;AACnB,QAAMC,sBAAsB,GAAGV,kBAAkB,GAAG,CAApD,SAAA;AACA,QAAMW,GAAG,GAAGX,kBAAkB,GAA9B,QAAA;AACA,QAAMY,CAAC,GAAGC,MAAM,CAAhB,SAAgB,CAAhB;AAEA,QAAMC,CAAC,GAAGC,YAAY,CAAtB,CAAsB,CAAtB;AAEA,QAAMC,CAAC,GAAGC,eAAe,CAAA,CAAA,EAAfA,sBAAe,CAAfA,GAA6CH,CAAC,CAAxD,cAAA;AAEA,SAAO;AACLI,IAAAA,OAAO,EAAEC,UAAU,CAAA,CAAA,EAAA,GAAA,EAASL,CAAC,CADxB,WACc,CADd;AAELM,IAAAA,QAAQ,EAAEC,WAAW,CAAA,CAAA,EAAA,GAAA,EAASP,CAAC,CAAV,WAAA;AAFhB,GAAP;AAID;AAED,OAAO,SAAA,eAAA,CAAA,SAAA,EAAA,QAAA,EAAA,SAAA,EAIK;AACV,QAAM;AAAA,IAAA,OAAA;AAAUM,IAAAA;AAAV,MAAsBE,cAAc,CAAA,SAAA,EAAA,QAAA,EAA1C,SAA0C,CAA1C;AAGA,SAAO,CACLrB,IAAI,CAAJA,GAAAA,CAAAA,OAAAA,IAAoBA,IAAI,CAAJA,GAAAA,CADf,QACeA,CADf,EAELA,IAAI,CAAJA,GAAAA,CAAAA,OAAAA,IAAoBA,IAAI,CAAJA,GAAAA,CAFf,QAEeA,CAFf,EAGL,CAACA,IAAI,CAAJA,GAAAA,CAHH,QAGGA,CAHI,CAAP;AAKD;;AAED,SAAA,WAAA,CAAA,SAAA,EAAuD;AACrD,QAAMsB,EAAE,GAAG,OAAA,SAAA,KAAA,QAAA,GAAA,SAAA,GAA4CC,SAAS,CAAhE,OAAuDA,EAAvD;AACA,SAAOD,EAAE,GAAFA,SAAAA,GAAAA,GAAAA,GAAP,MAAA;AACD;;AAED,SAAA,MAAA,CAAA,SAAA,EAAkD;AAChD,SAAOE,WAAW,CAAXA,SAAW,CAAXA,GAAP,MAAA;AACD;;AAED,SAAA,iBAAA,CAAA,iBAAA,EAAA,CAAA,EAAyE;AACvE,QAAMC,MAAM,GAAZ,iBAAA;AACA,SAAOzB,IAAI,CAAJA,KAAAA,CAAWA,IAAI,CAAJA,GAAAA,CAAAA,MAAAA,IAAmBA,IAAI,CAAJA,GAAAA,CAAnBA,CAAmBA,CAAnBA,GAAiCA,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,IAAcA,IAAI,CAAJA,GAAAA,CAA1DA,CAA0DA,CAA1DA,EAAuEA,IAAI,CAAJA,GAAAA,CAA9E,MAA8EA,CAAvEA,CAAP;AACD;;AAED,SAAA,cAAA,CAAA,iBAAA,EAAA,CAAA,EAAsE;AACpE,QAAMyB,MAAM,GAAZ,iBAAA;AACA,SAAOzB,IAAI,CAAJA,IAAAA,CAAUA,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,IAAcA,IAAI,CAAJA,GAAAA,CAAdA,CAAcA,CAAdA,GAA4BA,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,IAAcA,IAAI,CAAJA,GAAAA,CAAdA,CAAcA,CAAdA,GAA4BA,IAAI,CAAJA,GAAAA,CAAzE,MAAyEA,CAAlEA,CAAP;AACD;;AAED,SAAA,UAAA,CAAA,SAAA,EAAA,iBAAA,EAAA,WAAA,EAA+F;AAC7F,QAAMe,CAAC,GAAP,SAAA;AACA,QAAML,GAAG,GAAT,iBAAA;AACA,QAAMgB,KAAK,GAAX,WAAA;AACA,SAAO1B,IAAI,CAAJA,KAAAA,CAAWA,IAAI,CAAJA,GAAAA,CAAXA,CAAWA,CAAXA,EAAwBA,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,IAAcA,IAAI,CAAJA,GAAAA,CAAdA,GAAcA,CAAdA,GAA8BA,IAAI,CAAJA,GAAAA,CAAAA,KAAAA,IAAkBA,IAAI,CAAJA,GAAAA,CAA/E,GAA+EA,CAAxEA,CAAP;AACD;;AAED,SAAA,WAAA,CAAA,SAAA,EAAA,iBAAA,EAAA,WAAA,EAAgG;AAC9F,QAAMe,CAAC,GAAP,SAAA;AACA,QAAML,GAAG,GAAT,iBAAA;AACA,QAAMgB,KAAK,GAAX,WAAA;AACA,SAAO1B,IAAI,CAAJA,IAAAA,CAAUA,IAAI,CAAJA,GAAAA,CAAAA,GAAAA,IAAgBA,IAAI,CAAJA,GAAAA,CAAhBA,KAAgBA,CAAhBA,GAAkCA,IAAI,CAAJA,GAAAA,CAAAA,GAAAA,IAAgBA,IAAI,CAAJA,GAAAA,CAAhBA,KAAgBA,CAAhBA,GAAkCA,IAAI,CAAJA,GAAAA,CAArF,CAAqFA,CAA9EA,CAAP;AACD;;AAID,SAAA,eAAA,CAAA,KAAA,EAAA,sBAAA,EAAgF;AAC9E,SAAOD,kBAAkB,IAAIQ,MAAM,GAAGC,MAAM,GAArCT,KAAkB,CAAlBA,GAAP,sBAAA;AACD;;AAED,SAAA,mBAAA,CAAA,IAAA,EAAmD;AACjD,SAAOA,kBAAkB,IAAIM,EAAE,GAAGC,EAAE,GAApC,IAAyB,CAAzB;AACD;;AAED,SAAA,oBAAA,CAAA,WAAA,EAA2D;AACzD,QAAMqB,CAAC,GAAP,WAAA;AAEA,QAAMC,CAAC,GACL7B,kBAAkB,IAAI,SAASC,IAAI,CAAJA,GAAAA,CAAT,CAASA,CAAT,GAAuB,OAAOA,IAAI,CAAJA,GAAAA,CAAS,IAAvC,CAA8BA,CAA9B,GAAgD,SAASA,IAAI,CAAJA,GAAAA,CAAS,IAD1F,CACiFA,CAA7D,CADpB;AAGA,QAAM6B,CAAC,GAAG9B,kBAAkB,GAA5B,QAAA;AAEA,SAAO4B,CAAC,GAADA,CAAAA,GAAAA,CAAAA,GAAY3B,IAAI,CAAvB,EAAA;AACD;;AAED,SAAA,YAAA,CAAA,KAAA,EAGE;AACA,QAAM2B,CAAC,GAAGG,mBAAmB,CAA7B,KAA6B,CAA7B;AACA,QAAMC,CAAC,GAAGC,oBAAoB,CAA9B,CAA8B,CAA9B;AAEA,SAAO;AACLC,IAAAA,WAAW,EAAEC,cAAc,CAAA,CAAA,EADtB,CACsB,CADtB;AAELC,IAAAA,cAAc,EAAEC,iBAAiB,CAAA,CAAA,EAAA,CAAA;AAF5B,GAAP;AAID","sourcesContent":["const DEGREES_TO_RADIANS = Math.PI / 180;\n\nconst DAY_IN_MS = 1000 * 60 * 60 * 24;\nconst JD1970 = 2440588; // Julian Day year 1970\nconst JD2000 = 2451545; // Julian Day year 2000\n\n// This angle ε [epsilon] is called the obliquity of the ecliptic and its value at the beginning of 2000 was 23.4397°\nconst e = DEGREES_TO_RADIANS * 23.4397; // obliquity of the Earth\n\n// Refer https://www.aa.quae.nl/en/reken/zonpositie.html\n// \"The Mean Anomaly\" section for explanation\nconst M0 = 357.5291; // Earth mean anomaly on start day\nconst M1 = 0.98560028; // Earth angle traverses on average per day seen from the sun\n\nconst THETA0 = 280.147; // The sidereal time (in degrees) at longitude 0° at the instant defined by JD2000\nconst THETA1 = 360.9856235; // The rate of change of the sidereal time, in degrees per day.\n\n/**\n * A position in the sky defined by two angles\n * The altitude is 0° at the horizon, +90° in the zenith (straight over your head), and −90° in the nadir (straight down).\n * The azimuth is the direction along the horizon, which we measure from south to west.\n * South has azimuth 0°, west +90°, north +180°, and east +270° (or −90°, that's the same thing).\n */\nexport type CelestialPosition = {\n  azimuth: number;\n  altitude: number;\n};\n\n/**\n * Calculate sun position\n * based on https://www.aa.quae.nl/en/reken/zonpositie.html\n * inspired by https://github.com/mourner/suncalc/blob/master/suncalc.js\n */\nexport function getSunPosition(\n  timestamp: number | Date,\n  latitude: number,\n  longitude: number\n): CelestialPosition {\n  const longitudeWestInRadians = DEGREES_TO_RADIANS * -longitude;\n  const phi = DEGREES_TO_RADIANS * latitude;\n  const d = toDays(timestamp);\n\n  const c = getSunCoords(d);\n  // hour angle\n  const H = getSiderealTime(d, longitudeWestInRadians) - c.rightAscension;\n\n  return {\n    azimuth: getAzimuth(H, phi, c.declination),\n    altitude: getAltitude(H, phi, c.declination)\n  };\n}\n\nexport function getSunDirection(\n  timestamp: number | Date,\n  latitude: number,\n  longitude: number\n): number[] {\n  const {azimuth, altitude} = getSunPosition(timestamp, latitude, longitude);\n\n  // solar position to light direction\n  return [\n    Math.sin(azimuth) * Math.cos(altitude),\n    Math.cos(azimuth) * Math.cos(altitude),\n    -Math.sin(altitude)\n  ];\n}\n\nfunction toJulianDay(timestamp: number | Date): number {\n  const ts = typeof timestamp === 'number' ? timestamp : timestamp.getTime();\n  return ts / DAY_IN_MS - 0.5 + JD1970;\n}\n\nfunction toDays(timestamp: number | Date): number {\n  return toJulianDay(timestamp) - JD2000;\n}\n\nfunction getRightAscension(eclipticLongitude: number, b: number): number {\n  const lambda = eclipticLongitude;\n  return Math.atan2(Math.sin(lambda) * Math.cos(e) - Math.tan(b) * Math.sin(e), Math.cos(lambda));\n}\n\nfunction getDeclination(eclipticLongitude: number, b: number): number {\n  const lambda = eclipticLongitude;\n  return Math.asin(Math.sin(b) * Math.cos(e) + Math.cos(b) * Math.sin(e) * Math.sin(lambda));\n}\n\nfunction getAzimuth(hourAngle: number, latitudeInRadians: number, declination: number): number {\n  const H = hourAngle;\n  const phi = latitudeInRadians;\n  const delta = declination;\n  return Math.atan2(Math.sin(H), Math.cos(H) * Math.sin(phi) - Math.tan(delta) * Math.cos(phi));\n}\n\nfunction getAltitude(hourAngle: number, latitudeInRadians: number, declination: number): number {\n  const H = hourAngle;\n  const phi = latitudeInRadians;\n  const delta = declination;\n  return Math.asin(Math.sin(phi) * Math.sin(delta) + Math.cos(phi) * Math.cos(delta) * Math.cos(H));\n}\n\n// https://www.aa.quae.nl/en/reken/zonpositie.html\n// \"The Observer section\"\nfunction getSiderealTime(dates: number, longitudeWestInRadians: number): number {\n  return DEGREES_TO_RADIANS * (THETA0 + THETA1 * dates) - longitudeWestInRadians;\n}\n\nfunction getSolarMeanAnomaly(days: number): number {\n  return DEGREES_TO_RADIANS * (M0 + M1 * days);\n}\n\nfunction getEclipticLongitude(meanAnomaly: number): number {\n  const M = meanAnomaly;\n  // equation of center\n  const C =\n    DEGREES_TO_RADIANS * (1.9148 * Math.sin(M) + 0.02 * Math.sin(2 * M) + 0.0003 * Math.sin(3 * M));\n  // perihelion of the Earth\n  const P = DEGREES_TO_RADIANS * 102.9372;\n\n  return M + C + P + Math.PI;\n}\n\nfunction getSunCoords(dates: number): {\n  declination: number;\n  rightAscension: number;\n} {\n  const M = getSolarMeanAnomaly(dates);\n  const L = getEclipticLongitude(M);\n\n  return {\n    declination: getDeclination(L, 0),\n    rightAscension: getRightAscension(L, 0)\n  };\n}\n"]},"metadata":{},"sourceType":"module"}