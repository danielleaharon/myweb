{"ast":null,"code":"import { GAME_CONFIG_SET_MODE, GAME_CONFIG_SET_DIFFICULTY, GAME_CONFIG_SET_START, GAMEBOARD_GENERATE_TILES, GAMEBOARD_GENERATE_LADDERS, GAMEBOARD_GENERATE_SNAKES, PLAYER_CREATE, PLAYER_DELETE, PLAYER_DELETE_ALL, PLAYER_UPDATE_NAME, PLAYER_UPDATE_POSITION, PLAYER_STATS_UPDATE, GAME_CONFIG_SET_WINNER, GAME_CONFIG_UPDATE_DICE, GAME_CONFIG_RESET_DICE, GAME_CONFIG_RESET_DICE_SIX_COUNT, GAME_CONFIG_SET_CURRENT, GAME_UPDATE_PERFECT_THROWS } from '../Constants';\nimport * as Helper from '../../global/utils/Helper';\nexport function gameSetMode(data) {\n  return {\n    type: GAME_CONFIG_SET_MODE,\n    payload: data\n  };\n}\nexport function gameSetDifficulty(data) {\n  return {\n    type: GAME_CONFIG_SET_DIFFICULTY,\n    payload: data\n  };\n}\nexport function gameboardGenerateTiles() {\n  let board_tiles = Helper.generateGameboard();\n  return {\n    type: GAMEBOARD_GENERATE_TILES,\n    payload: board_tiles\n  };\n}\nexport function gameboardGenerateLadders(difficulty) {\n  let ladders = Helper.generateLadders(difficulty);\n  return {\n    type: GAMEBOARD_GENERATE_LADDERS,\n    payload: ladders\n  };\n}\nexport function gameboardGenerateSnakes(difficulty) {\n  let snakes = Helper.generateSnakes(difficulty);\n  return {\n    type: GAMEBOARD_GENERATE_SNAKES,\n    payload: snakes\n  };\n}\nexport function gameboardGenerateBoard(data) {\n  return (dispatch, getState) => {\n    dispatch(gameboardGenerateTiles());\n    let difficulty = getState().game.get('config').get('difficulty');\n    dispatch(gameboardGenerateLadders(difficulty));\n    dispatch(gameboardGenerateSnakes(difficulty));\n  };\n}\nexport function gameRollDice() {\n  let random = Math.floor(Math.random() * 6 + 1);\n  return {\n    type: GAME_CONFIG_UPDATE_DICE,\n    payload: random\n  };\n}\nexport function gameResetDice() {\n  return {\n    type: GAME_CONFIG_RESET_DICE\n  };\n}\nexport function gameResetDiceSixCount() {\n  return {\n    type: GAME_CONFIG_RESET_DICE_SIX_COUNT\n  };\n}\nexport function gameSetStart() {\n  return {\n    type: GAME_CONFIG_SET_START\n  };\n}\nexport function gameSetWinner(data) {\n  return {\n    type: GAME_CONFIG_SET_WINNER,\n    payload: data\n  };\n}\nexport function gameUpdateCurrentPlayer(player_id) {\n  return {\n    type: GAME_CONFIG_SET_CURRENT,\n    payload: player_id\n  };\n}\nexport function playerCreateNew() {\n  let index_position = Helper.getPlayerStartingPosition();\n  let data = {\n    name: '',\n    tile: index_position,\n    index: 1,\n    perfect_throws: 'calculating...'\n  };\n  return {\n    type: PLAYER_CREATE,\n    payload: data\n  };\n}\nexport function playerDeleteAll() {\n  return {\n    type: PLAYER_DELETE_ALL\n  };\n}\nexport function playerCreateEmpty() {\n  return (dispatch, getState) => {\n    let gamemode = getState().game.get('config').get('mode');\n\n    if (gamemode === 1) {\n      dispatch(playerDeleteAll());\n      dispatch(playerCreateNew());\n    } else {\n      dispatch(playerDeleteAll());\n      dispatch(playerCreateNew());\n      dispatch(playerCreateNew());\n    }\n  };\n}\nexport function playerCreate(data) {\n  return {\n    type: PLAYER_CREATE,\n    payload: data\n  };\n}\nexport function playerDelete(data) {\n  return {\n    type: PLAYER_DELETE,\n    payload: data\n  };\n}\nexport function playerUpdateName(data) {\n  return {\n    type: PLAYER_UPDATE_NAME,\n    payload: data\n  };\n}\nexport function gameUpdateStats(data) {\n  return {\n    type: PLAYER_STATS_UPDATE,\n    payload: data\n  };\n}\nexport function gameUpdatePerfectThrows() {\n  let previous_player_data = Helper.getLastCalculatedPlayerPosition();\n  let perfect_throws = Helper.calculatePerfectThrowsFromPosition(previous_player_data.index);\n  return {\n    type: GAME_UPDATE_PERFECT_THROWS,\n    payload: perfect_throws\n  };\n}\nexport function playerGetNewPosition(data) {\n  let updated_data = Helper.calculatePlayerNewPosition(data);\n  updated_data.id = data.id;\n  return {\n    type: PLAYER_UPDATE_POSITION,\n    payload: updated_data\n  };\n}\nexport function playerUpdatePosition(data, change = false) {\n  return (dispatch, getState) => {\n    dispatch(playerGetNewPosition(data));\n    let previous_player_data = Helper.getLastCalculatedPlayerPosition();\n    setTimeout(function () {\n      dispatch(gameUpdatePerfectThrows());\n    }, 100); // console.log('previous_player_data',previous_player_data);\n\n    if (previous_player_data.index === 100) {\n      let player_index = Helper.getPlayerIndexBasedOnId(getState().player.get('all'), data.id);\n      setTimeout(function () {\n        dispatch(gameSetWinner(player_index));\n      }, 500);\n    }\n\n    let stats_ladder_count = 0;\n    let stats_snake_count = 0;\n    let ladders = getState().gameboard.get('ladders');\n    ladders.find(function (ladder) {\n      if (ladder.from === previous_player_data.index) {\n        stats_ladder_count++;\n        setTimeout(function () {\n          dispatch(playerUpdatePosition({\n            id: previous_player_data.id,\n            index: previous_player_data.index,\n            moves: ladder.to - ladder.from\n          }));\n        }, 400);\n      }\n    });\n    let snakes = getState().gameboard.get('snakes');\n    snakes.find(function (snake) {\n      if (snake.from === previous_player_data.index) {\n        stats_snake_count++;\n        setTimeout(function () {\n          dispatch(playerUpdatePosition({\n            id: previous_player_data.id,\n            index: previous_player_data.index,\n            moves: snake.to - snake.from\n          }));\n        }, 400);\n      }\n    });\n    let dice_number = getState().game.get('config').get('dice');\n\n    if (change) {\n      let dice_six_count = getState().game.get('config').get('dice_six_count'); // reset the dice\n\n      dispatch(gameResetDice());\n\n      let update_current_player = () => {\n        // check which player should play next?\n        let total_players = getState().player.get('all').size;\n        total_players = total_players - 1; // because we're comparing indexes, and it starts at 0;\n        // console.log('total_players',total_players);\n\n        let current_player_index = getState().game.get('config').get('current'); // console.log('current_player_index',current_player_index);\n\n        let next_player = 0;\n\n        if (current_player_index < total_players) {\n          next_player = current_player_index + 1;\n        }\n\n        dispatch(gameUpdateCurrentPlayer(next_player));\n      };\n\n      if (dice_number === 6 || dice_six_count <= 3) {\n        if (dice_six_count >= 3) {\n          dispatch(gameResetDiceSixCount());\n          update_current_player();\n        }\n\n        if (dice_number != 6) {\n          dispatch(gameResetDiceSixCount());\n          update_current_player();\n        }\n      } else {\n        dispatch(gameResetDiceSixCount());\n        update_current_player();\n      }\n    }\n\n    dispatch(gameUpdateStats({\n      id: data.id,\n      rolls: change === true ? 1 : 0,\n      sixes: dice_number === 6 ? 1 : 0,\n      ladders: stats_ladder_count,\n      snakes: stats_snake_count\n    }));\n  };\n}","map":{"version":3,"sources":["/Users/user/Desktop/עבודות להגשה/myweb/src/components/snakes/redux/actions/index.js"],"names":["GAME_CONFIG_SET_MODE","GAME_CONFIG_SET_DIFFICULTY","GAME_CONFIG_SET_START","GAMEBOARD_GENERATE_TILES","GAMEBOARD_GENERATE_LADDERS","GAMEBOARD_GENERATE_SNAKES","PLAYER_CREATE","PLAYER_DELETE","PLAYER_DELETE_ALL","PLAYER_UPDATE_NAME","PLAYER_UPDATE_POSITION","PLAYER_STATS_UPDATE","GAME_CONFIG_SET_WINNER","GAME_CONFIG_UPDATE_DICE","GAME_CONFIG_RESET_DICE","GAME_CONFIG_RESET_DICE_SIX_COUNT","GAME_CONFIG_SET_CURRENT","GAME_UPDATE_PERFECT_THROWS","Helper","gameSetMode","data","type","payload","gameSetDifficulty","gameboardGenerateTiles","board_tiles","generateGameboard","gameboardGenerateLadders","difficulty","ladders","generateLadders","gameboardGenerateSnakes","snakes","generateSnakes","gameboardGenerateBoard","dispatch","getState","game","get","gameRollDice","random","Math","floor","gameResetDice","gameResetDiceSixCount","gameSetStart","gameSetWinner","gameUpdateCurrentPlayer","player_id","playerCreateNew","index_position","getPlayerStartingPosition","name","tile","index","perfect_throws","playerDeleteAll","playerCreateEmpty","gamemode","playerCreate","playerDelete","playerUpdateName","gameUpdateStats","gameUpdatePerfectThrows","previous_player_data","getLastCalculatedPlayerPosition","calculatePerfectThrowsFromPosition","playerGetNewPosition","updated_data","calculatePlayerNewPosition","id","playerUpdatePosition","change","setTimeout","player_index","getPlayerIndexBasedOnId","player","stats_ladder_count","stats_snake_count","gameboard","find","ladder","from","moves","to","snake","dice_number","dice_six_count","update_current_player","total_players","size","current_player_index","next_player","rolls","sixes"],"mappings":"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","sourcesContent":["import {\n\tGAME_CONFIG_SET_MODE,\n\tGAME_CONFIG_SET_DIFFICULTY,\n\tGAME_CONFIG_SET_START,\n\n\tGAMEBOARD_GENERATE_TILES,\n\tGAMEBOARD_GENERATE_LADDERS,\n\tGAMEBOARD_GENERATE_SNAKES,\n\n\tPLAYER_CREATE,\n\tPLAYER_DELETE,\n\tPLAYER_DELETE_ALL,\n\tPLAYER_UPDATE_NAME,\n\tPLAYER_UPDATE_POSITION,\n\tPLAYER_STATS_UPDATE,\n\n\tGAME_CONFIG_SET_WINNER,\n\tGAME_CONFIG_UPDATE_DICE,\n\tGAME_CONFIG_RESET_DICE,\n\tGAME_CONFIG_RESET_DICE_SIX_COUNT,\n\tGAME_CONFIG_SET_CURRENT,\n\tGAME_UPDATE_PERFECT_THROWS,\n} from '../Constants';\nimport * as Helper from '../../global/utils/Helper'; \n\n\n\n\nexport function gameSetMode( data ) {\n\treturn { type: GAME_CONFIG_SET_MODE, payload: data }\n}\n\n\nexport function gameSetDifficulty( data ) {\n\treturn { type: GAME_CONFIG_SET_DIFFICULTY, payload: data }\n}\n\n\nexport function gameboardGenerateTiles() {\n\tlet board_tiles = Helper.generateGameboard();\n\treturn { type: GAMEBOARD_GENERATE_TILES, payload: board_tiles }\n}\n\n\nexport function gameboardGenerateLadders( difficulty ) {\n\tlet ladders = Helper.generateLadders(difficulty);\n\treturn { type: GAMEBOARD_GENERATE_LADDERS, payload: ladders }\n}\n\nexport function gameboardGenerateSnakes( difficulty ) {\n\tlet snakes = Helper.generateSnakes(difficulty);\n\treturn { type: GAMEBOARD_GENERATE_SNAKES, payload: snakes }\n}\n\n\nexport function gameboardGenerateBoard( data ) {\n\treturn (dispatch, getState) => {\n\n\t\tdispatch( gameboardGenerateTiles() );\n\n\t\tlet difficulty = getState().game.get('config').get('difficulty');\n\t\tdispatch( gameboardGenerateLadders( difficulty ) );\n\t\tdispatch( gameboardGenerateSnakes( difficulty ) );\n\n\t};\n}\n\n\nexport function gameRollDice() {\n\tlet random = Math.floor((Math.random() * 6) + 1);\n\treturn { type: GAME_CONFIG_UPDATE_DICE, payload: random }\n}\n\nexport function gameResetDice() {\n\treturn { type: GAME_CONFIG_RESET_DICE }\n}\n\nexport function gameResetDiceSixCount() {\n\treturn { type: GAME_CONFIG_RESET_DICE_SIX_COUNT }\n}\n\nexport function gameSetStart() {\n\treturn { type: GAME_CONFIG_SET_START }\n}\nexport function gameSetWinner( data ) {\n\treturn { type: GAME_CONFIG_SET_WINNER, payload: data }\n}\n\n\nexport function gameUpdateCurrentPlayer( player_id ) {\n\treturn { type: GAME_CONFIG_SET_CURRENT, payload: player_id }\n}\n\n\nexport function playerCreateNew() {\n\tlet index_position = Helper.getPlayerStartingPosition();\n\tlet data = {\n\t\tname: '',\n\t\ttile: index_position,\n\t\tindex: 1,\n\t\tperfect_throws: 'calculating...',\n\t}\n\treturn { type: PLAYER_CREATE, payload: data }\n}\n\n\nexport function playerDeleteAll() {\n\treturn { type: PLAYER_DELETE_ALL }\n}\n\nexport function playerCreateEmpty() {\n\treturn (dispatch, getState) => {\n\t\tlet gamemode = getState().game.get('config').get('mode');\n\n\t\tif( gamemode === 1 ) {\n\t\t\tdispatch( playerDeleteAll() );\n\t\t\tdispatch( playerCreateNew() );\n\t\t} else {\n\t\t\tdispatch( playerDeleteAll() );\n\t\t\tdispatch( playerCreateNew() );\n\t\t\tdispatch( playerCreateNew() );\n\t\t}\n\t}\n}\n\n\n\nexport function playerCreate( data ) {\n\treturn { type: PLAYER_CREATE, payload: data }\n}\n\n\nexport function playerDelete( data ) {\n\treturn { type: PLAYER_DELETE, payload: data }\n}\n\nexport function playerUpdateName( data ) {\n\treturn { type: PLAYER_UPDATE_NAME, payload: data }\n}\n\n\n\nexport function gameUpdateStats( data ) {\n\treturn { type: PLAYER_STATS_UPDATE, payload: data }\n}\n\n\nexport function gameUpdatePerfectThrows() {\n\tlet previous_player_data = Helper.getLastCalculatedPlayerPosition();\n\tlet perfect_throws = Helper.calculatePerfectThrowsFromPosition( previous_player_data.index );\n\treturn { type: GAME_UPDATE_PERFECT_THROWS, payload: perfect_throws }\n}\n\n\nexport function playerGetNewPosition( data ) {\n\tlet updated_data = Helper.calculatePlayerNewPosition( data );\n\tupdated_data.id = data.id;\n\treturn { type: PLAYER_UPDATE_POSITION, payload: updated_data }\n}\n\n\nexport function playerUpdatePosition( data, change=false ) {\n\treturn (dispatch, getState) => {\n\t\tdispatch( playerGetNewPosition(data) );\n\n\t\tlet previous_player_data = Helper.getLastCalculatedPlayerPosition();\n\n\t\tsetTimeout(function() {\n\t\t\tdispatch( gameUpdatePerfectThrows() );\n\t\t}, 100);\n\n\t\t// console.log('previous_player_data',previous_player_data);\n\t\tif( previous_player_data.index === 100 ) {\n\t\t\tlet player_index = Helper.getPlayerIndexBasedOnId( getState().player.get('all'), data.id );\n\t\t\tsetTimeout(function() {\n\t\t\t\tdispatch( gameSetWinner(player_index) );\n\t\t\t}, 500);\n\t\t}\n\n\t\tlet stats_ladder_count = 0;\n\t\tlet stats_snake_count = 0;\n\n\t\tlet ladders = getState().gameboard.get('ladders');\n\t\tladders.find(function(ladder) {\n\t\t\tif( ladder.from === previous_player_data.index ) {\n\t\t\t\tstats_ladder_count++;\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\tdispatch( playerUpdatePosition({ id: previous_player_data.id, index: previous_player_data.index, moves: ladder.to-ladder.from }) );\n\t\t\t\t}, 400);\n\t\t\t}\n\t\t});\n\n\t\tlet snakes = getState().gameboard.get('snakes');\n\t\tsnakes.find(function(snake) {\n\t\t\tif( snake.from === previous_player_data.index ) {\n\t\t\t\tstats_snake_count++;\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\tdispatch( playerUpdatePosition({ id: previous_player_data.id, index: previous_player_data.index, moves: snake.to-snake.from }) );\n\t\t\t\t}, 400);\n\t\t\t}\n\t\t});\n\n\n\t\tlet dice_number = getState().game.get('config').get('dice');\n\t\tif( change ) {\n\n\t\t\tlet dice_six_count = getState().game.get('config').get('dice_six_count');\n\n\t\t\t// reset the dice\n\t\t\tdispatch( gameResetDice() );\n\n\n\t\t\tlet update_current_player = () => {\n\t\t\t\t// check which player should play next?\n\t\t\t\tlet total_players = getState().player.get('all').size;\n\t\t\t\ttotal_players = total_players - 1; // because we're comparing indexes, and it starts at 0;\n\t\t\t\t// console.log('total_players',total_players);\n\n\t\t\t\tlet current_player_index = getState().game.get('config').get('current');\n\t\t\t\t// console.log('current_player_index',current_player_index);\n\n\t\t\t\tlet next_player = 0;\n\t\t\t\tif( current_player_index < total_players ) { next_player = current_player_index + 1; }\n\n\t\t\t\tdispatch( gameUpdateCurrentPlayer(next_player) );\n\t\t\t}\n\n\t\t\tif( dice_number === 6 || dice_six_count <= 3 ) {\n\t\t\t\tif( dice_six_count >= 3 ) {\n\t\t\t\t\tdispatch( gameResetDiceSixCount() );\n\t\t\t\t\tupdate_current_player();\n\t\t\t\t}\n\t\t\t\tif( dice_number != 6 ) {\n\t\t\t\t\tdispatch( gameResetDiceSixCount() );\n\t\t\t\t\tupdate_current_player();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdispatch( gameResetDiceSixCount() );\n\t\t\t\tupdate_current_player();\n\t\t\t}\n\n\t\t}\n\n\t\tdispatch(\n\t\t\tgameUpdateStats({\n\t\t\t\tid: data.id,\n\t\t\t\trolls: ( change === true ) ? 1 : 0,\n\t\t\t\tsixes: ( dice_number === 6 ) ? 1 : 0,\n\t\t\t\tladders: stats_ladder_count,\n\t\t\t\tsnakes: stats_snake_count,\n\t\t\t})\n\t\t);\n\n\t};\n}\n\n\n"]},"metadata":{},"sourceType":"module"}