{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Layer, project32, picking, UNIT } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport vs from './arc-layer-vertex.glsl';\nimport fs from './arc-layer-fragment.glsl';\nconst DEFAULT_COLOR = [0, 0, 0, 255];\nconst defaultProps = {\n  getSourcePosition: {\n    type: 'accessor',\n    value: x => x.sourcePosition\n  },\n  getTargetPosition: {\n    type: 'accessor',\n    value: x => x.targetPosition\n  },\n  getSourceColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getTargetColor: {\n    type: 'accessor',\n    value: DEFAULT_COLOR\n  },\n  getWidth: {\n    type: 'accessor',\n    value: 1\n  },\n  getHeight: {\n    type: 'accessor',\n    value: 1\n  },\n  getTilt: {\n    type: 'accessor',\n    value: 0\n  },\n  greatCircle: false,\n  widthUnits: 'pixels',\n  widthScale: {\n    type: 'number',\n    value: 1,\n    min: 0\n  },\n  widthMinPixels: {\n    type: 'number',\n    value: 0,\n    min: 0\n  },\n  widthMaxPixels: {\n    type: 'number',\n    value: Number.MAX_SAFE_INTEGER,\n    min: 0\n  }\n};\nexport default class ArcLayer extends Layer {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", void 0);\n  }\n\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, picking]\n    });\n  }\n\n  get wrapLongitude() {\n    return false;\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager();\n    attributeManager.addInstanced({\n      instanceSourcePositions: {\n        size: 3,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getSourcePosition'\n      },\n      instanceTargetPositions: {\n        size: 3,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getTargetPosition'\n      },\n      instanceSourceColors: {\n        size: this.props.colorFormat.length,\n        type: 5121,\n        normalized: true,\n        transition: true,\n        accessor: 'getSourceColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceTargetColors: {\n        size: this.props.colorFormat.length,\n        type: 5121,\n        normalized: true,\n        transition: true,\n        accessor: 'getTargetColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getWidth',\n        defaultValue: 1\n      },\n      instanceHeights: {\n        size: 1,\n        transition: true,\n        accessor: 'getHeight',\n        defaultValue: 1\n      },\n      instanceTilts: {\n        size: 1,\n        transition: true,\n        accessor: 'getTilt',\n        defaultValue: 0\n      }\n    });\n  }\n\n  updateState(opts) {\n    super.updateState(opts);\n\n    if (opts.changeFlags.extensionsChanged) {\n      var _this$state$model;\n\n      const {\n        gl\n      } = this.context;\n      (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n\n  draw({\n    uniforms\n  }) {\n    const {\n      widthUnits,\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels,\n      greatCircle,\n      wrapLongitude\n    } = this.props;\n    this.state.model.setUniforms(uniforms).setUniforms({\n      greatCircle,\n      widthUnits: UNIT[widthUnits],\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels,\n      useShortestPath: wrapLongitude\n    }).draw();\n  }\n\n  _getModel(gl) {\n    let positions = [];\n    const NUM_SEGMENTS = 50;\n\n    for (let i = 0; i < NUM_SEGMENTS; i++) {\n      positions = positions.concat([i, 1, 0, i, -1, 0]);\n    }\n\n    const model = new Model(gl, { ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: 5,\n        attributes: {\n          positions: new Float32Array(positions)\n        }\n      }),\n      isInstanced: true\n    });\n    model.setUniforms({\n      numSegments: NUM_SEGMENTS\n    });\n    return model;\n  }\n\n}\n\n_defineProperty(ArcLayer, \"layerName\", 'ArcLayer');\n\n_defineProperty(ArcLayer, \"defaultProps\", defaultProps);","map":{"version":3,"sources":["../../../src/arc-layer/arc-layer.ts"],"names":["DEFAULT_COLOR","defaultProps","getSourcePosition","type","value","x","sourcePosition","getTargetPosition","targetPosition","getSourceColor","getTargetColor","getWidth","getHeight","getTilt","greatCircle","widthUnits","widthScale","min","widthMinPixels","widthMaxPixels","Number","ArcLayer","getShaders","modules","wrapLongitude","initializeState","attributeManager","instanceSourcePositions","size","fp64","transition","accessor","instanceTargetPositions","instanceSourceColors","normalized","defaultValue","instanceTargetColors","instanceWidths","instanceHeights","instanceTilts","updateState","opts","gl","draw","uniforms","UNIT","useShortestPath","_getModel","positions","NUM_SEGMENTS","i","model","id","geometry","drawMode","attributes","isInstanced","numSegments"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Layer,\n  project32,\n  picking,\n  UNIT,\n  UpdateParameters,\n  LayerProps,\n  Unit,\n  AccessorFunction,\n  Position,\n  Accessor,\n  Color,\n  DefaultProps\n} from '@deck.gl/core';\n\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './arc-layer-vertex.glsl';\nimport fs from './arc-layer-fragment.glsl';\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<ArcLayerProps> = {\n  getSourcePosition: {type: 'accessor', value: x => x.sourcePosition},\n  getTargetPosition: {type: 'accessor', value: x => x.targetPosition},\n  getSourceColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getTargetColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getWidth: {type: 'accessor', value: 1},\n  getHeight: {type: 'accessor', value: 1},\n  getTilt: {type: 'accessor', value: 0},\n\n  greatCircle: false,\n\n  widthUnits: 'pixels',\n  widthScale: {type: 'number', value: 1, min: 0},\n  widthMinPixels: {type: 'number', value: 0, min: 0},\n  widthMaxPixels: {type: 'number', value: Number.MAX_SAFE_INTEGER, min: 0}\n};\n\n/** All properties supported by ArcLayer. */\nexport type ArcLayerProps<DataT = any> = _ArcLayerProps<DataT> & LayerProps<DataT>;\n\n/** Properties added by ArcLayer. */\ntype _ArcLayerProps<DataT> = {\n  /**\n   * If `true`, create the arc along the shortest path on the earth surface.\n   * @default false\n   */\n  greatCircle?: boolean;\n\n  /**\n   * The units of the line width, one of `'meters'`, `'common'`, and `'pixels'`\n   * @default 'pixels'\n   */\n  widthUnits?: Unit;\n\n  /**\n   * The scaling multiplier for the width of each line.\n   * @default 1\n   */\n  widthScale?: number;\n\n  /**\n   * The minimum line width in pixels.\n   * @default 0\n   */\n  widthMinPixels?: number;\n\n  /**\n   * The maximum line width in pixels.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  widthMaxPixels?: number;\n\n  /**\n   * Method called to retrieve the source position of each object.\n   * @default object => object.sourcePosition\n   */\n  getSourcePosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * Method called to retrieve the target position of each object.\n   * @default object => object.targetPosition\n   */\n  getTargetPosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * The rgba color is in the format of `[r, g, b, [a]]`.\n   * @default [0, 0, 0, 255]\n   */\n  getSourceColor?: Accessor<DataT, Color>;\n\n  /**\n   * The rgba color is in the format of `[r, g, b, [a]]`.\n   * @default [0, 0, 0, 255]\n   */\n  getTargetColor?: Accessor<DataT, Color>;\n\n  /**\n   * The line width of each object, in units specified by `widthUnits`.\n   * @default 1\n   */\n  getWidth?: Accessor<DataT, number>;\n\n  /**\n   * Multiplier of layer height. `0` will make the layer flat.\n   * @default 1\n   */\n  getHeight?: Accessor<DataT, number>;\n\n  /**\n   * Use to tilt the arc to the side if you have multiple arcs with the same source and target positions.\n   * @default 0\n   */\n  getTilt?: Accessor<DataT, number>;\n};\n\n/** Render raised arcs joining pairs of source and target coordinates. */\nexport default class ArcLayer<DataT = any, ExtraPropsT = {}> extends Layer<\n  ExtraPropsT & Required<_ArcLayerProps<DataT>>\n> {\n  static layerName = 'ArcLayer';\n  static defaultProps = defaultProps;\n\n  state!: Layer['state'] & {\n    model?: Model;\n  };\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]}); // 'project' module added by default.\n  }\n\n  // This layer has its own wrapLongitude logic\n  get wrapLongitude() {\n    return false;\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager()!;\n\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instanceSourcePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getSourcePosition'\n      },\n      instanceTargetPositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getTargetPosition'\n      },\n      instanceSourceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getSourceColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceTargetColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getTargetColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getWidth',\n        defaultValue: 1\n      },\n      instanceHeights: {\n        size: 1,\n        transition: true,\n        accessor: 'getHeight',\n        defaultValue: 1\n      },\n      instanceTilts: {\n        size: 1,\n        transition: true,\n        accessor: 'getTilt',\n        defaultValue: 0\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState(opts: UpdateParameters<this>): void {\n    super.updateState(opts);\n    // Re-generate model if geometry changed\n    if (opts.changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager()!.invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {widthUnits, widthScale, widthMinPixels, widthMaxPixels, greatCircle, wrapLongitude} =\n      this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        greatCircle,\n        widthUnits: UNIT[widthUnits],\n        widthScale,\n        widthMinPixels,\n        widthMaxPixels,\n        useShortestPath: wrapLongitude\n      })\n      .draw();\n  }\n\n  protected _getModel(gl: WebGLRenderingContext): Model {\n    let positions: number[] = [];\n    const NUM_SEGMENTS = 50;\n    /*\n     *  (0, -1)-------------_(1, -1)\n     *       |          _,-\"  |\n     *       o      _,-\"      o\n     *       |  _,-\"          |\n     *   (0, 1)\"-------------(1, 1)\n     */\n    for (let i = 0; i < NUM_SEGMENTS; i++) {\n      positions = positions.concat([i, 1, 0, i, -1, 0]);\n    }\n\n    const model = new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_STRIP,\n        attributes: {\n          positions: new Float32Array(positions)\n        }\n      }),\n      isInstanced: true\n    });\n\n    model.setUniforms({numSegments: NUM_SEGMENTS});\n\n    return model;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}