{"ast":null,"code":"import Matrix from './base/matrix';\nimport { checkVector } from '../lib/validators';\nimport { vec4_transformMat3 } from '../lib/gl-matrix-extras';\nimport * as mat3 from 'gl-matrix/mat3';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nvar INDICES;\n\n(function (INDICES) {\n  INDICES[INDICES[\"COL0ROW0\"] = 0] = \"COL0ROW0\";\n  INDICES[INDICES[\"COL0ROW1\"] = 1] = \"COL0ROW1\";\n  INDICES[INDICES[\"COL0ROW2\"] = 2] = \"COL0ROW2\";\n  INDICES[INDICES[\"COL1ROW0\"] = 3] = \"COL1ROW0\";\n  INDICES[INDICES[\"COL1ROW1\"] = 4] = \"COL1ROW1\";\n  INDICES[INDICES[\"COL1ROW2\"] = 5] = \"COL1ROW2\";\n  INDICES[INDICES[\"COL2ROW0\"] = 6] = \"COL2ROW0\";\n  INDICES[INDICES[\"COL2ROW1\"] = 7] = \"COL2ROW1\";\n  INDICES[INDICES[\"COL2ROW2\"] = 8] = \"COL2ROW2\";\n})(INDICES || (INDICES = {}));\n\nconst IDENTITY_MATRIX = Object.freeze([1, 0, 0, 0, 1, 0, 0, 0, 1]);\nexport default class Matrix3 extends Matrix {\n  static get IDENTITY() {\n    return getIdentityMatrix();\n  }\n\n  static get ZERO() {\n    return getZeroMatrix();\n  }\n\n  get ELEMENTS() {\n    return 9;\n  }\n\n  get RANK() {\n    return 3;\n  }\n\n  get INDICES() {\n    return INDICES;\n  }\n\n  constructor(array, ...args) {\n    super(-0, -0, -0, -0, -0, -0, -0, -0, -0);\n\n    if (arguments.length === 1 && Array.isArray(array)) {\n      this.copy(array);\n    } else if (args.length > 0) {\n      this.copy([array, ...args]);\n    } else {\n      this.identity();\n    }\n  }\n\n  copy(array) {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    this[3] = array[3];\n    this[4] = array[4];\n    this[5] = array[5];\n    this[6] = array[6];\n    this[7] = array[7];\n    this[8] = array[8];\n    return this.check();\n  }\n\n  identity() {\n    return this.copy(IDENTITY_MATRIX);\n  }\n\n  fromObject(object) {\n    return this.check();\n  }\n\n  fromQuaternion(q) {\n    mat3.fromQuat(this, q);\n    return this.check();\n  }\n\n  set(m00, m10, m20, m01, m11, m21, m02, m12, m22) {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m01;\n    this[4] = m11;\n    this[5] = m21;\n    this[6] = m02;\n    this[7] = m12;\n    this[8] = m22;\n    return this.check();\n  }\n\n  setRowMajor(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m01;\n    this[4] = m11;\n    this[5] = m21;\n    this[6] = m02;\n    this[7] = m12;\n    this[8] = m22;\n    return this.check();\n  }\n\n  determinant() {\n    return mat3.determinant(this);\n  }\n\n  transpose() {\n    mat3.transpose(this, this);\n    return this.check();\n  }\n\n  invert() {\n    mat3.invert(this, this);\n    return this.check();\n  }\n\n  multiplyLeft(a) {\n    mat3.multiply(this, a, this);\n    return this.check();\n  }\n\n  multiplyRight(a) {\n    mat3.multiply(this, this, a);\n    return this.check();\n  }\n\n  rotate(radians) {\n    mat3.rotate(this, this, radians);\n    return this.check();\n  }\n\n  scale(factor) {\n    if (Array.isArray(factor)) {\n      mat3.scale(this, this, factor);\n    } else {\n      mat3.scale(this, this, [factor, factor]);\n    }\n\n    return this.check();\n  }\n\n  translate(vec) {\n    mat3.translate(this, this, vec);\n    return this.check();\n  }\n\n  transform(vector, result) {\n    let out;\n\n    switch (vector.length) {\n      case 2:\n        out = vec2.transformMat3(result || [-0, -0], vector, this);\n        break;\n\n      case 3:\n        out = vec3.transformMat3(result || [-0, -0, -0], vector, this);\n        break;\n\n      case 4:\n        out = vec4_transformMat3(result || [-0, -0, -0, -0], vector, this);\n        break;\n\n      default:\n        throw new Error('Illegal vector');\n    }\n\n    checkVector(out, vector.length);\n    return out;\n  }\n\n  transformVector(vector, result) {\n    return this.transform(vector, result);\n  }\n\n  transformVector2(vector, result) {\n    return this.transform(vector, result);\n  }\n\n  transformVector3(vector, result) {\n    return this.transform(vector, result);\n  }\n\n}\nlet ZERO_MATRIX3;\nlet IDENTITY_MATRIX3;\n\nfunction getZeroMatrix() {\n  if (!ZERO_MATRIX3) {\n    ZERO_MATRIX3 = new Matrix3([0, 0, 0, 0, 0, 0, 0, 0, 0]);\n    Object.freeze(ZERO_MATRIX3);\n  }\n\n  return ZERO_MATRIX3;\n}\n\nfunction getIdentityMatrix() {\n  if (!IDENTITY_MATRIX3) {\n    IDENTITY_MATRIX3 = new Matrix3();\n    Object.freeze(IDENTITY_MATRIX3);\n  }\n\n  return IDENTITY_MATRIX3;\n}","map":{"version":3,"sources":["../../../src/classes/matrix3.ts"],"names":["INDICES","IDENTITY_MATRIX","Object","IDENTITY","getIdentityMatrix","ZERO","getZeroMatrix","ELEMENTS","RANK","constructor","arguments","Array","args","copy","array","identity","fromObject","fromQuaternion","mat3","set","setRowMajor","determinant","transpose","invert","multiplyLeft","multiplyRight","rotate","scale","translate","transform","vector","out","vec2","result","vec3","vec4_transformMat3","checkVector","transformVector","transformVector2","transformVector3","ZERO_MATRIX3","IDENTITY_MATRIX3"],"mappings":"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","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n// MIT License\nimport Matrix from './base/matrix';\nimport {checkVector} from '../lib/validators';\n/* eslint-disable camelcase */\nimport {vec4_transformMat3} from '../lib/gl-matrix-extras';\nimport * as mat3 from 'gl-matrix/mat3';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nimport {NumericArray} from '@math.gl/types';\n\nenum INDICES {\n  COL0ROW0 = 0,\n  COL0ROW1 = 1,\n  COL0ROW2 = 2,\n  COL1ROW0 = 3,\n  COL1ROW1 = 4,\n  COL1ROW2 = 5,\n  COL2ROW0 = 6,\n  COL2ROW1 = 7,\n  COL2ROW2 = 8\n}\n\nconst IDENTITY_MATRIX = Object.freeze([1, 0, 0, 0, 1, 0, 0, 0, 1]);\n\nexport default class Matrix3 extends Matrix {\n  static get IDENTITY(): Readonly<Matrix3> {\n    return getIdentityMatrix();\n  }\n\n  static get ZERO(): Readonly<Matrix3> {\n    return getZeroMatrix();\n  }\n\n  get ELEMENTS(): number {\n    return 9;\n  }\n\n  get RANK(): number {\n    return 3;\n  }\n\n  get INDICES(): typeof INDICES {\n    return INDICES;\n  }\n\n  constructor(array?: Readonly<NumericArray>);\n  /** @deprecated */\n  constructor(...args: number[]);\n\n  constructor(array?: number | Readonly<NumericArray>, ...args: number[]) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0, -0, -0, -0, -0, -0, -0);\n    if (arguments.length === 1 && Array.isArray(array)) {\n      this.copy(array);\n    } else if (args.length > 0) {\n      this.copy([array as number, ...args]);\n    } else {\n      this.identity();\n    }\n  }\n\n  copy(array: Readonly<NumericArray>): this {\n    // Element wise copy for performance\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    this[3] = array[3];\n    this[4] = array[4];\n    this[5] = array[5];\n    this[6] = array[6];\n    this[7] = array[7];\n    this[8] = array[8];\n    return this.check();\n  }\n\n  // Constructors\n\n  identity(): this {\n    return this.copy(IDENTITY_MATRIX);\n  }\n\n  /**\n   *\n   * @param object\n   * @returns self\n   */\n  fromObject(object: {[key: string]: any}): this {\n    return this.check();\n  }\n\n  // Calculates a 3x3 matrix from the given quaternion\n  // q quat  Quaternion to create matrix from\n  fromQuaternion(q: Readonly<NumericArray>): this {\n    mat3.fromQuat(this, q);\n    return this.check();\n  }\n\n  /**\n   * accepts column major order, stores in column major order\n   */\n  // eslint-disable-next-line max-params\n  set(\n    m00: number,\n    m10: number,\n    m20: number,\n    m01: number,\n    m11: number,\n    m21: number,\n    m02: number,\n    m12: number,\n    m22: number\n  ): this {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m01;\n    this[4] = m11;\n    this[5] = m21;\n    this[6] = m02;\n    this[7] = m12;\n    this[8] = m22;\n    return this.check();\n  }\n\n  /**\n   * accepts row major order, stores as column major\n   */\n  // eslint-disable-next-line max-params\n  setRowMajor(\n    m00: number,\n    m01: number,\n    m02: number,\n    m10: number,\n    m11: number,\n    m12: number,\n    m20: number,\n    m21: number,\n    m22: number\n  ): this {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m01;\n    this[4] = m11;\n    this[5] = m21;\n    this[6] = m02;\n    this[7] = m12;\n    this[8] = m22;\n    return this.check();\n  }\n\n  // Accessors\n\n  determinant(): number {\n    return mat3.determinant(this);\n  }\n\n  // Modifiers\n  transpose(): this {\n    mat3.transpose(this, this);\n    return this.check();\n  }\n\n  /** Invert a matrix. Note that this can fail if the matrix is not invertible */\n  invert(): this {\n    mat3.invert(this, this);\n    return this.check();\n  }\n\n  // Operations\n  multiplyLeft(a: NumericArray): this {\n    mat3.multiply(this, a, this);\n    return this.check();\n  }\n\n  multiplyRight(a: NumericArray): this {\n    mat3.multiply(this, this, a);\n    return this.check();\n  }\n\n  rotate(radians: number): NumericArray {\n    mat3.rotate(this, this, radians);\n    return this.check();\n  }\n\n  scale(factor: NumericArray | number): this {\n    if (Array.isArray(factor)) {\n      mat3.scale(this, this, factor);\n    } else {\n      mat3.scale(this, this, [factor as number, factor as number]);\n    }\n    return this.check();\n  }\n\n  translate(vec: NumericArray): this {\n    mat3.translate(this, this, vec);\n    return this.check();\n  }\n\n  // Transforms\n  transform(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    let out: NumericArray;\n    switch (vector.length) {\n      case 2:\n        out = vec2.transformMat3(result || [-0, -0], vector, this);\n        break;\n      case 3:\n        out = vec3.transformMat3(result || [-0, -0, -0], vector, this);\n        break;\n      case 4:\n        out = vec4_transformMat3(result || [-0, -0, -0, -0], vector, this);\n        break;\n      default:\n        throw new Error('Illegal vector');\n    }\n    checkVector(out, vector.length);\n    return out;\n  }\n\n  /** @deprecated */\n  transformVector(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    return this.transform(vector, result);\n  }\n\n  /** @deprecated */\n  transformVector2(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    return this.transform(vector, result);\n  }\n\n  /** @deprecated */\n  transformVector3(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    return this.transform(vector, result);\n  }\n}\n\nlet ZERO_MATRIX3;\nlet IDENTITY_MATRIX3;\n\nfunction getZeroMatrix(): Readonly<Matrix3> {\n  if (!ZERO_MATRIX3) {\n    ZERO_MATRIX3 = new Matrix3([0, 0, 0, 0, 0, 0, 0, 0, 0]);\n    Object.freeze(ZERO_MATRIX3);\n  }\n  return ZERO_MATRIX3;\n}\n\nfunction getIdentityMatrix(): Matrix3 {\n  if (!IDENTITY_MATRIX3) {\n    IDENTITY_MATRIX3 = new Matrix3();\n    Object.freeze(IDENTITY_MATRIX3);\n  }\n  return IDENTITY_MATRIX3;\n}\n"]},"metadata":{},"sourceType":"module"}