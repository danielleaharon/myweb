{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/\\u05E2\\u05D1\\u05D5\\u05D3\\u05D5\\u05EA \\u05DC\\u05D4\\u05D2\\u05E9\\u05D4/myweb/src/components/tetris/tetris.js\";\nimport React, { useState } from 'react';\nimport './tetris.css';\nimport { createStage, checkCollision } from './gameHelpers';\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\nimport { TETROMINOS } from './tetrominos'; // Custom Hooks\n\nimport { useInterval } from './hooks/useInterval';\nimport { usePlayer } from './hooks/usePlayer';\nimport { useStage } from './hooks/useStage';\nimport { useGameStatus } from './hooks/useGameStatus'; // Components\n\nimport Stage from './components/Stage';\nimport CellPreview from './components/CellPreview';\nimport Display from './components/Display';\nimport StartButton from './components/StartButton';\nimport GameOverButton from './components/GameOverButton';\n\nconst Tetris = () => {\n  const [dropTime, setDropTime] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n  const [newGame, setNewGame] = useState(true);\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared);\n\n  const movePlayer = dir => {\n    if (!checkCollision(player, stage, {\n      x: dir,\n      y: 0\n    })) {\n      updatePlayerPos({\n        x: dir,\n        y: 0\n      });\n    }\n  };\n\n  const keyUp = ({\n    keyCode\n  }) => {\n    if (!gameOver) {\n      // Activate the interval again when user releases down arrow.\n      if (keyCode === 40) {\n        setDropTime(1000 / (level + 1));\n      }\n    }\n  };\n\n  const startGame = () => {\n    // Reset everything\n    setStage(createStage());\n    setDropTime(1000);\n    resetPlayer();\n    setScore(0);\n    setLevel(0);\n    setRows(0);\n    setGameOver(false);\n    setNewGame(false);\n  };\n\n  const drop = () => {\n    // Increase level when player has cleared 10 rows\n    if (rows > (level + 1) * 10) {\n      setLevel(prev => prev + 1); // Also increase speed\n\n      setDropTime(1000 / (level + 1) + 200);\n    }\n\n    if (!checkCollision(player, stage, {\n      x: 0,\n      y: 1\n    })) {\n      updatePlayerPos({\n        x: 0,\n        y: 1,\n        collided: false\n      });\n    } else {\n      // Game over!\n      if (player.pos.y < 1) {\n        console.log('GAME OVER!!!');\n        setGameOver(true);\n        setDropTime(null);\n      }\n\n      updatePlayerPos({\n        x: 0,\n        y: 0,\n        collided: true\n      });\n    }\n  };\n\n  const dropPlayer = () => {\n    // We don't need to run the interval when we use the arrow down to\n    // move the tetromino downwards. So deactivate it for now.\n    setDropTime(null);\n    drop();\n  }; // This one starts the game\n  // Custom hook by Dan Abramov\n\n\n  useInterval(() => {\n    drop();\n  }, dropTime);\n\n  const move = ({\n    keyCode\n  }) => {\n    if (!gameOver) {\n      if (keyCode === 37) {\n        movePlayer(-1);\n      } else if (keyCode === 39) {\n        movePlayer(1);\n      } else if (keyCode === 40) {\n        dropPlayer();\n      } else if (keyCode === 38) {\n        playerRotate(stage, 1);\n      }\n    }\n  };\n\n  return React.createElement(StyledTetrisWrapper, {\n    tabIndex: \"0\",\n    onKeyDown: e => move(e),\n    onKeyUp: keyUp,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(StyledTetris, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(Stage, {\n    stage: stage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }), React.createElement(\"aside\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, gameOver ? React.createElement(GameOverButton, {\n    callback: startGame,\n    text: \"Game Over\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, React.createElement(Display, {\n    text: `Score: ${score}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }), React.createElement(Display, {\n    text: `rows: ${rows}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }), React.createElement(Display, {\n    text: `Level: ${level}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }), React.createElement(StartButton, {\n    newGame: newGame,\n    callback: startGame,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, ['L', 'O', 'S', 'T', 'Z', 'I', 'J'].map((item, index) => {\n    // console.log(TETROMINOS[item])\n    return React.createElement(CellPreview, {\n      key: index,\n      size: '40px',\n      type: item,\n      text: TETROMINOS[item].text,\n      shape: TETROMINOS[item].shape,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    });\n  }))))));\n};\n\nexport default Tetris;","map":{"version":3,"sources":["/Users/user/Desktop/עבודות להגשה/myweb/src/components/tetris/tetris.js"],"names":["React","useState","createStage","checkCollision","StyledTetrisWrapper","StyledTetris","TETROMINOS","useInterval","usePlayer","useStage","useGameStatus","Stage","CellPreview","Display","StartButton","GameOverButton","Tetris","dropTime","setDropTime","gameOver","setGameOver","newGame","setNewGame","player","updatePlayerPos","resetPlayer","playerRotate","stage","setStage","rowsCleared","score","setScore","rows","setRows","level","setLevel","movePlayer","dir","x","y","keyUp","keyCode","startGame","drop","prev","collided","pos","console","log","dropPlayer","move","e","map","item","index","text","shape"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport  './tetris.css';\n\nimport { createStage, checkCollision } from './gameHelpers';\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\nimport { TETROMINOS } from './tetrominos';\n\n// Custom Hooks\nimport { useInterval } from './hooks/useInterval';\nimport { usePlayer } from './hooks/usePlayer';\nimport { useStage } from './hooks/useStage';\nimport { useGameStatus } from './hooks/useGameStatus';\n\n// Components\nimport Stage from './components/Stage';\nimport CellPreview from './components/CellPreview';\n\nimport Display from './components/Display';\nimport StartButton from './components/StartButton';\nimport GameOverButton from './components/GameOverButton';\n\nconst Tetris = () => {\n  const [dropTime, setDropTime] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n  const [newGame, setNewGame] = useState(true);\n\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(\n    rowsCleared\n  );\n\n\n  const movePlayer = dir => {\n    if (!checkCollision(player, stage, { x: dir, y: 0 })) {\n      updatePlayerPos({ x: dir, y: 0 });\n    }\n  };\n\n  const keyUp = ({ keyCode }) => {\n    if (!gameOver) {\n      // Activate the interval again when user releases down arrow.\n      if (keyCode === 40) {\n        setDropTime(1000 / (level + 1));\n      }\n    }\n  };\n\n  const startGame = () => {\n    // Reset everything\n    setStage(createStage());\n    setDropTime(1000);\n    resetPlayer();\n    setScore(0);\n    setLevel(0);\n    setRows(0);\n    setGameOver(false);\n    setNewGame(false);\n    \n  };\n\n  const drop = () => {\n    // Increase level when player has cleared 10 rows\n    if (rows > (level + 1) * 10) {\n      setLevel(prev => prev + 1);\n      // Also increase speed\n      setDropTime(1000 / (level + 1) + 200);\n    }\n\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\n      updatePlayerPos({ x: 0, y: 1, collided: false });\n    } else {\n      // Game over!\n      if (player.pos.y < 1) {\n        console.log('GAME OVER!!!');\n        setGameOver(true);\n        setDropTime(null);\n      }\n      updatePlayerPos({ x: 0, y: 0, collided: true });\n    }\n  };\n\n  const dropPlayer = () => {\n    // We don't need to run the interval when we use the arrow down to\n    // move the tetromino downwards. So deactivate it for now.\n    setDropTime(null);\n    drop();\n  };\n\n  // This one starts the game\n  // Custom hook by Dan Abramov\n  useInterval(() => {\n    drop();\n  }, dropTime);\n\n  const move = ({ keyCode }) => {\n    if (!gameOver) {\n      if (keyCode === 37) {\n        movePlayer(-1);\n      } else if (keyCode === 39) {\n        movePlayer(1);\n      } else if (keyCode === 40) {\n        dropPlayer();\n      } else if (keyCode === 38) {\n        playerRotate(stage, 1);\n      }\n    }\n  };\n\n  return (\n    <StyledTetrisWrapper\n      tabIndex=\"0\"\n      onKeyDown={e => move(e)}\n      onKeyUp={keyUp}\n    >\n      <StyledTetris>\n        <Stage stage={stage} />\n        <aside>\n          {gameOver ? (\n            <GameOverButton callback={startGame} text=\"Game Over\" />\n          ) : (\n            <div>\n              <Display text={`Score: ${score}`} />\n              <Display text={`rows: ${rows}`} />\n              <Display text={`Level: ${level}`} />\n              <StartButton newGame={newGame} callback={startGame} />\n\n              <div>\n                {['L','O','S','T','Z','I','J'].map((item,index)=>{\n                    // console.log(TETROMINOS[item])\n                  return  <CellPreview  key={index}size={'40px'} type={item} text={TETROMINOS[item].text} shape={TETROMINOS[item].shape} />\n                                }                )}\n              </div>\n\n            </div>\n            \n          )}\n        </aside>\n      </StyledTetris>\n    </StyledTetrisWrapper>\n  );\n};\n\nexport default Tetris;"]},"metadata":{},"sourceType":"module"}