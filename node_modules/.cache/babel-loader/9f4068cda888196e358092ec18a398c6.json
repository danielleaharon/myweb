{"ast":null,"code":"import React, { useRef, useState, useCallback, useEffect } from 'react';\nvar classes = {\n  \"IndicatorContainer\": \"_Indicator-module__IndicatorContainer__3I7vF\",\n  \"IndicatorContent\": \"_Indicator-module__IndicatorContent__3kdsN\",\n  \"Indicators\": \"_Indicator-module__Indicators__2vhHh\",\n  \"Active\": \"_Indicator-module__Active__2qRu_\"\n};\n\nfunction Indicator({\n  itemsPerSlide,\n  itemGap,\n  children\n}) {\n  const indicatorsRef = useRef(null);\n  const itemsRef = useRef(null);\n  const [numberOfIndicators, setNumberOfItems] = useState(() => {\n    const childrenCount = React.Children.count(children);\n    return Math.ceil(childrenCount / itemsPerSlide);\n  });\n  const calculateIndicatorDimensions = useCallback(() => {\n    const childrenCount = React.Children.count(children);\n    const numberOfIndicators = Math.ceil(childrenCount / itemsPerSlide);\n\n    for (const item of itemsRef.current.children) {\n      item.style.minWidth = Math.ceil(itemsRef.current.offsetWidth / itemsPerSlide) - itemGap + 'px';\n      item.style.marginRight = itemGap + 'px';\n    }\n\n    setNumberOfItems(numberOfIndicators);\n  }, [children, itemGap, itemsPerSlide]);\n  useEffect(() => {\n    window.addEventListener('resize', calculateIndicatorDimensions);\n    return () => {\n      window.removeEventListener('resize', calculateIndicatorDimensions);\n    };\n  }, [calculateIndicatorDimensions]);\n  useEffect(() => {\n    calculateIndicatorDimensions();\n  }, [calculateIndicatorDimensions]);\n\n  const indicatorChangeHandler = e => {\n    const indicatorId = +e.target.dataset.indicator;\n\n    for (const indicator of indicatorsRef.current.children) {\n      if (indicator.classList.contains(classes.Active)) {\n        indicator.classList.remove(classes.Active);\n      }\n    }\n\n    e.target.classList.add(classes.Active);\n    itemsRef.current.style.transform = `translateX(-${indicatorId * itemsRef.current.offsetWidth}px)`;\n  };\n\n  return (\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      className: classes.IndicatorContainer\n    },\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      className: classes.IndicatorContent,\n      ref: itemsRef\n    }, children),\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      className: classes.Indicators,\n      ref: indicatorsRef\n    }, [...new Array(numberOfIndicators)].map((btn, index) =>\n    /*#__PURE__*/\n    React.createElement(\"button\", {\n      key: index,\n      className: `${index === 0 ? classes.Active : ''}`,\n      \"data-indicator\": index,\n      onClick: indicatorChangeHandler\n    }))))\n  );\n}\n\nexport default Indicator;","map":{"version":3,"sources":["../src/Indicator.js"],"names":["children","indicatorsRef","useRef","itemsRef","useState","childrenCount","React","Math","calculateIndicatorDimensions","useCallback","numberOfIndicators","item","itemGap","setNumberOfItems","useEffect","window","indicatorChangeHandler","e","indicatorId","indicator","classes","offsetWidth","IndicatorContainer","index"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react'\n\nimport classes from './Indicator.module.css'\n\nexport default function Indicator({ itemsPerSlide, itemGap, children }) {\n  const indicatorsRef = useRef(null)\n  const itemsRef = useRef(null)\n  const [numberOfIndicators, setNumberOfItems] = useState(() => {\n    const childrenCount = React.Children.count(children)\n    return Math.ceil(childrenCount / itemsPerSlide)\n  })\n\n  const calculateIndicatorDimensions = useCallback(() => {\n    const childrenCount = React.Children.count(children)\n    const numberOfIndicators = Math.ceil(childrenCount / itemsPerSlide)\n\n    for (const item of itemsRef.current.children) {\n      item.style.minWidth =\n        Math.ceil(itemsRef.current.offsetWidth / itemsPerSlide) - itemGap + 'px'\n      item.style.marginRight = itemGap + 'px'\n    }\n\n    setNumberOfItems(numberOfIndicators)\n  }, [children, itemGap, itemsPerSlide])\n\n  useEffect(() => {\n    window.addEventListener('resize', calculateIndicatorDimensions)\n    return () => {\n      window.removeEventListener('resize', calculateIndicatorDimensions)\n    }\n  }, [calculateIndicatorDimensions])\n\n  useEffect(() => {\n    calculateIndicatorDimensions()\n  }, [calculateIndicatorDimensions])\n\n  const indicatorChangeHandler = (e) => {\n    const indicatorId = +e.target.dataset.indicator\n    for (const indicator of indicatorsRef.current.children) {\n      if (indicator.classList.contains(classes.Active)) {\n        indicator.classList.remove(classes.Active)\n      }\n    }\n    e.target.classList.add(classes.Active)\n    itemsRef.current.style.transform = `translateX(-${\n      indicatorId * itemsRef.current.offsetWidth\n    }px)`\n  }\n\n  return (\n    <div className={classes.IndicatorContainer}>\n      <div className={classes.IndicatorContent} ref={itemsRef}>\n        {children}\n      </div>\n      <div className={classes.Indicators} ref={indicatorsRef}>\n        {[...new Array(numberOfIndicators)].map((btn, index) => (\n          <button\n            key={index}\n            className={`${index === 0 ? classes.Active : ''}`}\n            data-indicator={index}\n            onClick={indicatorChangeHandler}\n          />\n        ))}\n      </div>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}