{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/\\u05E2\\u05D1\\u05D5\\u05D3\\u05D5\\u05EA \\u05DC\\u05D4\\u05D2\\u05E9\\u05D4/myweb/src/components/hero/draw.js\";\nimport React, { Component } from 'react';\nimport { useEffect, useRef, useState } from \"react\"; // import \"./App.css\"; \n\nfunction Draw() {\n  const canvasRef = useRef(null);\n  const ctxRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [lineWidth, setLineWidth] = useState(5);\n  const [lineColor, setLineColor] = useState(\"black\");\n  const [lineOpacity, setLineOpacity] = useState(0.1); // Initialization when the component \n  // mounts for the first time \n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.lineCap = \"round\";\n    ctx.lineJoin = \"round\";\n    ctx.globalAlpha = lineOpacity;\n    ctx.strokeStyle = lineColor;\n    ctx.lineWidth = lineWidth;\n    ctxRef.current = ctx;\n  }, [lineColor, lineOpacity, lineWidth]); // Function for starting the drawing \n\n  const startDrawing = e => {\n    console.log('hover');\n    ctxRef.current.beginPath();\n    ctxRef.current.moveTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n    setIsDrawing(true);\n  }; // Function for ending the drawing \n\n\n  const endDrawing = () => {\n    ctxRef.current.closePath();\n    setIsDrawing(false);\n  };\n\n  const draw = e => {\n    if (!isDrawing) {\n      return;\n    }\n\n    ctxRef.current.lineTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n    ctxRef.current.stroke();\n  };\n\n  return React.createElement(\"div\", {\n    className: \"App-draw\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"draw-area\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(\"canvas\", {\n    onMouseDown: startDrawing,\n    onMouseUp: endDrawing,\n    onMouseMove: draw,\n    on: true,\n    ref: canvasRef,\n    width: `1280px`,\n    height: `720px`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  })));\n}\n\nexport default Draw;","map":{"version":3,"sources":["/Users/user/Desktop/עבודות להגשה/myweb/src/components/hero/draw.js"],"names":["React","Component","useEffect","useRef","useState","Draw","canvasRef","ctxRef","isDrawing","setIsDrawing","lineWidth","setLineWidth","lineColor","setLineColor","lineOpacity","setLineOpacity","canvas","current","ctx","getContext","lineCap","lineJoin","globalAlpha","strokeStyle","startDrawing","e","console","log","beginPath","moveTo","nativeEvent","offsetX","offsetY","endDrawing","closePath","draw","lineTo","stroke"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C,C,CAGA;;AAGA,SAASC,IAAT,GAAgB;AAEd,QAAMC,SAAS,GAAGH,MAAM,CAAC,IAAD,CAAxB;AAEA,QAAMI,MAAM,GAAGJ,MAAM,CAAC,IAAD,CAArB;AAEA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,CAAD,CAA1C;AAEA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,OAAD,CAA1C;AAEA,QAAM,CAACU,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAC,GAAD,CAA9C,CAZc,CAgBd;AAEA;;AAEAF,EAAAA,SAAS,CAAC,MAAM;AAEd,UAAMc,MAAM,GAAGV,SAAS,CAACW,OAAzB;AAEA,UAAMC,GAAG,GAAGF,MAAM,CAACG,UAAP,CAAkB,IAAlB,CAAZ;AAEAD,IAAAA,GAAG,CAACE,OAAJ,GAAc,OAAd;AAEAF,IAAAA,GAAG,CAACG,QAAJ,GAAe,OAAf;AAEAH,IAAAA,GAAG,CAACI,WAAJ,GAAkBR,WAAlB;AAEAI,IAAAA,GAAG,CAACK,WAAJ,GAAkBX,SAAlB;AAEAM,IAAAA,GAAG,CAACR,SAAJ,GAAgBA,SAAhB;AAEAH,IAAAA,MAAM,CAACU,OAAP,GAAiBC,GAAjB;AAED,GAlBQ,EAkBN,CAACN,SAAD,EAAYE,WAAZ,EAAyBJ,SAAzB,CAlBM,CAAT,CApBc,CA0Cd;;AAEA,QAAMc,YAAY,GAAIC,CAAD,IAAO;AAE1BC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACApB,IAAAA,MAAM,CAACU,OAAP,CAAeW,SAAf;AAEArB,IAAAA,MAAM,CAACU,OAAP,CAAeY,MAAf,CAEEJ,CAAC,CAACK,WAAF,CAAcC,OAFhB,EAIEN,CAAC,CAACK,WAAF,CAAcE,OAJhB;AAQAvB,IAAAA,YAAY,CAAC,IAAD,CAAZ;AAED,GAfD,CA5Cc,CA+Dd;;;AAEA,QAAMwB,UAAU,GAAG,MAAM;AAEvB1B,IAAAA,MAAM,CAACU,OAAP,CAAeiB,SAAf;AAEAzB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AAED,GAND;;AAUA,QAAM0B,IAAI,GAAIV,CAAD,IAAO;AAElB,QAAI,CAACjB,SAAL,EAAgB;AAEd;AAED;;AAEDD,IAAAA,MAAM,CAACU,OAAP,CAAemB,MAAf,CAEEX,CAAC,CAACK,WAAF,CAAcC,OAFhB,EAIEN,CAAC,CAACK,WAAF,CAAcE,OAJhB;AAUAzB,IAAAA,MAAM,CAACU,OAAP,CAAeoB,MAAf;AAED,GApBD;;AAwBA,SAEE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE;AAEE,IAAA,WAAW,EAAEb,YAFf;AAIE,IAAA,SAAS,EAAES,UAJb;AAME,IAAA,WAAW,EAAEE,IANf;AAOE,IAAA,EAAE,MAPJ;AASE,IAAA,GAAG,EAAE7B,SATP;AAWE,IAAA,KAAK,EAAG,QAXV;AAaE,IAAA,MAAM,EAAG,OAbX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAFF,CAFF;AA4BD;;AAID,eAAeD,IAAf","sourcesContent":["import React, { Component } from 'react';\nimport { useEffect, useRef, useState } from \"react\"; \n\n\n// import \"./App.css\"; \n\n  \nfunction Draw() { \n\n  const canvasRef = useRef(null); \n\n  const ctxRef = useRef(null); \n\n  const [isDrawing, setIsDrawing] = useState(false); \n\n  const [lineWidth, setLineWidth] = useState(5); \n\n  const [lineColor, setLineColor] = useState(\"black\"); \n\n  const [lineOpacity, setLineOpacity] = useState(0.1); \n\n  \n\n  // Initialization when the component \n\n  // mounts for the first time \n\n  useEffect(() => { \n\n    const canvas = canvasRef.current; \n\n    const ctx = canvas.getContext(\"2d\"); \n\n    ctx.lineCap = \"round\"; \n\n    ctx.lineJoin = \"round\"; \n\n    ctx.globalAlpha = lineOpacity; \n\n    ctx.strokeStyle = lineColor; \n\n    ctx.lineWidth = lineWidth; \n\n    ctxRef.current = ctx; \n\n  }, [lineColor, lineOpacity, lineWidth]); \n\n  \n\n  // Function for starting the drawing \n\n  const startDrawing = (e) => { \n\n    console.log('hover')\n    ctxRef.current.beginPath(); \n\n    ctxRef.current.moveTo( \n\n      e.nativeEvent.offsetX,  \n\n      e.nativeEvent.offsetY \n\n    ); \n\n    setIsDrawing(true); \n\n  }; \n\n  \n\n  // Function for ending the drawing \n\n  const endDrawing = () => { \n\n    ctxRef.current.closePath(); \n\n    setIsDrawing(false); \n\n  }; \n\n  \n\n  const draw = (e) => { \n\n    if (!isDrawing) { \n\n      return; \n\n    } \n\n    ctxRef.current.lineTo( \n\n      e.nativeEvent.offsetX,  \n\n      e.nativeEvent.offsetY \n\n    ); \n\n      \n\n    ctxRef.current.stroke(); \n\n  }; \n\n  \n\n  return ( \n\n    <div className=\"App-draw\"> \n\n      <div className=\"draw-area\"> \n\n        <canvas \n\n          onMouseDown={startDrawing} \n\n          onMouseUp={endDrawing} \n\n          onMouseMove={draw} \n          on\n\n          ref={canvasRef} \n\n          width={`1280px`} \n\n          height={`720px`} \n\n        /> \n\n      </div> \n\n    </div> \n\n  ); \n} \n\n  \n\nexport default Draw;"]},"metadata":{},"sourceType":"module"}