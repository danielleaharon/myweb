{"ast":null,"code":"const VERSION = typeof \"3.2.10\" !== 'undefined' ? \"3.2.10\" : 'latest';\nexport const NullWorkerLoader = {\n  name: 'Null loader',\n  id: 'null',\n  module: 'core',\n  version: VERSION,\n  worker: true,\n  mimeTypes: ['application/x.empty'],\n  extensions: ['null'],\n  tests: [() => false],\n  options: {\n    null: {}\n  }\n};\n\nfunction parseSync(arrayBuffer, options, context) {\n  if (!options.null.echoParameters) return null;\n  context = context && JSON.parse(JSON.stringify(context));\n  return {\n    arrayBuffer,\n    options,\n    context\n  };\n}\n\nexport const NullLoader = {\n  name: 'Null loader',\n  id: 'null',\n  module: 'core',\n  version: VERSION,\n  mimeTypes: ['application/x.empty'],\n  extensions: ['null'],\n  parse: async (arrayBuffer, options, context) => parseSync(arrayBuffer, options, context),\n  parseSync,\n  parseInBatches: async function* generator(asyncIterator, options, context) {\n    for await (const batch of asyncIterator) {\n      yield parseSync(batch, options, context);\n    }\n  },\n  tests: [() => false],\n  options: {\n    null: {\n      echoParameters: false\n    }\n  }\n};","map":{"version":3,"sources":["../../src/null-loader.ts"],"names":["VERSION","NullWorkerLoader","name","id","module","version","worker","mimeTypes","extensions","tests","options","null","context","JSON","NullLoader","parse","parseSync","parseInBatches","echoParameters"],"mappings":"AAEA,MAAMA,OAAO,GAAG,OAAA,QAAA,KAAA,WAAA,GAAA,QAAA,GAAhB,QAAA;AAOA,OAAO,MAAMC,gBAAwB,GAAG;AACtCC,EAAAA,IAAI,EADkC,aAAA;AAEtCC,EAAAA,EAAE,EAFoC,MAAA;AAGtCC,EAAAA,MAAM,EAHgC,MAAA;AAItCC,EAAAA,OAAO,EAJ+B,OAAA;AAKtCC,EAAAA,MAAM,EALgC,IAAA;AAMtCC,EAAAA,SAAS,EAAE,CAN2B,qBAM3B,CAN2B;AAOtCC,EAAAA,UAAU,EAAE,CAP0B,MAO1B,CAP0B;AAQtCC,EAAAA,KAAK,EAAE,CAAC,MAR8B,KAQ/B,CAR+B;AAStCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAE;AADC;AAT6B,CAAjC;;AAkBP,SAAA,SAAA,CAAA,WAAA,EAAA,OAAA,EAAA,OAAA,EAAkD;AAChD,MAAI,CAACD,OAAO,CAAPA,IAAAA,CAAL,cAAA,EAAkC,OAAA,IAAA;AAClCE,EAAAA,OAAO,GAAGA,OAAO,IAAIC,IAAI,CAAJA,KAAAA,CAAWA,IAAI,CAAJA,SAAAA,CAAhCD,OAAgCC,CAAXA,CAArBD;AACA,SAAO;AAAA,IAAA,WAAA;AAAA,IAAA,OAAA;AAAuBA,IAAAA;AAAvB,GAAP;AACD;;AAKD,OAAO,MAAME,UAA4B,GAAG;AAC1CZ,EAAAA,IAAI,EADsC,aAAA;AAE1CC,EAAAA,EAAE,EAFwC,MAAA;AAG1CC,EAAAA,MAAM,EAHoC,MAAA;AAI1CC,EAAAA,OAAO,EAJmC,OAAA;AAK1CE,EAAAA,SAAS,EAAE,CAL+B,qBAK/B,CAL+B;AAM1CC,EAAAA,UAAU,EAAE,CAN8B,MAM9B,CAN8B;AAO1CO,EAAAA,KAAK,EAAE,OAAA,WAAA,EAAA,OAAA,EAAA,OAAA,KAAyCC,SAAS,CAAA,WAAA,EAAA,OAAA,EAPf,OAOe,CAPf;AAAA,EAAA,SAAA;AAS1CC,EAAAA,cAAc,EAAE,gBAAA,SAAA,CAAA,aAAA,EAAA,OAAA,EAAA,OAAA,EAA2D;AACzE,eAAW,MAAX,KAAA,IAAA,aAAA,EAAyC;AACvC,YAAMD,SAAS,CAAA,KAAA,EAAA,OAAA,EAAf,OAAe,CAAf;AACD;AAZuC,GAAA;AAc1CP,EAAAA,KAAK,EAAE,CAAC,MAdkC,KAcnC,CAdmC;AAe1CC,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAE;AACJO,MAAAA,cAAc,EAAE;AADZ;AADC;AAfiC,CAArC","sourcesContent":["// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\nimport {Loader, LoaderWithParser} from '@loaders.gl/loader-utils';\n\n/**\n * Loads any data and returns null (or optionally passes through data unparsed)\n */\nexport const NullWorkerLoader: Loader = {\n  name: 'Null loader',\n  id: 'null',\n  module: 'core',\n  version: VERSION,\n  worker: true,\n  mimeTypes: ['application/x.empty'],\n  extensions: ['null'],\n  tests: [() => false],\n  options: {\n    null: {}\n  }\n};\n\n/**\n * Returns arguments passed to the parse API in a format that can be transfered to a\n * web worker. The `context` parameter is stripped using JSON.stringify & parse.\n */\nfunction parseSync(arrayBuffer, options, context) {\n  if (!options.null.echoParameters) return null;\n  context = context && JSON.parse(JSON.stringify(context));\n  return {arrayBuffer, options, context};\n}\n\n/**\n * Loads any data and returns null (or optionally passes through data unparsed)\n */\nexport const NullLoader: LoaderWithParser = {\n  name: 'Null loader',\n  id: 'null',\n  module: 'core',\n  version: VERSION,\n  mimeTypes: ['application/x.empty'],\n  extensions: ['null'],\n  parse: async (arrayBuffer, options, context) => parseSync(arrayBuffer, options, context),\n  parseSync,\n  parseInBatches: async function* generator(asyncIterator, options, context) {\n    for await (const batch of asyncIterator) {\n      yield parseSync(batch, options, context);\n    }\n  },\n  tests: [() => false],\n  options: {\n    null: {\n      echoParameters: false\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}