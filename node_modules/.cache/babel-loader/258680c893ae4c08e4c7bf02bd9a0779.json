{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { equals } from '@math.gl/core';\nimport assert from '../utils/assert';\nexport default class TransitionInterpolator {\n  constructor(opts) {\n    _defineProperty(this, \"_propsToCompare\", void 0);\n\n    _defineProperty(this, \"_propsToExtract\", void 0);\n\n    _defineProperty(this, \"_requiredProps\", void 0);\n\n    const {\n      compare,\n      extract,\n      required\n    } = opts;\n    this._propsToCompare = compare;\n    this._propsToExtract = extract || compare;\n    this._requiredProps = required;\n  }\n\n  arePropsEqual(currentProps, nextProps) {\n    for (const key of this._propsToCompare) {\n      if (!(key in currentProps) || !(key in nextProps) || !equals(currentProps[key], nextProps[key])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  initializeProps(startProps, endProps) {\n    const startViewStateProps = {};\n    const endViewStateProps = {};\n\n    for (const key of this._propsToExtract) {\n      if (key in startProps || key in endProps) {\n        startViewStateProps[key] = startProps[key];\n        endViewStateProps[key] = endProps[key];\n      }\n    }\n\n    this._checkRequiredProps(startViewStateProps);\n\n    this._checkRequiredProps(endViewStateProps);\n\n    return {\n      start: startViewStateProps,\n      end: endViewStateProps\n    };\n  }\n\n  getDuration(startProps, endProps) {\n    return endProps.transitionDuration;\n  }\n\n  _checkRequiredProps(props) {\n    if (!this._requiredProps) {\n      return;\n    }\n\n    this._requiredProps.forEach(propName => {\n      const value = props[propName];\n      assert(Number.isFinite(value) || Array.isArray(value), \"\".concat(propName, \" is required for transition\"));\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../src/transitions/transition-interpolator.ts"],"names":["constructor","required","extract","arePropsEqual","key","equals","currentProps","nextProps","initializeProps","startViewStateProps","endViewStateProps","startProps","endProps","start","end","getDuration","_checkRequiredProps","propName","value","props","assert","Number","Array"],"mappings":";AAAA,SAAA,MAAA,QAAA,eAAA;AACA,OAAA,MAAA,MAAA,iBAAA;AAEA,eAAe,MAAA,sBAAA,CAAsC;AAYnDA,EAAAA,WAAW,CAAA,IAAA,EAAqE;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,iBAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,iBAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,gBAAA,EAAA,KAAA,CAAA,CAAA;;AAC9E,UAAM;AAAA,MAAA,OAAA;AAAA,MAAA,OAAA;AAAmBC,MAAAA;AAAnB,QAAN,IAAA;AAEA,SAAA,eAAA,GAAA,OAAA;AACA,SAAA,eAAA,GAAuBC,OAAO,IAA9B,OAAA;AACA,SAAA,cAAA,GAAA,QAAA;AACD;;AAQDC,EAAAA,aAAa,CAAA,YAAA,EAAA,SAAA,EAA6E;AACxF,SAAK,MAAL,GAAA,IAAkB,KAAlB,eAAA,EAAwC;AACtC,UACE,EAAEC,GAAG,IAAL,YAAA,KACA,EAAEA,GAAG,IADL,SACA,CADA,IAEA,CAACC,MAAM,CAACC,YAAY,CAAb,GAAa,CAAb,EAAoBC,SAAS,CAHtC,GAGsC,CAA7B,CAHT,EAIE;AACA,eAAA,KAAA;AACD;AACF;;AACD,WAAA,IAAA;AACD;;AASDC,EAAAA,eAAe,CAAA,UAAA,EAAA,QAAA,EAMb;AACA,UAAMC,mBAAmB,GAAzB,EAAA;AACA,UAAMC,iBAAiB,GAAvB,EAAA;;AAEA,SAAK,MAAL,GAAA,IAAkB,KAAlB,eAAA,EAAwC;AACtC,UAAIN,GAAG,IAAHA,UAAAA,IAAqBA,GAAG,IAA5B,QAAA,EAA0C;AACxCK,QAAAA,mBAAmB,CAAnBA,GAAmB,CAAnBA,GAA2BE,UAAU,CAArCF,GAAqC,CAArCA;AACAC,QAAAA,iBAAiB,CAAjBA,GAAiB,CAAjBA,GAAyBE,QAAQ,CAAjCF,GAAiC,CAAjCA;AACD;AACF;;AAED,SAAA,mBAAA,CAAA,mBAAA;;AACA,SAAA,mBAAA,CAAA,iBAAA;;AAEA,WAAO;AAACG,MAAAA,KAAK,EAAN,mBAAA;AAA6BC,MAAAA,GAAG,EAAEJ;AAAlC,KAAP;AACD;;AAqBDK,EAAAA,WAAW,CAAA,UAAA,EAAA,QAAA,EAAyE;AAClF,WAAOH,QAAQ,CAAf,kBAAA;AACD;;AAEDI,EAAAA,mBAAmB,CAAA,KAAA,EAAQ;AACzB,QAAI,CAAC,KAAL,cAAA,EAA0B;AACxB;AACD;;AAED,SAAA,cAAA,CAAA,OAAA,CAA4BC,QAAQ,IAAI;AACtC,YAAMC,KAAK,GAAGC,KAAK,CAAnB,QAAmB,CAAnB;AACAC,MAAAA,MAAM,CACJC,MAAM,CAANA,QAAAA,CAAAA,KAAAA,KAA0BC,KAAK,CAALA,OAAAA,CADtB,KACsBA,CADtB,EAAA,GAAA,MAAA,CAAA,QAAA,EAANF,6BAAM,CAAA,CAANA;AAFF,KAAA;AAOD;;AAxGkD","sourcesContent":["import {equals} from '@math.gl/core';\nimport assert from '../utils/assert';\n\nexport default abstract class TransitionInterpolator {\n  protected _propsToCompare: string[];\n  protected _propsToExtract: string[];\n  protected _requiredProps?: string[];\n\n  /**\n   * @param opts {array|object}\n   * @param opts.compare {array} - prop names used in equality check\n   * @param opts.extract {array} - prop names needed for interpolation\n   * @param opts.required {array} - prop names that must be supplied\n   * alternatively, supply one list of prop names as `opts` if all of the above are the same.\n   */\n  constructor(opts: {compare: string[]; extract?: string[]; required?: string[]}) {\n    const {compare, extract, required} = opts;\n\n    this._propsToCompare = compare;\n    this._propsToExtract = extract || compare;\n    this._requiredProps = required;\n  }\n\n  /**\n   * Checks if two sets of props need transition in between\n   * @param currentProps {object} - a list of viewport props\n   * @param nextProps {object} - a list of viewport props\n   * @returns {bool} - true if two props are equivalent\n   */\n  arePropsEqual(currentProps: Record<string, any>, nextProps: Record<string, any>): boolean {\n    for (const key of this._propsToCompare) {\n      if (\n        !(key in currentProps) ||\n        !(key in nextProps) ||\n        !equals(currentProps[key], nextProps[key])\n      ) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Called before transition starts to validate/pre-process start and end props\n   * @param startProps {object} - a list of starting viewport props\n   * @param endProps {object} - a list of target viewport props\n   * @returns {Object} {start, end} - start and end props to be passed\n   *   to `interpolateProps`\n   */\n  initializeProps(\n    startProps: Record<string, any>,\n    endProps: Record<string, any>\n  ): {\n    start: Record<string, any>;\n    end: Record<string, any>;\n  } {\n    const startViewStateProps = {};\n    const endViewStateProps = {};\n\n    for (const key of this._propsToExtract) {\n      if (key in startProps || key in endProps) {\n        startViewStateProps[key] = startProps[key];\n        endViewStateProps[key] = endProps[key];\n      }\n    }\n\n    this._checkRequiredProps(startViewStateProps);\n    this._checkRequiredProps(endViewStateProps);\n\n    return {start: startViewStateProps, end: endViewStateProps};\n  }\n\n  /**\n   * Returns viewport props in transition\n   * @param startProps {object} - a list of starting viewport props\n   * @param endProps {object} - a list of target viewport props\n   * @param t {number} - a time factor between [0, 1]\n   * @returns {object} - a list of interpolated viewport props\n   */\n  abstract interpolateProps(\n    startProps: Record<string, any>,\n    endProps: Record<string, any>,\n    t: number\n  ): Record<string, any>;\n\n  /**\n   * Returns transition duration\n   * @param startProps {object} - a list of starting viewport props\n   * @param endProps {object} - a list of target viewport props\n   * @returns {Number} - transition duration in milliseconds\n   */\n  getDuration(startProps: Record<string, any>, endProps: Record<string, any>): number {\n    return endProps.transitionDuration;\n  }\n\n  _checkRequiredProps(props) {\n    if (!this._requiredProps) {\n      return;\n    }\n\n    this._requiredProps.forEach(propName => {\n      const value = props[propName];\n      assert(\n        Number.isFinite(value) || Array.isArray(value),\n        `${propName} is required for transition`\n      );\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}