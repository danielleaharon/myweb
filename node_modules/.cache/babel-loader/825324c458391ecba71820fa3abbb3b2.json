{"ast":null,"code":"import React from 'react';\nimport Gameboard from './Gameboard';\nimport * as Game from '../models/Game';\nimport HeldPiece from './HeldPiece';\nimport PieceQueue from './PieceQueue';\nimport { Context } from '../context';\nimport { useKeyboardControls } from '../hooks/useKeyboardControls';\nvar defaultKeyboardMap = {\n  down: 'MOVE_DOWN',\n  left: 'MOVE_LEFT',\n  right: 'MOVE_RIGHT',\n  space: 'HARD_DROP',\n  z: 'FLIP_COUNTERCLOCKWISE',\n  x: 'FLIP_CLOCKWISE',\n  up: 'FLIP_CLOCKWISE',\n  p: 'TOGGLE_PAUSE',\n  c: 'HOLD',\n  shift: 'HOLD'\n}; // https://harddrop.com/wiki/Tetris_Worlds#Gravity\n\nvar tickSeconds = function (level) {\n  return Math.pow(0.8 - (level - 1) * 0.007, level - 1);\n};\n\nexport default function Tetris(props) {\n  var _a;\n\n  var _b = React.useReducer(Game.update, Game.init()),\n      game = _b[0],\n      dispatch = _b[1];\n\n  var keyboardMap = (_a = props.keyboardControls) !== null && _a !== void 0 ? _a : defaultKeyboardMap;\n  useKeyboardControls(keyboardMap, dispatch);\n  var level = Game.getLevel(game);\n  React.useEffect(function () {\n    var interval;\n\n    if (game.state === 'PLAYING') {\n      interval = window.setInterval(function () {\n        dispatch('TICK');\n      }, tickSeconds(level) * 1000);\n    }\n\n    return function () {\n      window.clearInterval(interval);\n    };\n  }, [game.state, level]);\n  var controller = React.useMemo(function () {\n    return {\n      pause: function () {\n        return dispatch('PAUSE');\n      },\n      resume: function () {\n        return dispatch('RESUME');\n      },\n      hold: function () {\n        return dispatch('HOLD');\n      },\n      hardDrop: function () {\n        return dispatch('HARD_DROP');\n      },\n      moveDown: function () {\n        return dispatch('MOVE_DOWN');\n      },\n      moveLeft: function () {\n        return dispatch('MOVE_LEFT');\n      },\n      moveRight: function () {\n        return dispatch('MOVE_RIGHT');\n      },\n      flipClockwise: function () {\n        return dispatch('FLIP_CLOCKWISE');\n      },\n      flipCounterclockwise: function () {\n        return dispatch('FLIP_COUNTERCLOCKWISE');\n      },\n      restart: function () {\n        return dispatch('RESTART');\n      }\n    };\n  }, [dispatch]);\n  return React.createElement(Context.Provider, {\n    value: game\n  }, props.children({\n    HeldPiece: HeldPiece,\n    Gameboard: Gameboard,\n    PieceQueue: PieceQueue,\n    points: game.points,\n    linesCleared: game.lines,\n    state: game.state,\n    level: level,\n    controller: controller\n  }));\n}","map":{"version":3,"sources":["/Users/user/Desktop/עבודות להגשה/myweb/node_modules/react-tetris/lib/components/Tetris.js"],"names":["React","Gameboard","Game","HeldPiece","PieceQueue","Context","useKeyboardControls","defaultKeyboardMap","down","left","right","space","z","x","up","p","c","shift","tickSeconds","level","Math","pow","Tetris","props","_a","_b","useReducer","update","init","game","dispatch","keyboardMap","keyboardControls","getLevel","useEffect","interval","state","window","setInterval","clearInterval","controller","useMemo","pause","resume","hold","hardDrop","moveDown","moveLeft","moveRight","flipClockwise","flipCounterclockwise","restart","createElement","Provider","value","children","points","linesCleared","lines"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Gameboard from './Gameboard';\nimport * as Game from '../models/Game';\nimport HeldPiece from './HeldPiece';\nimport PieceQueue from './PieceQueue';\nimport { Context } from '../context';\nimport { useKeyboardControls } from '../hooks/useKeyboardControls';\nvar defaultKeyboardMap = {\n    down: 'MOVE_DOWN',\n    left: 'MOVE_LEFT',\n    right: 'MOVE_RIGHT',\n    space: 'HARD_DROP',\n    z: 'FLIP_COUNTERCLOCKWISE',\n    x: 'FLIP_CLOCKWISE',\n    up: 'FLIP_CLOCKWISE',\n    p: 'TOGGLE_PAUSE',\n    c: 'HOLD',\n    shift: 'HOLD'\n};\n// https://harddrop.com/wiki/Tetris_Worlds#Gravity\nvar tickSeconds = function (level) {\n    return Math.pow((0.8 - (level - 1) * 0.007), (level - 1));\n};\nexport default function Tetris(props) {\n    var _a;\n    var _b = React.useReducer(Game.update, Game.init()), game = _b[0], dispatch = _b[1];\n    var keyboardMap = (_a = props.keyboardControls) !== null && _a !== void 0 ? _a : defaultKeyboardMap;\n    useKeyboardControls(keyboardMap, dispatch);\n    var level = Game.getLevel(game);\n    React.useEffect(function () {\n        var interval;\n        if (game.state === 'PLAYING') {\n            interval = window.setInterval(function () {\n                dispatch('TICK');\n            }, tickSeconds(level) * 1000);\n        }\n        return function () {\n            window.clearInterval(interval);\n        };\n    }, [game.state, level]);\n    var controller = React.useMemo(function () { return ({\n        pause: function () { return dispatch('PAUSE'); },\n        resume: function () { return dispatch('RESUME'); },\n        hold: function () { return dispatch('HOLD'); },\n        hardDrop: function () { return dispatch('HARD_DROP'); },\n        moveDown: function () { return dispatch('MOVE_DOWN'); },\n        moveLeft: function () { return dispatch('MOVE_LEFT'); },\n        moveRight: function () { return dispatch('MOVE_RIGHT'); },\n        flipClockwise: function () { return dispatch('FLIP_CLOCKWISE'); },\n        flipCounterclockwise: function () { return dispatch('FLIP_COUNTERCLOCKWISE'); },\n        restart: function () { return dispatch('RESTART'); }\n    }); }, [dispatch]);\n    return (React.createElement(Context.Provider, { value: game }, props.children({\n        HeldPiece: HeldPiece,\n        Gameboard: Gameboard,\n        PieceQueue: PieceQueue,\n        points: game.points,\n        linesCleared: game.lines,\n        state: game.state,\n        level: level,\n        controller: controller\n    })));\n}\n"]},"metadata":{},"sourceType":"module"}