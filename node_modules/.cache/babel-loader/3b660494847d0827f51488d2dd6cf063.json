{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Texture2D, ProgramManager } from '@luma.gl/core';\nimport { AmbientLight } from './ambient-light';\nimport { DirectionalLight } from './directional-light';\nimport { Matrix4, Vector3 } from '@math.gl/core';\nimport ShadowPass from '../../passes/shadow-pass';\nimport shadow from '../../shaderlib/shadow/shadow';\nconst DEFAULT_AMBIENT_LIGHT_PROPS = {\n  color: [255, 255, 255],\n  intensity: 1.0\n};\nconst DEFAULT_DIRECTIONAL_LIGHT_PROPS = [{\n  color: [255, 255, 255],\n  intensity: 1.0,\n  direction: [-1, 3, -1]\n}, {\n  color: [255, 255, 255],\n  intensity: 0.9,\n  direction: [1, -8, -2.5]\n}];\nconst DEFAULT_SHADOW_COLOR = [0, 0, 0, 200 / 255];\nexport default class LightingEffect {\n  constructor(props = {}) {\n    _defineProperty(this, \"id\", 'lighting-effect');\n\n    _defineProperty(this, \"props\", null);\n\n    _defineProperty(this, \"shadowColor\", DEFAULT_SHADOW_COLOR);\n\n    _defineProperty(this, \"shadow\", void 0);\n\n    _defineProperty(this, \"ambientLight\", null);\n\n    _defineProperty(this, \"directionalLights\", []);\n\n    _defineProperty(this, \"pointLights\", []);\n\n    _defineProperty(this, \"shadowPasses\", []);\n\n    _defineProperty(this, \"shadowMaps\", []);\n\n    _defineProperty(this, \"dummyShadowMap\", null);\n\n    _defineProperty(this, \"programManager\", void 0);\n\n    _defineProperty(this, \"shadowMatrices\", void 0);\n\n    for (const key in props) {\n      const lightSource = props[key];\n\n      switch (lightSource.type) {\n        case 'ambient':\n          this.ambientLight = lightSource;\n          break;\n\n        case 'directional':\n          this.directionalLights.push(lightSource);\n          break;\n\n        case 'point':\n          this.pointLights.push(lightSource);\n          break;\n\n        default:\n      }\n    }\n\n    this._applyDefaultLights();\n\n    this.shadow = this.directionalLights.some(light => light.shadow);\n  }\n\n  preRender(gl, {\n    layers,\n    layerFilter,\n    viewports,\n    onViewportActive,\n    views\n  }) {\n    if (!this.shadow) return;\n    this.shadowMatrices = this._calculateMatrices();\n\n    if (this.shadowPasses.length === 0) {\n      this._createShadowPasses(gl);\n    }\n\n    if (!this.programManager) {\n      this.programManager = ProgramManager.getDefaultProgramManager(gl);\n\n      if (shadow) {\n        this.programManager.addDefaultModule(shadow);\n      }\n    }\n\n    if (!this.dummyShadowMap) {\n      this.dummyShadowMap = new Texture2D(gl, {\n        width: 1,\n        height: 1\n      });\n    }\n\n    for (let i = 0; i < this.shadowPasses.length; i++) {\n      const shadowPass = this.shadowPasses[i];\n      shadowPass.render({\n        layers,\n        layerFilter,\n        viewports,\n        onViewportActive,\n        views,\n        moduleParameters: {\n          shadowLightId: i,\n          dummyShadowMap: this.dummyShadowMap,\n          shadowMatrices: this.shadowMatrices\n        }\n      });\n    }\n  }\n\n  getModuleParameters(layer) {\n    const parameters = this.shadow ? {\n      shadowMaps: this.shadowMaps,\n      dummyShadowMap: this.dummyShadowMap,\n      shadowColor: this.shadowColor,\n      shadowMatrices: this.shadowMatrices\n    } : {};\n    parameters.lightSources = {\n      ambientLight: this.ambientLight,\n      directionalLights: this.directionalLights.map(directionalLight => directionalLight.getProjectedLight({\n        layer\n      })),\n      pointLights: this.pointLights.map(pointLight => pointLight.getProjectedLight({\n        layer\n      }))\n    };\n    return parameters;\n  }\n\n  cleanup() {\n    for (const shadowPass of this.shadowPasses) {\n      shadowPass.delete();\n    }\n\n    this.shadowPasses.length = 0;\n    this.shadowMaps.length = 0;\n\n    if (this.dummyShadowMap) {\n      this.dummyShadowMap.delete();\n      this.dummyShadowMap = null;\n    }\n\n    if (this.shadow && this.programManager) {\n      this.programManager.removeDefaultModule(shadow);\n      this.programManager = null;\n    }\n  }\n\n  _calculateMatrices() {\n    const lightMatrices = [];\n\n    for (const light of this.directionalLights) {\n      const viewMatrix = new Matrix4().lookAt({\n        eye: new Vector3(light.direction).negate()\n      });\n      lightMatrices.push(viewMatrix);\n    }\n\n    return lightMatrices;\n  }\n\n  _createShadowPasses(gl) {\n    for (let i = 0; i < this.directionalLights.length; i++) {\n      const shadowPass = new ShadowPass(gl);\n      this.shadowPasses[i] = shadowPass;\n      this.shadowMaps[i] = shadowPass.shadowMap;\n    }\n  }\n\n  _applyDefaultLights() {\n    const {\n      ambientLight,\n      pointLights,\n      directionalLights\n    } = this;\n\n    if (!ambientLight && pointLights.length === 0 && directionalLights.length === 0) {\n      this.ambientLight = new AmbientLight(DEFAULT_AMBIENT_LIGHT_PROPS);\n      this.directionalLights.push(new DirectionalLight(DEFAULT_DIRECTIONAL_LIGHT_PROPS[0]), new DirectionalLight(DEFAULT_DIRECTIONAL_LIGHT_PROPS[1]));\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../../src/effects/lighting/lighting-effect.ts"],"names":["DEFAULT_AMBIENT_LIGHT_PROPS","color","intensity","DEFAULT_DIRECTIONAL_LIGHT_PROPS","direction","DEFAULT_SHADOW_COLOR","constructor","props","lightSource","light","preRender","views","ProgramManager","width","height","i","shadowPass","moduleParameters","shadowLightId","dummyShadowMap","shadowMatrices","getModuleParameters","parameters","shadowMaps","shadowColor","ambientLight","directionalLights","directionalLight","layer","pointLights","pointLight","cleanup","_calculateMatrices","lightMatrices","viewMatrix","eye","_createShadowPasses","_applyDefaultLights"],"mappings":"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","sourcesContent":["import {Texture2D, ProgramManager} from '@luma.gl/core';\nimport {AmbientLight} from './ambient-light';\nimport {DirectionalLight} from './directional-light';\nimport {PointLight} from './point-light';\nimport {Matrix4, Vector3} from '@math.gl/core';\nimport ShadowPass from '../../passes/shadow-pass';\nimport shadow from '../../shaderlib/shadow/shadow';\n\nimport type Layer from '../../lib/layer';\nimport type {Effect, PreRenderOptions} from '../../lib/effect';\n\nconst DEFAULT_AMBIENT_LIGHT_PROPS = {color: [255, 255, 255], intensity: 1.0};\nconst DEFAULT_DIRECTIONAL_LIGHT_PROPS = [\n  {\n    color: [255, 255, 255],\n    intensity: 1.0,\n    direction: [-1, 3, -1]\n  },\n  {\n    color: [255, 255, 255],\n    intensity: 0.9,\n    direction: [1, -8, -2.5]\n  }\n];\nconst DEFAULT_SHADOW_COLOR = [0, 0, 0, 200 / 255];\n\n// Class to manage ambient, point and directional light sources in deck\nexport default class LightingEffect implements Effect {\n  id = 'lighting-effect';\n  props = null;\n  shadowColor: number[] = DEFAULT_SHADOW_COLOR;\n\n  private shadow: boolean;\n  private ambientLight: AmbientLight | null = null;\n  private directionalLights: DirectionalLight[] = [];\n  private pointLights: PointLight[] = [];\n  private shadowPasses: ShadowPass[] = [];\n  private shadowMaps: Texture2D[] = [];\n  private dummyShadowMap: Texture2D | null = null;\n  private programManager?: ProgramManager;\n  private shadowMatrices?: Matrix4[];\n\n  constructor(props: Record<string, PointLight | DirectionalLight | AmbientLight> = {}) {\n    for (const key in props) {\n      const lightSource = props[key];\n\n      switch (lightSource.type) {\n        case 'ambient':\n          this.ambientLight = lightSource;\n          break;\n\n        case 'directional':\n          this.directionalLights.push(lightSource as DirectionalLight);\n          break;\n\n        case 'point':\n          this.pointLights.push(lightSource as PointLight);\n          break;\n        default:\n      }\n    }\n    this._applyDefaultLights();\n\n    this.shadow = this.directionalLights.some(light => light.shadow);\n  }\n\n  preRender(\n    gl: WebGLRenderingContext,\n    {layers, layerFilter, viewports, onViewportActive, views}: PreRenderOptions\n  ) {\n    if (!this.shadow) return;\n\n    // create light matrix every frame to make sure always updated from light source\n    this.shadowMatrices = this._calculateMatrices();\n\n    if (this.shadowPasses.length === 0) {\n      this._createShadowPasses(gl);\n    }\n    if (!this.programManager) {\n      // TODO - support multiple contexts\n      this.programManager = ProgramManager.getDefaultProgramManager(gl);\n      if (shadow) {\n        this.programManager.addDefaultModule(shadow);\n      }\n    }\n\n    if (!this.dummyShadowMap) {\n      this.dummyShadowMap = new Texture2D(gl, {\n        width: 1,\n        height: 1\n      });\n    }\n\n    for (let i = 0; i < this.shadowPasses.length; i++) {\n      const shadowPass = this.shadowPasses[i];\n      shadowPass.render({\n        layers,\n        layerFilter,\n        viewports,\n        onViewportActive,\n        views,\n        moduleParameters: {\n          shadowLightId: i,\n          dummyShadowMap: this.dummyShadowMap,\n          shadowMatrices: this.shadowMatrices\n        }\n      });\n    }\n  }\n\n  getModuleParameters(layer: Layer) {\n    const parameters: {\n      lightSources?: {\n        ambientLight: AmbientLight | null;\n        directionalLights: DirectionalLight[];\n        pointLights: PointLight[];\n      };\n      shadowMaps?: Texture2D[];\n      dummyShadowMap?: Texture2D;\n      shadowColor?: number[];\n      shadowMatrices?: Matrix4[];\n    } = this.shadow\n      ? {\n          shadowMaps: this.shadowMaps,\n          dummyShadowMap: this.dummyShadowMap,\n          shadowColor: this.shadowColor,\n          shadowMatrices: this.shadowMatrices\n        }\n      : {};\n\n    // when not rendering to screen, turn off lighting by adding empty light source object\n    // lights shader module relies on the `lightSources` to turn on/off lighting\n    parameters.lightSources = {\n      ambientLight: this.ambientLight,\n      directionalLights: this.directionalLights.map(directionalLight =>\n        directionalLight.getProjectedLight({layer})\n      ),\n      pointLights: this.pointLights.map(pointLight => pointLight.getProjectedLight({layer}))\n    };\n\n    return parameters;\n  }\n\n  cleanup(): void {\n    for (const shadowPass of this.shadowPasses) {\n      shadowPass.delete();\n    }\n    this.shadowPasses.length = 0;\n    this.shadowMaps.length = 0;\n\n    if (this.dummyShadowMap) {\n      this.dummyShadowMap.delete();\n      this.dummyShadowMap = null;\n    }\n\n    if (this.shadow && this.programManager) {\n      this.programManager.removeDefaultModule(shadow);\n      this.programManager = null;\n    }\n  }\n\n  private _calculateMatrices(): Matrix4[] {\n    const lightMatrices: Matrix4[] = [];\n    for (const light of this.directionalLights) {\n      const viewMatrix = new Matrix4().lookAt({\n        eye: new Vector3(light.direction).negate()\n      });\n\n      lightMatrices.push(viewMatrix);\n    }\n    return lightMatrices;\n  }\n\n  private _createShadowPasses(gl: WebGLRenderingContext): void {\n    for (let i = 0; i < this.directionalLights.length; i++) {\n      const shadowPass = new ShadowPass(gl);\n      this.shadowPasses[i] = shadowPass;\n      this.shadowMaps[i] = shadowPass.shadowMap;\n    }\n  }\n\n  private _applyDefaultLights(): void {\n    const {ambientLight, pointLights, directionalLights} = this;\n    if (!ambientLight && pointLights.length === 0 && directionalLights.length === 0) {\n      this.ambientLight = new AmbientLight(DEFAULT_AMBIENT_LIGHT_PROPS);\n      this.directionalLights.push(\n        new DirectionalLight(DEFAULT_DIRECTIONAL_LIGHT_PROPS[0]),\n        new DirectionalLight(DEFAULT_DIRECTIONAL_LIGHT_PROPS[1])\n      );\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}