{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport Matrix4 from './matrix4';\nimport Vector3 from './vector3';\nimport Euler from './euler';\nexport default class Pose {\n  constructor({\n    x = 0,\n    y = 0,\n    z = 0,\n    roll = 0,\n    pitch = 0,\n    yaw = 0,\n    position,\n    orientation\n  } = {}) {\n    _defineProperty(this, \"position\", void 0);\n\n    _defineProperty(this, \"orientation\", void 0);\n\n    if (Array.isArray(position) && position.length === 3) {\n      this.position = new Vector3(position);\n    } else {\n      this.position = new Vector3(x, y, z);\n    }\n\n    if (Array.isArray(orientation) && orientation.length === 4) {\n      this.orientation = new Euler(orientation, orientation[3]);\n    } else {\n      this.orientation = new Euler(roll, pitch, yaw, Euler.RollPitchYaw);\n    }\n  }\n\n  get x() {\n    return this.position.x;\n  }\n\n  set x(value) {\n    this.position.x = value;\n  }\n\n  get y() {\n    return this.position.y;\n  }\n\n  set y(value) {\n    this.position.y = value;\n  }\n\n  get z() {\n    return this.position.z;\n  }\n\n  set z(value) {\n    this.position.z = value;\n  }\n\n  get roll() {\n    return this.orientation.roll;\n  }\n\n  set roll(value) {\n    this.orientation.roll = value;\n  }\n\n  get pitch() {\n    return this.orientation.pitch;\n  }\n\n  set pitch(value) {\n    this.orientation.pitch = value;\n  }\n\n  get yaw() {\n    return this.orientation.yaw;\n  }\n\n  set yaw(value) {\n    this.orientation.yaw = value;\n  }\n\n  getPosition() {\n    return this.position;\n  }\n\n  getOrientation() {\n    return this.orientation;\n  }\n\n  equals(pose) {\n    if (!pose) {\n      return false;\n    }\n\n    return this.position.equals(pose.position) && this.orientation.equals(pose.orientation);\n  }\n\n  exactEquals(pose) {\n    if (!pose) {\n      return false;\n    }\n\n    return this.position.exactEquals(pose.position) && this.orientation.exactEquals(pose.orientation);\n  }\n\n  getTransformationMatrix() {\n    const sr = Math.sin(this.roll);\n    const sp = Math.sin(this.pitch);\n    const sw = Math.sin(this.yaw);\n    const cr = Math.cos(this.roll);\n    const cp = Math.cos(this.pitch);\n    const cw = Math.cos(this.yaw);\n    return new Matrix4().setRowMajor(cw * cp, -sw * cr + cw * sp * sr, sw * sr + cw * sp * cr, this.x, sw * cp, cw * cr + sw * sp * sr, -cw * sr + sw * sp * cr, this.y, -sp, cp * sr, cp * cr, this.z, 0, 0, 0, 1);\n  }\n\n  getTransformationMatrixFromPose(pose) {\n    return new Matrix4().multiplyRight(this.getTransformationMatrix()).multiplyRight(pose.getTransformationMatrix().invert());\n  }\n\n  getTransformationMatrixToPose(pose) {\n    return new Matrix4().multiplyRight(pose.getTransformationMatrix()).multiplyRight(this.getTransformationMatrix().invert());\n  }\n\n}","map":{"version":3,"sources":["../../../src/classes/pose.ts"],"names":["constructor","x","y","z","roll","pitch","yaw","orientation","Array","position","Euler","getPosition","getOrientation","equals","pose","exactEquals","getTransformationMatrix","sr","Math","sp","sw","cr","cp","cw","getTransformationMatrixFromPose","getTransformationMatrixToPose"],"mappings":"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","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n// MIT License\nimport Matrix4 from './matrix4';\nimport Vector3 from './vector3';\nimport Euler from './euler';\nimport {NumericArray} from '@math.gl/types';\n\ntype PoseOptions = {\n  position?: Readonly<NumericArray>;\n  orientation?: Readonly<NumericArray>;\n  x?: number;\n  y?: number;\n  z?: number;\n  roll?: number;\n  pitch?: number;\n  yaw?: number;\n};\n\nexport default class Pose {\n  readonly position: Vector3;\n  readonly orientation: Euler;\n\n  constructor({\n    x = 0,\n    y = 0,\n    z = 0,\n    roll = 0,\n    pitch = 0,\n    yaw = 0,\n    position,\n    orientation\n  }: PoseOptions = {}) {\n    if (Array.isArray(position) && position.length === 3) {\n      this.position = new Vector3(position);\n    } else {\n      this.position = new Vector3(x, y, z);\n    }\n    if (Array.isArray(orientation) && orientation.length === 4) {\n      // @ts-expect-error\n      this.orientation = new Euler(orientation, orientation[3]);\n    } else {\n      this.orientation = new Euler(roll, pitch, yaw, Euler.RollPitchYaw);\n    }\n  }\n\n  get x(): number {\n    return this.position.x;\n  }\n\n  set x(value: number) {\n    this.position.x = value;\n  }\n\n  get y(): number {\n    return this.position.y;\n  }\n\n  set y(value: number) {\n    this.position.y = value;\n  }\n\n  get z(): number {\n    return this.position.z;\n  }\n\n  set z(value: number) {\n    this.position.z = value;\n  }\n\n  get roll(): number {\n    return this.orientation.roll;\n  }\n\n  set roll(value: number) {\n    this.orientation.roll = value;\n  }\n\n  get pitch(): number {\n    return this.orientation.pitch;\n  }\n  set pitch(value: number) {\n    this.orientation.pitch = value;\n  }\n\n  get yaw(): number {\n    return this.orientation.yaw;\n  }\n\n  set yaw(value: number) {\n    this.orientation.yaw = value;\n  }\n\n  getPosition(): Vector3 {\n    return this.position;\n  }\n\n  getOrientation(): Euler {\n    return this.orientation;\n  }\n\n  equals(pose: Pose): boolean {\n    if (!pose) {\n      return false;\n    }\n    return this.position.equals(pose.position) && this.orientation.equals(pose.orientation);\n  }\n\n  exactEquals(pose: Pose): boolean {\n    if (!pose) {\n      return false;\n    }\n    return (\n      this.position.exactEquals(pose.position) && this.orientation.exactEquals(pose.orientation)\n    );\n  }\n\n  getTransformationMatrix(): Matrix4 {\n    // setup pre computations for the sin/cos of the angles\n    const sr = Math.sin(this.roll);\n    const sp = Math.sin(this.pitch);\n    const sw = Math.sin(this.yaw);\n    const cr = Math.cos(this.roll);\n    const cp = Math.cos(this.pitch);\n    const cw = Math.cos(this.yaw);\n\n    // Create matrix\n    return new Matrix4().setRowMajor(\n      cw * cp, // 0,0\n      -sw * cr + cw * sp * sr, // 0,1\n      sw * sr + cw * sp * cr, // 0,2\n      this.x, // 0,3\n      sw * cp, // 1,0\n      cw * cr + sw * sp * sr, // 1,1\n      -cw * sr + sw * sp * cr, // 1,2\n      this.y, // 1,3\n      -sp, // 2,0\n      cp * sr, // 2,1\n      cp * cr, // 2,2\n      this.z, // 2,3\n      0,\n      0,\n      0,\n      1\n    );\n  }\n\n  getTransformationMatrixFromPose(pose: Pose): Matrix4 {\n    return new Matrix4()\n      .multiplyRight(this.getTransformationMatrix())\n      .multiplyRight(pose.getTransformationMatrix().invert());\n  }\n\n  getTransformationMatrixToPose(pose: Pose): Matrix4 {\n    return new Matrix4()\n      .multiplyRight(pose.getTransformationMatrix())\n      .multiplyRight(this.getTransformationMatrix().invert());\n  }\n}\n"]},"metadata":{},"sourceType":"module"}