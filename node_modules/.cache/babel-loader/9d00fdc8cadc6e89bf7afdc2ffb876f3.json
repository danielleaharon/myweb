{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/\\u05E2\\u05D1\\u05D5\\u05D3\\u05D5\\u05EA \\u05DC\\u05D4\\u05D2\\u05E9\\u05D4/myweb/src/components/hero/draw.js\";\nimport React, { Component } from 'react';\nimport { useEffect, useRef, useState } from \"react\"; // import \"./App.css\"; \n\nfunction Draw(props) {\n  const canvasRef = useRef(null);\n  const ctxRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [lineWidth, setLineWidth] = useState(15);\n  const [lineColor, setLineColor] = useState(props.lineColor);\n  const [lineOpacity, setLineOpacity] = useState(0.1); // Initialization when the component \n  // mounts for the first time \n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.lineCap = \"round\";\n    ctx.lineJoin = \"round\";\n    ctx.globalAlpha = lineOpacity;\n    ctx.strokeStyle = lineColor;\n    ctx.lineWidth = lineWidth;\n    ctxRef.current = ctx;\n  }, [lineColor, lineOpacity, lineWidth]); // Function for starting the drawing \n\n  const startDrawing = e => {\n    ctxRef.current.beginPath();\n    ctxRef.current.moveTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n    setIsDrawing(true);\n  }; // Function for ending the drawing \n\n\n  const endDrawing = () => {\n    ctxRef.current.closePath();\n    setIsDrawing(false);\n  };\n\n  const draw = e => {\n    if (!isDrawing) {\n      return;\n    }\n\n    ctxRef.current.lineTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n    ctxRef.current.stroke();\n  };\n\n  return (// <div className=\"App-draw\"> \n    React.createElement(\"div\", {\n      className: \"App-draw draw-area\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      onMouseDown: startDrawing,\n      onMouseUp: endDrawing,\n      onMouseMove: draw,\n      onMouseOver: startDrawing,\n      ref: canvasRef,\n      width: `1280px`,\n      height: `720px`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }), React.createElement(\"svg\", {\n      class: \"text-white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"text\", {\n      x: \"0\",\n      y: \"300\",\n      lengthAdjust: \"spacing\",\n      \"font-family\": \"Lobster\",\n      \"font-size\": \"230px\",\n      \"font-weight\": \"700\",\n      fill: \"white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \" H \"))) // </div> \n\n  );\n}\n\nexport default Draw;","map":{"version":3,"sources":["/Users/user/Desktop/עבודות להגשה/myweb/src/components/hero/draw.js"],"names":["React","Component","useEffect","useRef","useState","Draw","props","canvasRef","ctxRef","isDrawing","setIsDrawing","lineWidth","setLineWidth","lineColor","setLineColor","lineOpacity","setLineOpacity","canvas","current","ctx","getContext","lineCap","lineJoin","globalAlpha","strokeStyle","startDrawing","e","beginPath","moveTo","nativeEvent","offsetX","offsetY","endDrawing","closePath","draw","lineTo","stroke"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { useEffect, useRef, useState } from \"react\"; \n\n\n// import \"./App.css\"; \n\n  \nfunction Draw(props) { \n\n  const canvasRef = useRef(null); \n\n  const ctxRef = useRef(null); \n\n  const [isDrawing, setIsDrawing] = useState(false); \n\n  const [lineWidth, setLineWidth] = useState(15); \n\n  const [lineColor, setLineColor] = useState(props.lineColor); \n\n  const [lineOpacity, setLineOpacity] = useState(0.1); \n\n  \n\n  // Initialization when the component \n\n  // mounts for the first time \n\n  useEffect(() => { \n\n    const canvas = canvasRef.current; \n\n    const ctx = canvas.getContext(\"2d\"); \n\n    ctx.lineCap = \"round\"; \n\n    ctx.lineJoin = \"round\"; \n\n    ctx.globalAlpha = lineOpacity; \n\n    ctx.strokeStyle = lineColor; \n\n    ctx.lineWidth = lineWidth; \n\n    ctxRef.current = ctx; \n\n  }, [lineColor, lineOpacity, lineWidth]); \n\n  \n\n  // Function for starting the drawing \n\n  const startDrawing = (e) => { \n\n    ctxRef.current.beginPath(); \n\n    ctxRef.current.moveTo( \n\n      e.nativeEvent.offsetX,  \n\n      e.nativeEvent.offsetY \n\n    ); \n\n    setIsDrawing(true); \n\n  }; \n\n  \n\n  // Function for ending the drawing \n\n  const endDrawing = () => { \n\n    ctxRef.current.closePath(); \n\n    setIsDrawing(false); \n\n  }; \n\n  \n\n  const draw = (e) => { \n\n    if (!isDrawing) { \n\n      return; \n\n    } \n\n    ctxRef.current.lineTo( \n\n      e.nativeEvent.offsetX,  \n\n      e.nativeEvent.offsetY \n\n    ); \n\n      \n\n    ctxRef.current.stroke(); \n\n  }; \n\n  \n\n  return ( \n\n    // <div className=\"App-draw\"> \n\n      <div className=\"App-draw draw-area\"> \n\n\n        <canvas \n\n          onMouseDown={startDrawing} \n\n          onMouseUp={endDrawing} \n\n          onMouseMove={draw} \n          onMouseOver={startDrawing}\n\n          ref={canvasRef} \n\n          width={`1280px`} \n\n          height={`720px`} \n\n        >\n      </canvas> \n      <svg class=\"text-white\">\n        <text x=\"0\" y=\"300\" lengthAdjust=\"spacing\" font-family=\"Lobster\" font-size=\"230px\" font-weight=\"700\" fill=\"white\"> H </text>\n      </svg>\n      </div> \n\n    // </div> \n\n  ); \n} \n\n  \n\nexport default Draw;"]},"metadata":{},"sourceType":"module"}