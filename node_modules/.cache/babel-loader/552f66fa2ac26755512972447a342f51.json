{"ast":null,"code":"import MathArray from './base/math-array';\nimport { checkNumber, checkVector } from '../lib/validators';\nimport Vector4 from './vector4';\nimport * as quat from 'gl-matrix/quat';\nimport * as vec4 from 'gl-matrix/vec4';\nconst IDENTITY_QUATERNION = [0, 0, 0, 1];\nexport default class Quaternion extends MathArray {\n  constructor(x = 0, y = 0, z = 0, w = 1) {\n    super(-0, -0, -0, -0);\n\n    if (Array.isArray(x) && arguments.length === 1) {\n      this.copy(x);\n    } else {\n      this.set(x, y, z, w);\n    }\n  }\n\n  copy(array) {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    this[3] = array[3];\n    return this.check();\n  }\n\n  set(x, y, z, w) {\n    this[0] = x;\n    this[1] = y;\n    this[2] = z;\n    this[3] = w;\n    return this.check();\n  }\n\n  fromObject(object) {\n    this[0] = object.x;\n    this[1] = object.y;\n    this[2] = object.z;\n    this[3] = object.w;\n    return this.check();\n  }\n\n  fromMatrix3(m) {\n    quat.fromMat3(this, m);\n    return this.check();\n  }\n\n  fromAxisRotation(axis, rad) {\n    quat.setAxisAngle(this, axis, rad);\n    return this.check();\n  }\n\n  identity() {\n    quat.identity(this);\n    return this.check();\n  }\n\n  setAxisAngle(axis, rad) {\n    return this.fromAxisRotation(axis, rad);\n  }\n\n  get ELEMENTS() {\n    return 4;\n  }\n\n  get x() {\n    return this[0];\n  }\n\n  set x(value) {\n    this[0] = checkNumber(value);\n  }\n\n  get y() {\n    return this[1];\n  }\n\n  set y(value) {\n    this[1] = checkNumber(value);\n  }\n\n  get z() {\n    return this[2];\n  }\n\n  set z(value) {\n    this[2] = checkNumber(value);\n  }\n\n  get w() {\n    return this[3];\n  }\n\n  set w(value) {\n    this[3] = checkNumber(value);\n  }\n\n  len() {\n    return quat.length(this);\n  }\n\n  lengthSquared() {\n    return quat.squaredLength(this);\n  }\n\n  dot(a) {\n    return quat.dot(this, a);\n  }\n\n  rotationTo(vectorA, vectorB) {\n    quat.rotationTo(this, vectorA, vectorB);\n    return this.check();\n  }\n\n  add(a) {\n    quat.add(this, this, a);\n    return this.check();\n  }\n\n  calculateW() {\n    quat.calculateW(this, this);\n    return this.check();\n  }\n\n  conjugate() {\n    quat.conjugate(this, this);\n    return this.check();\n  }\n\n  invert() {\n    quat.invert(this, this);\n    return this.check();\n  }\n\n  lerp(a, b, t) {\n    if (t === undefined) {\n      return this.lerp(this, a, b);\n    }\n\n    quat.lerp(this, a, b, t);\n    return this.check();\n  }\n\n  multiplyRight(a) {\n    quat.multiply(this, this, a);\n    return this.check();\n  }\n\n  multiplyLeft(a) {\n    quat.multiply(this, a, this);\n    return this.check();\n  }\n\n  normalize() {\n    const length = this.len();\n    const l = length > 0 ? 1 / length : 0;\n    this[0] = this[0] * l;\n    this[1] = this[1] * l;\n    this[2] = this[2] * l;\n    this[3] = this[3] * l;\n\n    if (length === 0) {\n      this[3] = 1;\n    }\n\n    return this.check();\n  }\n\n  rotateX(rad) {\n    quat.rotateX(this, this, rad);\n    return this.check();\n  }\n\n  rotateY(rad) {\n    quat.rotateY(this, this, rad);\n    return this.check();\n  }\n\n  rotateZ(rad) {\n    quat.rotateZ(this, this, rad);\n    return this.check();\n  }\n\n  scale(b) {\n    quat.scale(this, this, b);\n    return this.check();\n  }\n\n  slerp(arg0, arg1, arg2) {\n    let start;\n    let target;\n    let ratio;\n\n    switch (arguments.length) {\n      case 1:\n        ({\n          start = IDENTITY_QUATERNION,\n          target,\n          ratio\n        } = arg0);\n        break;\n\n      case 2:\n        start = this;\n        target = arg0;\n        ratio = arg1;\n        break;\n\n      default:\n        start = arg0;\n        target = arg1;\n        ratio = arg2;\n    }\n\n    quat.slerp(this, start, target, ratio);\n    return this.check();\n  }\n\n  transformVector4(vector, result = new Vector4()) {\n    vec4.transformQuat(result, vector, this);\n    return checkVector(result, 4);\n  }\n\n  lengthSq() {\n    return this.lengthSquared();\n  }\n\n  setFromAxisAngle(axis, rad) {\n    return this.setAxisAngle(axis, rad);\n  }\n\n  premultiply(a) {\n    return this.multiplyLeft(a);\n  }\n\n  multiply(a) {\n    return this.multiplyRight(a);\n  }\n\n}","map":{"version":3,"sources":["../../../src/classes/quaternion.ts"],"names":["IDENTITY_QUATERNION","constructor","x","y","z","w","Array","arguments","copy","array","set","fromObject","object","fromMatrix3","quat","fromAxisRotation","identity","setAxisAngle","ELEMENTS","checkNumber","len","lengthSquared","dot","rotationTo","add","calculateW","conjugate","invert","lerp","t","multiplyRight","multiplyLeft","normalize","length","l","rotateX","rotateY","rotateZ","scale","slerp","start","ratio","target","transformVector4","result","vec4","checkVector","lengthSq","setFromAxisAngle","premultiply","multiply"],"mappings":"AAEA,OAAA,SAAA,MAAA,mBAAA;AACA,SAAA,WAAA,EAAA,WAAA,QAAA,mBAAA;AACA,OAAA,OAAA,MAAA,WAAA;AACA,OAAO,KAAP,IAAA,MAAA,gBAAA;AACA,OAAO,KAAP,IAAA,MAAA,gBAAA;AAGA,MAAMA,mBAAmB,GAAG,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAA5B,CAA4B,CAA5B;AAEA,eAAe,MAAA,UAAA,SAAA,SAAA,CAAmC;AAChDC,EAAAA,WAAW,CAACC,CAAkC,GAAnC,CAAA,EAAyCC,CAAC,GAA1C,CAAA,EAAgDC,CAAC,GAAjD,CAAA,EAAuDC,CAAC,GAAxD,CAAA,EAA8D;AAEvE,UAAM,CAAN,CAAA,EAAU,CAAV,CAAA,EAAc,CAAd,CAAA,EAAkB,CAAlB,CAAA;;AAEA,QAAIC,KAAK,CAALA,OAAAA,CAAAA,CAAAA,KAAoBC,SAAS,CAATA,MAAAA,KAAxB,CAAA,EAAgD;AAC9C,WAAA,IAAA,CAAA,CAAA;AADF,KAAA,MAEO;AACL,WAAA,GAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AACD;AACF;;AAEDC,EAAAA,IAAI,CAAA,KAAA,EAAsC;AACxC,SAAA,CAAA,IAAUC,KAAK,CAAf,CAAe,CAAf;AACA,SAAA,CAAA,IAAUA,KAAK,CAAf,CAAe,CAAf;AACA,SAAA,CAAA,IAAUA,KAAK,CAAf,CAAe,CAAf;AACA,SAAA,CAAA,IAAUA,KAAK,CAAf,CAAe,CAAf;AACA,WAAO,KAAP,KAAO,EAAP;AACD;;AAEDC,EAAAA,GAAG,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAmD;AACpD,SAAA,CAAA,IAAA,CAAA;AACA,SAAA,CAAA,IAAA,CAAA;AACA,SAAA,CAAA,IAAA,CAAA;AACA,SAAA,CAAA,IAAA,CAAA;AACA,WAAO,KAAP,KAAO,EAAP;AACD;;AAEDC,EAAAA,UAAU,CAAA,MAAA,EAA6D;AACrE,SAAA,CAAA,IAAUC,MAAM,CAAhB,CAAA;AACA,SAAA,CAAA,IAAUA,MAAM,CAAhB,CAAA;AACA,SAAA,CAAA,IAAUA,MAAM,CAAhB,CAAA;AACA,SAAA,CAAA,IAAUA,MAAM,CAAhB,CAAA;AACA,WAAO,KAAP,KAAO,EAAP;AACD;;AASDC,EAAAA,WAAW,CAAA,CAAA,EAAkC;AAC3CC,IAAAA,IAAI,CAAJA,QAAAA,CAAAA,IAAAA,EAAAA,CAAAA;AACA,WAAO,KAAP,KAAO,EAAP;AACD;;AAEDC,EAAAA,gBAAgB,CAAA,IAAA,EAAA,GAAA,EAAkD;AAChED,IAAAA,IAAI,CAAJA,YAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAAA,GAAAA;AACA,WAAO,KAAP,KAAO,EAAP;AACD;;AAGDE,EAAAA,QAAQ,GAAS;AACfF,IAAAA,IAAI,CAAJA,QAAAA,CAAAA,IAAAA;AACA,WAAO,KAAP,KAAO,EAAP;AACD;;AASDG,EAAAA,YAAY,CAAA,IAAA,EAAA,GAAA,EAAkD;AAC5D,WAAO,KAAA,gBAAA,CAAA,IAAA,EAAP,GAAO,CAAP;AACD;;AAGW,MAARC,QAAQ,GAAW;AACrB,WAAA,CAAA;AACD;;AAEI,MAADhB,CAAC,GAAW;AACd,WAAO,KAAP,CAAO,CAAP;AACD;;AACI,MAADA,CAAC,CAAA,KAAA,EAAgB;AACnB,SAAA,CAAA,IAAUiB,WAAW,CAArB,KAAqB,CAArB;AACD;;AAEI,MAADhB,CAAC,GAAW;AACd,WAAO,KAAP,CAAO,CAAP;AACD;;AACI,MAADA,CAAC,CAAA,KAAA,EAAgB;AACnB,SAAA,CAAA,IAAUgB,WAAW,CAArB,KAAqB,CAArB;AACD;;AAEI,MAADf,CAAC,GAAW;AACd,WAAO,KAAP,CAAO,CAAP;AACD;;AACI,MAADA,CAAC,CAAA,KAAA,EAAgB;AACnB,SAAA,CAAA,IAAUe,WAAW,CAArB,KAAqB,CAArB;AACD;;AAEI,MAADd,CAAC,GAAW;AACd,WAAO,KAAP,CAAO,CAAP;AACD;;AACI,MAADA,CAAC,CAAA,KAAA,EAAgB;AACnB,SAAA,CAAA,IAAUc,WAAW,CAArB,KAAqB,CAArB;AACD;;AAGDC,EAAAA,GAAG,GAAW;AACZ,WAAON,IAAI,CAAJA,MAAAA,CAAP,IAAOA,CAAP;AACD;;AAGDO,EAAAA,aAAa,GAAW;AACtB,WAAOP,IAAI,CAAJA,aAAAA,CAAP,IAAOA,CAAP;AACD;;AAIDQ,EAAAA,GAAG,CAAA,CAAA,EAAoC;AACrC,WAAOR,IAAI,CAAJA,GAAAA,CAAAA,IAAAA,EAAP,CAAOA,CAAP;AACD;;AAkBDS,EAAAA,UAAU,CAAA,OAAA,EAAA,OAAA,EAAqD;AAC7DT,IAAAA,IAAI,CAAJA,UAAAA,CAAAA,IAAAA,EAAAA,OAAAA,EAAAA,OAAAA;AACA,WAAO,KAAP,KAAO,EAAP;AACD;;AAaDU,EAAAA,GAAG,CAAA,CAAA,EAAkC;AACnCV,IAAAA,IAAI,CAAJA,GAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAAA,CAAAA;AACA,WAAO,KAAP,KAAO,EAAP;AACD;;AAIDW,EAAAA,UAAU,GAAS;AACjBX,IAAAA,IAAI,CAAJA,UAAAA,CAAAA,IAAAA,EAAAA,IAAAA;AACA,WAAO,KAAP,KAAO,EAAP;AACD;;AAIDY,EAAAA,SAAS,GAAS;AAChBZ,IAAAA,IAAI,CAAJA,SAAAA,CAAAA,IAAAA,EAAAA,IAAAA;AACA,WAAO,KAAP,KAAO,EAAP;AACD;;AAGDa,EAAAA,MAAM,GAAS;AACbb,IAAAA,IAAI,CAAJA,MAAAA,CAAAA,IAAAA,EAAAA,IAAAA;AACA,WAAO,KAAP,KAAO,EAAP;AACD;;AAGDc,EAAAA,IAAI,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAkF;AACpF,QAAIC,CAAC,KAAL,SAAA,EAAqB;AACnB,aAAO,KAAA,IAAA,CAAA,IAAA,EAAA,CAAA,EAAP,CAAO,CAAP;AACD;;AACDf,IAAAA,IAAI,CAAJA,IAAAA,CAAAA,IAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA;AACA,WAAO,KAAP,KAAO,EAAP;AACD;;AAGDgB,EAAAA,aAAa,CAAA,CAAA,EAAkC;AAC7ChB,IAAAA,IAAI,CAAJA,QAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAAA,CAAAA;AACA,WAAO,KAAP,KAAO,EAAP;AACD;;AAEDiB,EAAAA,YAAY,CAAA,CAAA,EAAkC;AAC5CjB,IAAAA,IAAI,CAAJA,QAAAA,CAAAA,IAAAA,EAAAA,CAAAA,EAAAA,IAAAA;AACA,WAAO,KAAP,KAAO,EAAP;AACD;;AAGDkB,EAAAA,SAAS,GAAS;AAEhB,UAAMC,MAAM,GAAG,KAAf,GAAe,EAAf;AACA,UAAMC,CAAC,GAAGD,MAAM,GAANA,CAAAA,GAAa,IAAbA,MAAAA,GAAV,CAAA;AACA,SAAA,CAAA,IAAU,KAAA,CAAA,IAAV,CAAA;AACA,SAAA,CAAA,IAAU,KAAA,CAAA,IAAV,CAAA;AACA,SAAA,CAAA,IAAU,KAAA,CAAA,IAAV,CAAA;AACA,SAAA,CAAA,IAAU,KAAA,CAAA,IAAV,CAAA;;AAEA,QAAIA,MAAM,KAAV,CAAA,EAAkB;AAChB,WAAA,CAAA,IAAA,CAAA;AACD;;AACD,WAAO,KAAP,KAAO,EAAP;AACD;;AAGDE,EAAAA,OAAO,CAAA,GAAA,EAAoB;AACzBrB,IAAAA,IAAI,CAAJA,OAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAAA,GAAAA;AACA,WAAO,KAAP,KAAO,EAAP;AACD;;AAGDsB,EAAAA,OAAO,CAAA,GAAA,EAAoB;AACzBtB,IAAAA,IAAI,CAAJA,OAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAAA,GAAAA;AACA,WAAO,KAAP,KAAO,EAAP;AACD;;AAGDuB,EAAAA,OAAO,CAAA,GAAA,EAAoB;AACzBvB,IAAAA,IAAI,CAAJA,OAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAAA,GAAAA;AACA,WAAO,KAAP,KAAO,EAAP;AACD;;AAGDwB,EAAAA,KAAK,CAAA,CAAA,EAAkB;AACrBxB,IAAAA,IAAI,CAAJA,KAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAAA,CAAAA;AACA,WAAO,KAAP,KAAO,EAAP;AACD;;AAWDyB,EAAAA,KAAK,CAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAUG;AACN,QAAA,KAAA;AACA,QAAA,MAAA;AACA,QAAA,KAAA;;AAEA,YAAQhC,SAAS,CAAjB,MAAA;AACE,WAAA,CAAA;AAEE,SAAC;AACCiC,UAAAA,KAAK,GADN,mBAAA;AAAA,UAAA,MAAA;AAGCC,UAAAA;AAHD,YAAD,IAAA;AASA;;AACF,WAAA,CAAA;AACED,QAAAA,KAAK,GAALA,IAAAA;AACAE,QAAAA,MAAM,GAANA,IAAAA;AACAD,QAAAA,KAAK,GAALA,IAAAA;AACA;;AACF;AAEED,QAAAA,KAAK,GAALA,IAAAA;AACAE,QAAAA,MAAM,GAANA,IAAAA;AACAD,QAAAA,KAAK,GAALA,IAAAA;AAtBJ;;AAwBA3B,IAAAA,IAAI,CAAJA,KAAAA,CAAAA,IAAAA,EAAAA,KAAAA,EAAAA,MAAAA,EAAAA,KAAAA;AACA,WAAO,KAAP,KAAO,EAAP;AACD;;AAED6B,EAAAA,gBAAgB,CAAA,MAAA,EAEdC,MAAoB,GAAG,IAFT,OAES,EAFT,EAGA;AACdC,IAAAA,IAAI,CAAJA,aAAAA,CAAAA,MAAAA,EAAAA,MAAAA,EAAAA,IAAAA;AACA,WAAOC,WAAW,CAAA,MAAA,EAAlB,CAAkB,CAAlB;AACD;;AAGDC,EAAAA,QAAQ,GAAW;AACjB,WAAO,KAAP,aAAO,EAAP;AACD;;AAEDC,EAAAA,gBAAgB,CAAA,IAAA,EAAA,GAAA,EAAkD;AAChE,WAAO,KAAA,YAAA,CAAA,IAAA,EAAP,GAAO,CAAP;AACD;;AAEDC,EAAAA,WAAW,CAAA,CAAA,EAAkC;AAC3C,WAAO,KAAA,YAAA,CAAP,CAAO,CAAP;AACD;;AAEDC,EAAAA,QAAQ,CAAA,CAAA,EAAkC;AACxC,WAAO,KAAA,aAAA,CAAP,CAAO,CAAP;AACD;;AAvT+C","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n// MIT License\nimport MathArray from './base/math-array';\nimport {checkNumber, checkVector} from '../lib/validators';\nimport Vector4 from './vector4';\nimport * as quat from 'gl-matrix/quat';\nimport * as vec4 from 'gl-matrix/vec4';\nimport {NumericArray} from '@math.gl/types';\n\nconst IDENTITY_QUATERNION = [0, 0, 0, 1] as const;\n\nexport default class Quaternion extends MathArray {\n  constructor(x: number | Readonly<NumericArray> = 0, y = 0, z = 0, w = 1) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0, -0);\n    // eslint-disable-next-line prefer-rest-params\n    if (Array.isArray(x) && arguments.length === 1) {\n      this.copy(x);\n    } else {\n      this.set(x as number, y, z, w);\n    }\n  }\n\n  copy(array: Readonly<NumericArray>): this {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    this[3] = array[3];\n    return this.check();\n  }\n\n  set(x: number, y: number, z: number, w: number): this {\n    this[0] = x;\n    this[1] = y;\n    this[2] = z;\n    this[3] = w;\n    return this.check();\n  }\n\n  fromObject(object: {x: number; y: number; z: number; w: number}): this {\n    this[0] = object.x;\n    this[1] = object.y;\n    this[2] = object.z;\n    this[3] = object.w;\n    return this.check();\n  }\n\n  /**\n   * Creates a quaternion from the given 3x3 rotation matrix.\n   * NOTE: The resultant quaternion is not normalized, so you should\n   * be sure to renormalize the quaternion yourself where necessary.\n   * @param m\n   * @returns\n   */\n  fromMatrix3(m: Readonly<NumericArray>): this {\n    quat.fromMat3(this, m);\n    return this.check();\n  }\n\n  fromAxisRotation(axis: Readonly<NumericArray>, rad: number): this {\n    quat.setAxisAngle(this, axis, rad);\n    return this.check();\n  }\n\n  /** Set a quat to the identity quaternion */\n  identity(): this {\n    quat.identity(this);\n    return this.check();\n  }\n\n  // Set the components of a quat to the given values\n  // set(i, j, k, l) {\n  //   quat.set(this, i, j, k, l);\n  //   return this.check();\n  // }\n\n  // Sets a quat from the given angle and rotation axis, then returns it.\n  setAxisAngle(axis: Readonly<NumericArray>, rad: number): this {\n    return this.fromAxisRotation(axis, rad);\n  }\n\n  // Getters/setters\n  get ELEMENTS(): number {\n    return 4;\n  }\n\n  get x(): number {\n    return this[0];\n  }\n  set x(value: number) {\n    this[0] = checkNumber(value);\n  }\n\n  get y(): number {\n    return this[1];\n  }\n  set y(value: number) {\n    this[1] = checkNumber(value);\n  }\n\n  get z(): number {\n    return this[2];\n  }\n  set z(value: number) {\n    this[2] = checkNumber(value);\n  }\n\n  get w(): number {\n    return this[3];\n  }\n  set w(value: number) {\n    this[3] = checkNumber(value);\n  }\n\n  // Calculates the length of a quat\n  len(): number {\n    return quat.length(this);\n  }\n\n  // Calculates the squared length of a quat\n  lengthSquared(): number {\n    return quat.squaredLength(this);\n  }\n\n  // Calculates the dot product of two quat's\n  // @return {Number}\n  dot(a: Readonly<NumericArray>): number {\n    return quat.dot(this, a);\n  }\n\n  // Gets the rotation axis and angle for a given quaternion.\n  // If a quaternion is created with setAxisAngle, this method will\n  // return the same values as providied in the original parameter\n  // list OR functionally equivalent values.\n  // Example: The quaternion formed by axis [0, 0, 1] and angle -90\n  // is the same as the quaternion formed by [0, 0, 1] and 270.\n  // This method favors the latter.\n  // @return {{[x,y,z], Number}}\n  // getAxisAngle() {\n  //   const axis = [];\n  //   const angle = quat.getAxisAngle(axis, this);\n  //   return {axis, angle};\n  // }\n  // MODIFIERS\n  // Sets a quaternion to represent the shortest rotation from one vector\n  // to another. Both vectors are assumed to be unit length.\n  rotationTo(vectorA: NumericArray, vectorB: NumericArray): this {\n    quat.rotationTo(this, vectorA, vectorB);\n    return this.check();\n  }\n\n  // Sets the specified quaternion with values corresponding to the given axes.\n  // Each axis is a vec3 and is expected to be unit length and perpendicular\n  // to all other specified axes.\n  // setAxes() {\n  //   Number\n  // }\n  // Performs a spherical linear interpolation with two control points\n  // sqlerp() {\n  //   Number;\n  // }\n  // Adds two quat's\n  add(a: Readonly<NumericArray>): this {\n    quat.add(this, this, a);\n    return this.check();\n  }\n\n  // Calculates the W component of a quat from the X, Y, and Z components.\n  // Any existing W component will be ignored.\n  calculateW(): this {\n    quat.calculateW(this, this);\n    return this.check();\n  }\n\n  // Calculates the conjugate of a quat If the quaternion is normalized,\n  // this function is faster than quat.inverse and produces the same result.\n  conjugate(): this {\n    quat.conjugate(this, this);\n    return this.check();\n  }\n\n  // Calculates the inverse of a quat\n  invert(): this {\n    quat.invert(this, this);\n    return this.check();\n  }\n\n  // Performs a linear interpolation between two quat's\n  lerp(a: Readonly<NumericArray>, b: Readonly<NumericArray> | number, t?: number): this {\n    if (t === undefined) {\n      return this.lerp(this, a, b as number);\n    }\n    quat.lerp(this, a, b as NumericArray, t);\n    return this.check();\n  }\n\n  // Multiplies two quat's\n  multiplyRight(a: Readonly<NumericArray>): this {\n    quat.multiply(this, this, a);\n    return this.check();\n  }\n\n  multiplyLeft(a: Readonly<NumericArray>): this {\n    quat.multiply(this, a, this);\n    return this.check();\n  }\n\n  // Normalize a quat\n  normalize(): this {\n    // Handle 0 case\n    const length = this.len();\n    const l = length > 0 ? 1 / length : 0;\n    this[0] = this[0] * l;\n    this[1] = this[1] * l;\n    this[2] = this[2] * l;\n    this[3] = this[3] * l;\n    // Set to [0, 0, 0, 1] if length is 0\n    if (length === 0) {\n      this[3] = 1;\n    }\n    return this.check();\n  }\n\n  // Rotates a quaternion by the given angle about the X axis\n  rotateX(rad: number): this {\n    quat.rotateX(this, this, rad);\n    return this.check();\n  }\n\n  // Rotates a quaternion by the given angle about the Y axis\n  rotateY(rad: number): this {\n    quat.rotateY(this, this, rad);\n    return this.check();\n  }\n\n  // Rotates a quaternion by the given angle about the Z axis\n  rotateZ(rad: number): this {\n    quat.rotateZ(this, this, rad);\n    return this.check();\n  }\n\n  // Scales a quat by a scalar number\n  scale(b: number): this {\n    quat.scale(this, this, b);\n    return this.check();\n  }\n\n  slerp(target: Readonly<NumericArray>, ratio: number): this;\n  slerp(start: Readonly<NumericArray>, target: Readonly<NumericArray>, ratio: number): this;\n  slerp(params: {\n    start: Readonly<NumericArray>;\n    target: Readonly<NumericArray>;\n    ratio: number;\n  }): this;\n\n  // Performs a spherical linear interpolation between two quat\n  slerp(\n    arg0:\n      | Readonly<NumericArray>\n      | {\n          start: Readonly<NumericArray>;\n          target: Readonly<NumericArray>;\n          ratio: number;\n        },\n    arg1?: Readonly<NumericArray> | number,\n    arg2?: number\n  ): this {\n    let start: Readonly<NumericArray>;\n    let target: Readonly<NumericArray>;\n    let ratio: number;\n    // eslint-disable-next-line prefer-rest-params\n    switch (arguments.length) {\n      case 1: // Deprecated signature ({start, target, ratio})\n        // eslint-disable-next-line prefer-rest-params\n        ({\n          start = IDENTITY_QUATERNION,\n          target,\n          ratio\n        } = arg0 as {\n          start: Readonly<NumericArray>;\n          target: Readonly<NumericArray>;\n          ratio: number;\n        });\n        break;\n      case 2: // THREE.js compatibility signature (target, ration)\n        start = this; // eslint-disable-line\n        target = arg0 as Readonly<NumericArray>;\n        ratio = arg1 as number;\n        break;\n      default:\n        // Default signature: (start, target, ratio)\n        start = arg0 as Readonly<NumericArray>;\n        target = arg1 as Readonly<NumericArray>;\n        ratio = arg2;\n    }\n    quat.slerp(this, start, target, ratio);\n    return this.check();\n  }\n\n  transformVector4(\n    vector: Readonly<NumericArray>,\n    result: NumericArray = new Vector4()\n  ): NumericArray {\n    vec4.transformQuat(result, vector, this);\n    return checkVector(result, 4);\n  }\n\n  // THREE.js Math API compatibility\n  lengthSq(): number {\n    return this.lengthSquared();\n  }\n\n  setFromAxisAngle(axis: Readonly<NumericArray>, rad: number): this {\n    return this.setAxisAngle(axis, rad);\n  }\n\n  premultiply(a: Readonly<NumericArray>): this {\n    return this.multiplyLeft(a);\n  }\n\n  multiply(a: Readonly<NumericArray>): this {\n    return this.multiplyRight(a);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}