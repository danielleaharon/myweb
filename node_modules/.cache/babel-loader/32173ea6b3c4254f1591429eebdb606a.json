{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport Controller from './controller';\nimport ViewState from './view-state';\nimport { mod } from '../utils/math-utils';\nimport LinearInterpolator from '../transitions/linear-interpolator';\nimport { Vector3, _SphericalCoordinates as SphericalCoordinates, clamp } from '@math.gl/core';\nconst MOVEMENT_SPEED = 20;\n\nclass FirstPersonState extends ViewState {\n  constructor(options) {\n    const {\n      width,\n      height,\n      position = [0, 0, 0],\n      bearing = 0,\n      pitch = 0,\n      longitude = null,\n      latitude = null,\n      maxPitch = 90,\n      minPitch = -90,\n      startRotatePos,\n      startBearing,\n      startPitch,\n      startZoomPosition\n    } = options;\n    super({\n      width,\n      height,\n      position,\n      bearing,\n      pitch,\n      longitude,\n      latitude,\n      maxPitch,\n      minPitch\n    }, {\n      startRotatePos,\n      startBearing,\n      startPitch,\n      startZoomPosition\n    });\n  }\n\n  panStart() {\n    return this;\n  }\n\n  pan() {\n    return this;\n  }\n\n  panEnd() {\n    return this;\n  }\n\n  rotateStart({\n    pos\n  }) {\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startBearing: this.getViewportProps().bearing,\n      startPitch: this.getViewportProps().pitch\n    });\n  }\n\n  rotate({\n    pos,\n    deltaAngleX = 0,\n    deltaAngleY = 0\n  }) {\n    const {\n      startRotatePos,\n      startBearing,\n      startPitch\n    } = this.getState();\n    const {\n      width,\n      height\n    } = this.getViewportProps();\n\n    if (!startRotatePos || startBearing === undefined || startPitch === undefined) {\n      return this;\n    }\n\n    let newRotation;\n\n    if (pos) {\n      const deltaScaleX = (pos[0] - startRotatePos[0]) / width;\n      const deltaScaleY = (pos[1] - startRotatePos[1]) / height;\n      newRotation = {\n        bearing: startBearing - deltaScaleX * 180,\n        pitch: startPitch - deltaScaleY * 90\n      };\n    } else {\n      newRotation = {\n        bearing: startBearing - deltaAngleX,\n        pitch: startPitch - deltaAngleY\n      };\n    }\n\n    return this._getUpdatedState(newRotation);\n  }\n\n  rotateEnd() {\n    return this._getUpdatedState({\n      startRotatePos: null,\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  zoomStart() {\n    return this._getUpdatedState({\n      startZoomPosition: this.getViewportProps().position\n    });\n  }\n\n  zoom({\n    scale\n  }) {\n    let {\n      startZoomPosition\n    } = this.getState();\n\n    if (!startZoomPosition) {\n      startZoomPosition = this.getViewportProps().position;\n    }\n\n    const direction = this.getDirection();\n    return this._move(direction, Math.log2(scale) * MOVEMENT_SPEED, startZoomPosition);\n  }\n\n  zoomEnd() {\n    return this._getUpdatedState({\n      startZoomPosition: null\n    });\n  }\n\n  moveLeft(speed = MOVEMENT_SPEED) {\n    const direction = this.getDirection(true);\n    return this._move(direction.rotateZ({\n      radians: Math.PI / 2\n    }), speed);\n  }\n\n  moveRight(speed = MOVEMENT_SPEED) {\n    const direction = this.getDirection(true);\n    return this._move(direction.rotateZ({\n      radians: -Math.PI / 2\n    }), speed);\n  }\n\n  moveUp(speed = MOVEMENT_SPEED) {\n    const direction = this.getDirection(true);\n    return this._move(direction, speed);\n  }\n\n  moveDown(speed = MOVEMENT_SPEED) {\n    const direction = this.getDirection(true);\n    return this._move(direction.negate(), speed);\n  }\n\n  rotateLeft(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this.getViewportProps().bearing - speed\n    });\n  }\n\n  rotateRight(speed = 15) {\n    return this._getUpdatedState({\n      bearing: this.getViewportProps().bearing + speed\n    });\n  }\n\n  rotateUp(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this.getViewportProps().pitch + speed\n    });\n  }\n\n  rotateDown(speed = 10) {\n    return this._getUpdatedState({\n      pitch: this.getViewportProps().pitch - speed\n    });\n  }\n\n  zoomIn(speed = 2) {\n    return this.zoom({\n      scale: speed\n    });\n  }\n\n  zoomOut(speed = 2) {\n    return this.zoom({\n      scale: 1 / speed\n    });\n  }\n\n  shortestPathFrom(viewState) {\n    const fromProps = viewState.getViewportProps();\n    const props = { ...this.getViewportProps()\n    };\n    const {\n      bearing,\n      longitude\n    } = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n\n    if (longitude !== null && fromProps.longitude !== null && Math.abs(longitude - fromProps.longitude) > 180) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n\n    return props;\n  }\n\n  _move(direction, speed, fromPosition = this.getViewportProps().position) {\n    const delta = direction.scale(speed);\n    return this._getUpdatedState({\n      position: new Vector3(fromPosition).add(delta)\n    });\n  }\n\n  getDirection(use2D = false) {\n    const spherical = new SphericalCoordinates({\n      bearing: this.getViewportProps().bearing,\n      pitch: use2D ? 90 : 90 + this.getViewportProps().pitch\n    });\n    const direction = spherical.toVector3().normalize();\n    return direction;\n  }\n\n  _getUpdatedState(newProps) {\n    return new FirstPersonState({ ...this.getViewportProps(),\n      ...this.getState(),\n      ...newProps\n    });\n  }\n\n  applyConstraints(props) {\n    const {\n      pitch,\n      maxPitch,\n      minPitch,\n      longitude,\n      bearing\n    } = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    if (longitude !== null && (longitude < -180 || longitude > 180)) {\n      props.longitude = mod(longitude + 180, 360) - 180;\n    }\n\n    if (bearing < -180 || bearing > 180) {\n      props.bearing = mod(bearing + 180, 360) - 180;\n    }\n\n    return props;\n  }\n\n}\n\nexport default class FirstPersonController extends Controller {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"ControllerState\", FirstPersonState);\n\n    _defineProperty(this, \"transition\", {\n      transitionDuration: 300,\n      transitionInterpolator: new LinearInterpolator(['position', 'pitch', 'bearing'])\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../src/controllers/first-person-controller.ts"],"names":["_SphericalCoordinates","MOVEMENT_SPEED","constructor","position","bearing","pitch","longitude","latitude","maxPitch","minPitch","startZoomPosition","panStart","pan","panEnd","rotateStart","pos","startRotatePos","startBearing","startPitch","rotate","deltaAngleX","deltaAngleY","height","deltaScaleX","deltaScaleY","newRotation","rotateEnd","zoomStart","zoom","scale","direction","Math","zoomEnd","moveLeft","speed","radians","moveRight","moveUp","moveDown","rotateLeft","rotateRight","rotateUp","rotateDown","zoomIn","zoomOut","shortestPathFrom","fromProps","viewState","props","_move","fromPosition","delta","getDirection","use2D","spherical","_getUpdatedState","newProps","applyConstraints","clamp","mod","transitionDuration","transitionInterpolator"],"mappings":"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","sourcesContent":["import Controller from './controller';\nimport ViewState from './view-state';\nimport {mod} from '../utils/math-utils';\nimport LinearInterpolator from '../transitions/linear-interpolator';\n\nimport {Vector3, _SphericalCoordinates as SphericalCoordinates, clamp} from '@math.gl/core';\n\nconst MOVEMENT_SPEED = 20;\n\ntype FirstPersonStateProps = {\n  width: number;\n  height: number;\n\n  position?: number[];\n  bearing?: number;\n  pitch?: number;\n\n  // Geospatial anchor\n  longitude?: number | null;\n  latitude?: number | null;\n\n  maxPitch?: number;\n  minPitch?: number;\n};\n\ntype FirstPersonStateInternal = {\n  startRotatePos?: [number, number];\n  startBearing?: number;\n  startPitch?: number;\n  startZoomPosition?: number[];\n};\n\nclass FirstPersonState extends ViewState<\n  FirstPersonState,\n  FirstPersonStateProps,\n  FirstPersonStateInternal\n> {\n  constructor(options: FirstPersonStateProps & FirstPersonStateInternal) {\n    const {\n      /* Viewport arguments */\n      width, // Width of viewport\n      height, // Height of viewport\n\n      // Position and orientation\n      position = [0, 0, 0], // typically in meters from anchor point\n\n      bearing = 0, // Rotation around y axis\n      pitch = 0, // Rotation around x axis\n\n      // Geospatial anchor\n      longitude = null,\n      latitude = null,\n\n      maxPitch = 90,\n      minPitch = -90,\n\n      // Model state when the rotate operation first started\n      startRotatePos,\n      startBearing,\n      startPitch,\n      startZoomPosition\n    } = options;\n\n    super(\n      {\n        width,\n        height,\n        position,\n        bearing,\n        pitch,\n        longitude,\n        latitude,\n        maxPitch,\n        minPitch\n      },\n      {\n        startRotatePos,\n        startBearing,\n        startPitch,\n        startZoomPosition\n      }\n    );\n  }\n\n  /* Public API */\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart(): FirstPersonState {\n    return this;\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  pan(): FirstPersonState {\n    return this;\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd(): FirstPersonState {\n    return this;\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  rotateStart({pos}: {pos: [number, number]}): FirstPersonState {\n    return this._getUpdatedState({\n      startRotatePos: pos,\n      startBearing: this.getViewportProps().bearing,\n      startPitch: this.getViewportProps().pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   */\n  rotate({\n    pos,\n    deltaAngleX = 0,\n    deltaAngleY = 0\n  }: {\n    pos?: [number, number];\n    deltaAngleX?: number;\n    deltaAngleY: number;\n  }): FirstPersonState {\n    const {startRotatePos, startBearing, startPitch} = this.getState();\n    const {width, height} = this.getViewportProps();\n\n    if (!startRotatePos || startBearing === undefined || startPitch === undefined) {\n      return this;\n    }\n\n    let newRotation;\n    if (pos) {\n      const deltaScaleX = (pos[0] - startRotatePos[0]) / width;\n      const deltaScaleY = (pos[1] - startRotatePos[1]) / height;\n      newRotation = {\n        bearing: startBearing - deltaScaleX * 180,\n        pitch: startPitch - deltaScaleY * 90\n      };\n    } else {\n      newRotation = {\n        bearing: startBearing - deltaAngleX,\n        pitch: startPitch - deltaAngleY\n      };\n    }\n\n    return this._getUpdatedState(newRotation);\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd(): FirstPersonState {\n    return this._getUpdatedState({\n      startRotatePos: null,\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  zoomStart(): FirstPersonState {\n    return this._getUpdatedState({\n      startZoomPosition: this.getViewportProps().position\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({scale}: {scale: number}): FirstPersonState {\n    let {startZoomPosition} = this.getState();\n    if (!startZoomPosition) {\n      startZoomPosition = this.getViewportProps().position;\n    }\n\n    const direction = this.getDirection();\n    return this._move(direction, Math.log2(scale) * MOVEMENT_SPEED, startZoomPosition);\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd(): FirstPersonState {\n    return this._getUpdatedState({\n      startZoomPosition: null\n    });\n  }\n\n  moveLeft(speed: number = MOVEMENT_SPEED): FirstPersonState {\n    const direction = this.getDirection(true);\n    return this._move(direction.rotateZ({radians: Math.PI / 2}), speed);\n  }\n\n  moveRight(speed: number = MOVEMENT_SPEED): FirstPersonState {\n    const direction = this.getDirection(true);\n    return this._move(direction.rotateZ({radians: -Math.PI / 2}), speed);\n  }\n\n  // forward\n  moveUp(speed: number = MOVEMENT_SPEED): FirstPersonState {\n    const direction = this.getDirection(true);\n    return this._move(direction, speed);\n  }\n\n  // backward\n  moveDown(speed: number = MOVEMENT_SPEED): FirstPersonState {\n    const direction = this.getDirection(true);\n    return this._move(direction.negate(), speed);\n  }\n\n  rotateLeft(speed: number = 15): FirstPersonState {\n    return this._getUpdatedState({\n      bearing: this.getViewportProps().bearing - speed\n    });\n  }\n\n  rotateRight(speed: number = 15): FirstPersonState {\n    return this._getUpdatedState({\n      bearing: this.getViewportProps().bearing + speed\n    });\n  }\n\n  rotateUp(speed: number = 10): FirstPersonState {\n    return this._getUpdatedState({\n      pitch: this.getViewportProps().pitch + speed\n    });\n  }\n\n  rotateDown(speed: number = 10): FirstPersonState {\n    return this._getUpdatedState({\n      pitch: this.getViewportProps().pitch - speed\n    });\n  }\n\n  zoomIn(speed: number = 2): FirstPersonState {\n    return this.zoom({scale: speed});\n  }\n\n  zoomOut(speed: number = 2): FirstPersonState {\n    return this.zoom({scale: 1 / speed});\n  }\n\n  // shortest path between two view states\n  shortestPathFrom(viewState: FirstPersonState) {\n    const fromProps = viewState.getViewportProps();\n    const props = {...this.getViewportProps()};\n    const {bearing, longitude} = props;\n\n    if (Math.abs(bearing - fromProps.bearing) > 180) {\n      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;\n    }\n    if (\n      longitude !== null &&\n      fromProps.longitude !== null &&\n      Math.abs(longitude - fromProps.longitude) > 180\n    ) {\n      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;\n    }\n    return props;\n  }\n\n  /* Private methods */\n  _move(\n    direction: Vector3,\n    speed: number,\n    fromPosition: number[] = this.getViewportProps().position\n  ) {\n    const delta = direction.scale(speed);\n    return this._getUpdatedState({\n      position: new Vector3(fromPosition).add(delta)\n    });\n  }\n\n  getDirection(use2D: boolean = false): Vector3 {\n    const spherical = new SphericalCoordinates({\n      bearing: this.getViewportProps().bearing,\n      pitch: use2D ? 90 : 90 + this.getViewportProps().pitch\n    });\n    const direction = spherical.toVector3().normalize();\n    return direction;\n  }\n\n  _getUpdatedState(newProps: Record<string, any>): FirstPersonState {\n    // Update _viewportProps\n    return new FirstPersonState({...this.getViewportProps(), ...this.getState(), ...newProps});\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  applyConstraints(props: Required<FirstPersonStateProps>): Required<FirstPersonStateProps> {\n    // Ensure pitch and zoom are within specified range\n    const {pitch, maxPitch, minPitch, longitude, bearing} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    // Normalize degrees\n    if (longitude !== null && (longitude < -180 || longitude > 180)) {\n      props.longitude = mod(longitude + 180, 360) - 180;\n    }\n    if (bearing < -180 || bearing > 180) {\n      props.bearing = mod(bearing + 180, 360) - 180;\n    }\n\n    return props;\n  }\n}\n\nexport default class FirstPersonController extends Controller<FirstPersonState> {\n  ControllerState = FirstPersonState;\n\n  transition = {\n    transitionDuration: 300,\n    transitionInterpolator: new LinearInterpolator(['position', 'pitch', 'bearing'])\n  };\n}\n"]},"metadata":{},"sourceType":"module"}