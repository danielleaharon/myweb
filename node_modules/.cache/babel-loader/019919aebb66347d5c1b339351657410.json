{"ast":null,"code":"import { isBrowser } from '@loaders.gl/worker-utils';\nimport { WorkerFarm, getWorkerURL } from '@loaders.gl/worker-utils';\nexport function canParseWithWorker(loader, options) {\n  if (!WorkerFarm.isSupported()) {\n    return false;\n  }\n\n  if (!isBrowser && !(options !== null && options !== void 0 && options._nodeWorkers)) {\n    return false;\n  }\n\n  return loader.worker && (options === null || options === void 0 ? void 0 : options.worker);\n}\nexport async function parseWithWorker(loader, data, options, context, parseOnMainThread) {\n  const name = loader.id;\n  const url = getWorkerURL(loader, options);\n  const workerFarm = WorkerFarm.getWorkerFarm(options);\n  const workerPool = workerFarm.getWorkerPool({\n    name,\n    url\n  });\n  options = JSON.parse(JSON.stringify(options));\n  context = JSON.parse(JSON.stringify(context || {}));\n  const job = await workerPool.startJob('process-on-worker', onMessage.bind(null, parseOnMainThread));\n  job.postMessage('process', {\n    input: data,\n    options,\n    context\n  });\n  const result = await job.result;\n  return await result.result;\n}\n\nasync function onMessage(parseOnMainThread, job, type, payload) {\n  switch (type) {\n    case 'done':\n      job.done(payload);\n      break;\n\n    case 'error':\n      job.error(new Error(payload.error));\n      break;\n\n    case 'process':\n      const {\n        id,\n        input,\n        options\n      } = payload;\n\n      try {\n        const result = await parseOnMainThread(input, options);\n        job.postMessage('done', {\n          id,\n          result\n        });\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'unknown error';\n        job.postMessage('error', {\n          id,\n          error: message\n        });\n      }\n\n      break;\n\n    default:\n      console.warn(\"parse-with-worker unknown message \".concat(type));\n  }\n}","map":{"version":3,"sources":["../../../../src/lib/worker-loader-utils/parse-with-worker.ts"],"names":["WorkerFarm","options","loader","name","url","getWorkerURL","workerFarm","workerPool","JSON","context","job","onMessage","input","result","payload","parseOnMainThread","message","error","console"],"mappings":"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","sourcesContent":["import {\n  WorkerJob,\n  WorkerMessageType,\n  WorkerMessagePayload,\n  isBrowser\n} from '@loaders.gl/worker-utils';\nimport type {Loader, LoaderOptions, LoaderContext} from '../../types';\nimport {WorkerFarm, getWorkerURL} from '@loaders.gl/worker-utils';\n\n/**\n * Determines if a loader can parse with worker\n * @param loader\n * @param options\n */\nexport function canParseWithWorker(loader: Loader, options?: LoaderOptions) {\n  if (!WorkerFarm.isSupported()) {\n    return false;\n  }\n\n  // Node workers are still experimental\n  if (!isBrowser && !options?._nodeWorkers) {\n    return false;\n  }\n\n  return loader.worker && options?.worker;\n}\n\n/**\n * this function expects that the worker function sends certain messages,\n * this can be automated if the worker is wrapper by a call to createLoaderWorker in @loaders.gl/loader-utils.\n */\nexport async function parseWithWorker(\n  loader: Loader,\n  data: any,\n  options?: LoaderOptions,\n  context?: LoaderContext,\n  parseOnMainThread?: (arrayBuffer: ArrayBuffer, options: {[key: string]: any}) => Promise<void>\n) {\n  const name = loader.id; // TODO\n  const url = getWorkerURL(loader, options);\n\n  const workerFarm = WorkerFarm.getWorkerFarm(options);\n  const workerPool = workerFarm.getWorkerPool({name, url});\n\n  // options.log object contains functions which cannot be transferred\n  // context.fetch & context.parse functions cannot be transferred\n  // TODO - decide how to handle logging on workers\n  options = JSON.parse(JSON.stringify(options));\n  context = JSON.parse(JSON.stringify(context || {}));\n\n  const job = await workerPool.startJob(\n    'process-on-worker',\n    // @ts-expect-error\n    onMessage.bind(null, parseOnMainThread) // eslint-disable-line @typescript-eslint/no-misused-promises\n  );\n\n  job.postMessage('process', {\n    // @ts-ignore\n    input: data,\n    options,\n    context\n  });\n\n  const result = await job.result;\n  // TODO - what is going on here?\n  return await result.result;\n}\n\n/**\n * Handle worker's responses to the main thread\n * @param job\n * @param type\n * @param payload\n */\nasync function onMessage(\n  parseOnMainThread: (arrayBuffer: ArrayBuffer, options?: {[key: string]: any}) => Promise<void>,\n  job: WorkerJob,\n  type: WorkerMessageType,\n  payload: WorkerMessagePayload\n) {\n  switch (type) {\n    case 'done':\n      job.done(payload);\n      break;\n\n    case 'error':\n      job.error(new Error(payload.error));\n      break;\n\n    case 'process':\n      // Worker is asking for main thread to parseO\n      const {id, input, options} = payload;\n      try {\n        const result = await parseOnMainThread(input, options);\n        job.postMessage('done', {id, result});\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'unknown error';\n        job.postMessage('error', {id, error: message});\n      }\n      break;\n\n    default:\n      // eslint-disable-next-line\n      console.warn(`parse-with-worker unknown message ${type}`);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}