{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { load } from '@loaders.gl/core';\nexport default class Resource {\n  constructor(id, data, context) {\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"context\", void 0);\n\n    _defineProperty(this, \"isLoaded\", void 0);\n\n    _defineProperty(this, \"persistent\", void 0);\n\n    _defineProperty(this, \"_loadCount\", 0);\n\n    _defineProperty(this, \"_subscribers\", new Set());\n\n    _defineProperty(this, \"_data\", void 0);\n\n    _defineProperty(this, \"_loader\", void 0);\n\n    _defineProperty(this, \"_error\", void 0);\n\n    _defineProperty(this, \"_content\", void 0);\n\n    this.id = id;\n    this.context = context;\n    this.setData(data);\n  }\n\n  subscribe(consumer) {\n    this._subscribers.add(consumer);\n  }\n\n  unsubscribe(consumer) {\n    this._subscribers.delete(consumer);\n  }\n\n  inUse() {\n    return this._subscribers.size > 0;\n  }\n\n  delete() {}\n\n  getData() {\n    return this.isLoaded ? this._error ? Promise.reject(this._error) : this._content : this._loader.then(() => this.getData());\n  }\n\n  setData(data, forceUpdate) {\n    if (data === this._data && !forceUpdate) {\n      return;\n    }\n\n    this._data = data;\n    const loadCount = ++this._loadCount;\n    let loader = data;\n\n    if (typeof data === 'string') {\n      loader = load(data);\n    }\n\n    if (loader instanceof Promise) {\n      this.isLoaded = false;\n      this._loader = loader.then(result => {\n        if (this._loadCount === loadCount) {\n          this.isLoaded = true;\n          this._error = undefined;\n          this._content = result;\n        }\n      }).catch(error => {\n        if (this._loadCount === loadCount) {\n          this.isLoaded = true;\n          this._error = error || true;\n        }\n      });\n    } else {\n      this.isLoaded = true;\n      this._error = undefined;\n      this._content = data;\n    }\n\n    for (const subscriber of this._subscribers) {\n      subscriber.onChange(this.getData());\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../../src/lib/resource/resource.ts"],"names":["constructor","subscribe","unsubscribe","inUse","delete","getData","Promise","setData","data","loadCount","loader","load","result","error","subscriber"],"mappings":"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","sourcesContent":["import {load} from '@loaders.gl/core';\n\nimport type {ResourceManagerContext} from './resource-manager';\n\nexport type ResourceSubscriber<T = any> = {\n  onChange: (data: T | Promise<T>) => void;\n};\n\nexport default class Resource<T = any> {\n  id: string;\n  context: ResourceManagerContext;\n  isLoaded!: boolean;\n  persistent?: boolean;\n\n  private _loadCount: number = 0;\n  private _subscribers = new Set<ResourceSubscriber<T>>();\n  private _data!: T | Promise<T> | string;\n  private _loader?: Promise<void>;\n  private _error?: Error;\n  private _content?: T;\n\n  constructor(id: string, data: T | Promise<T> | string, context: ResourceManagerContext) {\n    this.id = id;\n    this.context = context;\n\n    this.setData(data);\n  }\n\n  // consumer: {onChange: Function}\n  subscribe(consumer: ResourceSubscriber<T>): void {\n    this._subscribers.add(consumer);\n  }\n\n  unsubscribe(consumer: ResourceSubscriber<T>): void {\n    this._subscribers.delete(consumer);\n  }\n\n  inUse(): boolean {\n    return this._subscribers.size > 0;\n  }\n\n  delete(): void {\n    // Remove any resources created\n  }\n\n  getData(): T | Promise<T> {\n    return this.isLoaded\n      ? this._error\n        ? Promise.reject(this._error)\n        : this._content!\n      : this._loader!.then(() => this.getData());\n  }\n\n  setData(data: any, forceUpdate?: boolean) {\n    if (data === this._data && !forceUpdate) {\n      return;\n    }\n    this._data = data;\n    const loadCount = ++this._loadCount;\n\n    let loader = data;\n    if (typeof data === 'string') {\n      loader = load(data);\n    }\n    if (loader instanceof Promise) {\n      this.isLoaded = false;\n      this._loader = loader\n        .then(result => {\n          // check if source has changed\n          if (this._loadCount === loadCount) {\n            this.isLoaded = true;\n            this._error = undefined;\n            this._content = result;\n          }\n        })\n        .catch(error => {\n          if (this._loadCount === loadCount) {\n            this.isLoaded = true;\n            this._error = error || true;\n          }\n        });\n    } else {\n      this.isLoaded = true;\n      this._error = undefined;\n      this._content = data;\n    }\n\n    for (const subscriber of this._subscribers) {\n      subscriber.onChange(this.getData());\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}