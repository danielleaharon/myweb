{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { clamp } from '@math.gl/core';\nimport Controller from './controller';\nimport { MapState } from './map-controller';\nimport { mod } from '../utils/math-utils';\nimport LinearInterpolator from '../transitions/linear-interpolator';\n\nclass GlobeState extends MapState {\n  applyConstraints(props) {\n    const {\n      maxZoom,\n      minZoom,\n      zoom\n    } = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n    const {\n      longitude,\n      latitude\n    } = props;\n\n    if (longitude < -180 || longitude > 180) {\n      props.longitude = mod(longitude + 180, 360) - 180;\n    }\n\n    props.latitude = clamp(latitude, -89, 89);\n    return props;\n  }\n\n}\n\nexport default class GlobeController extends Controller {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"ControllerState\", GlobeState);\n\n    _defineProperty(this, \"transition\", {\n      transitionDuration: 300,\n      transitionInterpolator: new LinearInterpolator(['longitude', 'latitude', 'zoom'])\n    });\n\n    _defineProperty(this, \"dragMode\", 'pan');\n  }\n\n  setProps(props) {\n    super.setProps(props);\n    this.dragRotate = false;\n    this.touchRotate = false;\n  }\n\n}","map":{"version":3,"sources":["../../../src/controllers/globe-controller.ts"],"names":["applyConstraints","zoom","props","clamp","latitude","longitude","mod","transitionDuration","transitionInterpolator","setProps"],"mappings":";AAAA,SAAA,KAAA,QAAA,eAAA;AACA,OAAA,UAAA,MAAA,cAAA;AAEA,SAAA,QAAA,QAAA,kBAAA;AACA,SAAA,GAAA,QAAA,qBAAA;AACA,OAAA,kBAAA,MAAA,oCAAA;;AAEA,MAAA,UAAA,SAAA,QAAA,CAAkC;AAEhCA,EAAAA,gBAAgB,CAAA,KAAA,EAA0D;AAExE,UAAM;AAAA,MAAA,OAAA;AAAA,MAAA,OAAA;AAAmBC,MAAAA;AAAnB,QAAN,KAAA;AACAC,IAAAA,KAAK,CAALA,IAAAA,GAAaC,KAAK,CAAA,IAAA,EAAA,OAAA,EAAlBD,OAAkB,CAAlBA;AAEA,UAAM;AAAA,MAAA,SAAA;AAAYE,MAAAA;AAAZ,QAAN,KAAA;;AACA,QAAIC,SAAS,GAAG,CAAZA,GAAAA,IAAoBA,SAAS,GAAjC,GAAA,EAAyC;AACvCH,MAAAA,KAAK,CAALA,SAAAA,GAAkBI,GAAG,CAACD,SAAS,GAAV,GAAA,EAAHC,GAAG,CAAHA,GAAlBJ,GAAAA;AACD;;AACDA,IAAAA,KAAK,CAALA,QAAAA,GAAiBC,KAAK,CAAA,QAAA,EAAW,CAAX,EAAA,EAAtBD,EAAsB,CAAtBA;AAEA,WAAA,KAAA;AACD;;AAd+B;;AAiBlC,eAAe,MAAA,eAAA,SAAA,UAAA,CAAmD;AAAA,EAAA,WAAA,CAAA,GAAA,IAAA,EAAA;AAAA,UAAA,GAAA,IAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,iBAAA,EAAA,UAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,EAGnD;AACXK,MAAAA,kBAAkB,EADP,GAAA;AAEXC,MAAAA,sBAAsB,EAAE,IAAA,kBAAA,CAAuB,CAAA,WAAA,EAAA,UAAA,EAAvB,MAAuB,CAAvB;AAFb,KAHmD,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EAAA,KAAA,CAAA;AAAA;;AAUhEC,EAAAA,QAAQ,CAAA,KAAA,EAAyB;AAC/B,UAAA,QAAA,CAAA,KAAA;AAGA,SAAA,UAAA,GAAA,KAAA;AACA,SAAA,WAAA,GAAA,KAAA;AACD;;AAhB+D","sourcesContent":["import {clamp} from '@math.gl/core';\nimport Controller, {ControllerProps} from './controller';\n\nimport {MapState, MapStateProps} from './map-controller';\nimport {mod} from '../utils/math-utils';\nimport LinearInterpolator from '../transitions/linear-interpolator';\n\nclass GlobeState extends MapState {\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  applyConstraints(props: Required<MapStateProps>): Required<MapStateProps> {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    const {longitude, latitude} = props;\n    if (longitude < -180 || longitude > 180) {\n      props.longitude = mod(longitude + 180, 360) - 180;\n    }\n    props.latitude = clamp(latitude, -89, 89);\n\n    return props;\n  }\n}\n\nexport default class GlobeController extends Controller<MapState> {\n  ControllerState = GlobeState;\n\n  transition = {\n    transitionDuration: 300,\n    transitionInterpolator: new LinearInterpolator(['longitude', 'latitude', 'zoom'])\n  };\n\n  dragMode: 'pan' | 'rotate' = 'pan';\n\n  setProps(props: ControllerProps) {\n    super.setProps(props);\n\n    // TODO - support pitching?\n    this.dragRotate = false;\n    this.touchRotate = false;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}