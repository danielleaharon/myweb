{"ast":null,"code":"export const ADD_NEW_PLAYER = 'ADD_NEW_PLAYER';\nexport const MOVE_PLAYER = 'MOVE_PLAYER';\nexport const CHANGE_PLAYER = 'CHANGE_PLAYER';\nexport const CHANGE_PLAYER_POSITION_IN_BOX = 'CHANGE_PLAYER_POSITION_IN_BOX';\nexport const RECORD_DICE_LOG = 'RECORD_DICE_LOG';\nexport const LOG_MESSAGE = 'LOG_MESSAGE';\nexport const SET_PLAYER_PERSISTENCE = 'SET_PLAYER_PERSISTENCE';\nexport const ENABLE_DICE = 'ENABLE_DICE';\nexport const END_GAME = 'END_GAME';\nexport const ADD_SNAKE_BITE = 'ADD_SNAKE_BITE';\nexport const ADD_LADDER_HIKE = 'ADD_LADDER_HIKE';\nexport const SHAKE_PLAYERS = 'SHAKE_PLAYERS';\nexport const RESTART_GAME = 'RESTART_GAME';\nexport const REDRAW = 'REDRAW';\nexport function addNewPlayer() {\n  return {\n    type: ADD_NEW_PLAYER\n  };\n}\nexport function getRollDiceResult() {\n  const max = 6,\n        min = 1;\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\nexport function movePlayer(newPos) {\n  return {\n    type: MOVE_PLAYER,\n    newPos\n  };\n}\nexport function changePlayer() {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch({\n        type: CHANGE_PLAYER\n      });\n    }, 1000);\n  };\n}\nexport function changePlayerPositionInBox(playerId, newBoxPosition) {\n  return {\n    type: CHANGE_PLAYER_POSITION_IN_BOX,\n    playerId,\n    newBoxPosition\n  };\n}\nexport function recordDiceLog(diceResult) {\n  return {\n    type: RECORD_DICE_LOG,\n    diceResult\n  };\n}\nexport function logMessage(message) {\n  return {\n    type: LOG_MESSAGE,\n    message\n  };\n}\nexport function setPlayerPersistence(persistence) {\n  return {\n    type: SET_PLAYER_PERSISTENCE,\n    persistence\n  };\n}\nexport function enableDice() {\n  return {\n    type: ENABLE_DICE\n  };\n}\nexport function endGame() {\n  return {\n    type: END_GAME\n  };\n}\nexport function addSnakeBite() {\n  return {\n    type: ADD_SNAKE_BITE\n  };\n}\nexport function addLadderHike() {\n  return {\n    type: ADD_LADDER_HIKE\n  };\n}\nexport function restartGame() {\n  return {\n    type: RESTART_GAME\n  };\n}\nexport function redraw(width, height) {\n  return {\n    type: REDRAW,\n    width,\n    height\n  };\n}","map":{"version":3,"sources":["/Users/user/Desktop/עבודות להגשה/myweb/src/components/snakes/actions/GameActions.js"],"names":["ADD_NEW_PLAYER","MOVE_PLAYER","CHANGE_PLAYER","CHANGE_PLAYER_POSITION_IN_BOX","RECORD_DICE_LOG","LOG_MESSAGE","SET_PLAYER_PERSISTENCE","ENABLE_DICE","END_GAME","ADD_SNAKE_BITE","ADD_LADDER_HIKE","SHAKE_PLAYERS","RESTART_GAME","REDRAW","addNewPlayer","type","getRollDiceResult","max","min","Math","floor","random","movePlayer","newPos","changePlayer","dispatch","setTimeout","changePlayerPositionInBox","playerId","newBoxPosition","recordDiceLog","diceResult","logMessage","message","setPlayerPersistence","persistence","enableDice","endGame","addSnakeBite","addLadderHike","restartGame","redraw","width","height"],"mappings":"AAAA,OAAO,MAAMA,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,6BAA6B,GAAG,+BAAtC;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,sBAAsB,GAAG,wBAA/B;AACP,OAAO,MAAMC,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,QAAQ,GAAG,UAAjB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,YAAY,GAAG,cAArB;AACP,OAAO,MAAMC,MAAM,GAAE,QAAd;AAEP,OAAO,SAASC,YAAT,GAAyB;AAC9B,SAAO;AACLC,IAAAA,IAAI,EAAEf;AADD,GAAP;AAGD;AAED,OAAO,SAASgB,iBAAT,GAA8B;AACnC,QAAMC,GAAG,GAAG,CAAZ;AAAA,QAAeC,GAAG,GAAG,CAArB;AACA,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBJ,GAAG,GAAGC,GAAN,GAAY,CAA7B,CAAX,IAA8CA,GAArD;AACD;AAED,OAAO,SAASI,UAAT,CAAqBC,MAArB,EAA6B;AAClC,SAAO;AACLR,IAAAA,IAAI,EAAEd,WADD;AAELsB,IAAAA;AAFK,GAAP;AAID;AAED,OAAO,SAASC,YAAT,GAAyB;AAC9B,SACGC,QAAD,IAAc;AACZC,IAAAA,UAAU,CAAC,MAAM;AACfD,MAAAA,QAAQ,CAAC;AAACV,QAAAA,IAAI,EAAEb;AAAP,OAAD,CAAR;AACD,KAFS,EAEP,IAFO,CAAV;AAGD,GALH;AAOD;AAED,OAAO,SAASyB,yBAAT,CAAoCC,QAApC,EAA8CC,cAA9C,EAA8D;AACnE,SAAO;AACLd,IAAAA,IAAI,EAAEZ,6BADD;AAELyB,IAAAA,QAFK;AAGLC,IAAAA;AAHK,GAAP;AAKD;AAED,OAAO,SAASC,aAAT,CAAwBC,UAAxB,EAAoC;AACzC,SAAO;AACLhB,IAAAA,IAAI,EAAEX,eADD;AAEL2B,IAAAA;AAFK,GAAP;AAID;AAED,OAAO,SAASC,UAAT,CAAqBC,OAArB,EAA8B;AACnC,SAAO;AACLlB,IAAAA,IAAI,EAAEV,WADD;AAEL4B,IAAAA;AAFK,GAAP;AAID;AAED,OAAO,SAASC,oBAAT,CAA+BC,WAA/B,EAA4C;AACjD,SAAO;AACLpB,IAAAA,IAAI,EAAET,sBADD;AAEL6B,IAAAA;AAFK,GAAP;AAID;AAED,OAAO,SAASC,UAAT,GAAuB;AAC5B,SAAO;AACLrB,IAAAA,IAAI,EAAER;AADD,GAAP;AAGD;AAED,OAAO,SAAS8B,OAAT,GAAoB;AACzB,SAAO;AACLtB,IAAAA,IAAI,EAAEP;AADD,GAAP;AAGD;AAED,OAAO,SAAS8B,YAAT,GAAyB;AAC9B,SAAO;AACLvB,IAAAA,IAAI,EAAEN;AADD,GAAP;AAGD;AAED,OAAO,SAAS8B,aAAT,GAA0B;AAC/B,SAAO;AACLxB,IAAAA,IAAI,EAAEL;AADD,GAAP;AAGD;AAED,OAAO,SAAS8B,WAAT,GAAwB;AAC7B,SAAO;AACLzB,IAAAA,IAAI,EAAEH;AADD,GAAP;AAGD;AAED,OAAO,SAAS6B,MAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AACrC,SAAO;AACL5B,IAAAA,IAAI,EAAEF,MADD;AAEL6B,IAAAA,KAFK;AAGLC,IAAAA;AAHK,GAAP;AAKD","sourcesContent":["export const ADD_NEW_PLAYER = 'ADD_NEW_PLAYER';\nexport const MOVE_PLAYER = 'MOVE_PLAYER';\nexport const CHANGE_PLAYER = 'CHANGE_PLAYER';\nexport const CHANGE_PLAYER_POSITION_IN_BOX = 'CHANGE_PLAYER_POSITION_IN_BOX';\nexport const RECORD_DICE_LOG = 'RECORD_DICE_LOG';\nexport const LOG_MESSAGE = 'LOG_MESSAGE';\nexport const SET_PLAYER_PERSISTENCE = 'SET_PLAYER_PERSISTENCE';\nexport const ENABLE_DICE = 'ENABLE_DICE';\nexport const END_GAME = 'END_GAME';\nexport const ADD_SNAKE_BITE = 'ADD_SNAKE_BITE';\nexport const ADD_LADDER_HIKE = 'ADD_LADDER_HIKE';\nexport const SHAKE_PLAYERS = 'SHAKE_PLAYERS';\nexport const RESTART_GAME = 'RESTART_GAME';\nexport const REDRAW= 'REDRAW';\n\nexport function addNewPlayer () {\n  return {\n    type: ADD_NEW_PLAYER\n  };\n}\n\nexport function getRollDiceResult () {\n  const max = 6, min = 1;\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport function movePlayer (newPos) {\n  return {\n    type: MOVE_PLAYER,\n    newPos\n  }\n}\n\nexport function changePlayer () {\n  return (\n    (dispatch) => {\n      setTimeout(() => {\n        dispatch({type: CHANGE_PLAYER});\n      }, 1000);\n    }\n  )\n}\n\nexport function changePlayerPositionInBox (playerId, newBoxPosition) {\n  return {\n    type: CHANGE_PLAYER_POSITION_IN_BOX,\n    playerId,\n    newBoxPosition\n  }\n}\n\nexport function recordDiceLog (diceResult) {\n  return {\n    type: RECORD_DICE_LOG,\n    diceResult\n  }\n}\n\nexport function logMessage (message) {\n  return {\n    type: LOG_MESSAGE,\n    message\n  }\n}\n\nexport function setPlayerPersistence (persistence) {\n  return {\n    type: SET_PLAYER_PERSISTENCE,\n    persistence\n  }\n}\n\nexport function enableDice () {\n  return {\n    type: ENABLE_DICE\n  }\n}\n\nexport function endGame () {\n  return {\n    type: END_GAME\n  }\n}\n\nexport function addSnakeBite () {\n  return {\n    type: ADD_SNAKE_BITE\n  }\n}\n\nexport function addLadderHike () {\n  return {\n    type: ADD_LADDER_HIKE\n  }\n}\n\nexport function restartGame () {\n  return {\n    type: RESTART_GAME\n  }\n}\n\nexport function redraw (width, height) {\n  return {\n    type: REDRAW,\n    width,\n    height\n  }\n}\n"]},"metadata":{},"sourceType":"module"}