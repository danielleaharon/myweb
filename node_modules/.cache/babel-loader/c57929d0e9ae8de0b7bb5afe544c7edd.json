{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport Viewport from '../viewports/viewport';\nimport { parsePosition, getPosition } from '../utils/positions';\nimport { deepEqual } from '../utils/deep-equal';\nimport assert from '../utils/assert';\nexport default class View {\n  constructor(props) {\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"viewportInstance\", void 0);\n\n    _defineProperty(this, \"_x\", void 0);\n\n    _defineProperty(this, \"_y\", void 0);\n\n    _defineProperty(this, \"_width\", void 0);\n\n    _defineProperty(this, \"_height\", void 0);\n\n    _defineProperty(this, \"_padding\", void 0);\n\n    _defineProperty(this, \"props\", void 0);\n\n    const {\n      id,\n      x = 0,\n      y = 0,\n      width = '100%',\n      height = '100%',\n      padding = null,\n      viewportInstance\n    } = props || {};\n    assert(!viewportInstance || viewportInstance instanceof Viewport);\n    this.viewportInstance = viewportInstance;\n    this.id = id || this.constructor.displayName || 'view';\n    this.props = { ...props,\n      id: this.id\n    };\n    this._x = parsePosition(x);\n    this._y = parsePosition(y);\n    this._width = parsePosition(width);\n    this._height = parsePosition(height);\n    this._padding = padding && {\n      left: parsePosition(padding.left || 0),\n      right: parsePosition(padding.right || 0),\n      top: parsePosition(padding.top || 0),\n      bottom: parsePosition(padding.bottom || 0)\n    };\n    this.equals = this.equals.bind(this);\n    Object.seal(this);\n  }\n\n  equals(view) {\n    if (this === view) {\n      return true;\n    }\n\n    if (this.viewportInstance) {\n      return view.viewportInstance ? this.viewportInstance.equals(view.viewportInstance) : false;\n    }\n\n    return this.ViewportType === view.ViewportType && deepEqual(this.props, view.props);\n  }\n\n  makeViewport({\n    width,\n    height,\n    viewState\n  }) {\n    if (this.viewportInstance) {\n      return this.viewportInstance;\n    }\n\n    viewState = this.filterViewState(viewState);\n    const viewportDimensions = this.getDimensions({\n      width,\n      height\n    });\n    return new this.ViewportType({ ...viewState,\n      ...this.props,\n      ...viewportDimensions\n    });\n  }\n\n  getViewStateId() {\n    const {\n      viewState\n    } = this.props;\n\n    if (typeof viewState === 'string') {\n      return viewState;\n    }\n\n    return (viewState === null || viewState === void 0 ? void 0 : viewState.id) || this.id;\n  }\n\n  filterViewState(viewState) {\n    if (this.props.viewState && typeof this.props.viewState === 'object') {\n      if (!this.props.viewState.id) {\n        return this.props.viewState;\n      }\n\n      const newViewState = { ...viewState\n      };\n\n      for (const key in this.props.viewState) {\n        if (key !== 'id') {\n          newViewState[key] = this.props.viewState[key];\n        }\n      }\n\n      return newViewState;\n    }\n\n    return viewState;\n  }\n\n  getDimensions({\n    width,\n    height\n  }) {\n    const dimensions = {\n      x: getPosition(this._x, width),\n      y: getPosition(this._y, height),\n      width: getPosition(this._width, width),\n      height: getPosition(this._height, height)\n    };\n\n    if (this._padding) {\n      dimensions.padding = {\n        left: getPosition(this._padding.left, width),\n        top: getPosition(this._padding.top, height),\n        right: getPosition(this._padding.right, width),\n        bottom: getPosition(this._padding.bottom, height)\n      };\n    }\n\n    return dimensions;\n  }\n\n  get controller() {\n    const opts = this.props.controller;\n\n    if (!opts) {\n      return null;\n    }\n\n    if (opts === true) {\n      return {\n        type: this.ControllerType\n      };\n    }\n\n    if (typeof opts === 'function') {\n      return {\n        type: opts\n      };\n    }\n\n    return {\n      type: this.ControllerType,\n      ...opts\n    };\n  }\n\n}","map":{"version":3,"sources":["../../../src/views/view.ts"],"names":["constructor","x","y","width","height","padding","viewportInstance","props","assert","id","parsePosition","left","right","top","bottom","Object","equals","view","deepEqual","makeViewport","viewState","viewportDimensions","getViewStateId","filterViewState","newViewState","key","getDimensions","dimensions","getPosition","controller","opts","type","ControllerType"],"mappings":"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","sourcesContent":["import Viewport from '../viewports/viewport';\nimport {parsePosition, getPosition, Position} from '../utils/positions';\nimport {deepEqual} from '../utils/deep-equal';\nimport assert from '../utils/assert';\nimport type Controller from '../controllers/controller';\nimport type {ControllerOptions} from '../controllers/controller';\nimport type {TransitionProps} from '../controllers/transition-manager';\nimport type {Padding} from '../viewports/viewport';\nimport type {ConstructorOf} from '../types/types';\n\nexport type CommonViewState = TransitionProps;\n\ntype CommonViewProps<ViewState> = {\n  /** A unique id of the view. In a multi-view use case, this is important for matching view states and place contents into this view. */\n  id?: string;\n  /** A relative (e.g. `'50%'`) or absolute position. Default `0`. */\n  x?: number | string;\n  /** A relative (e.g. `'50%'`) or absolute position. Default `0`. */\n  y?: number | string;\n  /** A relative (e.g. `'50%'`) or absolute extent. Default `'100%'`. */\n  width?: number | string;\n  /** A relative (e.g. `'50%'`) or absolute extent. Default `'100%'`. */\n  height?: number | string;\n  /** Padding around the view, expressed in either relative (e.g. `'50%'`) or absolute pixels. Default `null`. */\n  padding?: {\n    left?: number | string;\n    right?: number | string;\n    top?: number | string;\n    bottom?: number | string;\n  } | null;\n  /** State of the view */\n  viewState?:\n    | string\n    | ({\n        id?: string;\n      } & Partial<ViewState>);\n  /** Options for viewport interactivity. */\n  controller?:\n    | null\n    | boolean\n    | ConstructorOf<Controller<any>>\n    | (ControllerOptions & {\n        type?: ConstructorOf<Controller<any>>;\n      });\n\n  /** @deprecated Directly wrap a viewport instance */\n  viewportInstance?: Viewport;\n};\n\nexport default abstract class View<\n  ViewState extends CommonViewState = CommonViewState,\n  ViewProps = {}\n> {\n  id: string;\n  abstract get ViewportType(): ConstructorOf<Viewport>;\n  abstract get ControllerType(): ConstructorOf<Controller<any>>;\n\n  private viewportInstance?: Viewport;\n  private _x: Position;\n  private _y: Position;\n  private _width: Position;\n  private _height: Position;\n  private _padding: {\n    left: Position;\n    right: Position;\n    top: Position;\n    bottom: Position;\n  } | null;\n\n  readonly props: ViewProps & CommonViewProps<ViewState>;\n\n  constructor(props: ViewProps & CommonViewProps<ViewState>) {\n    const {\n      id,\n      x = 0,\n      y = 0,\n      width = '100%',\n      height = '100%',\n      padding = null,\n      viewportInstance\n    } = props || {};\n\n    assert(!viewportInstance || viewportInstance instanceof Viewport);\n    this.viewportInstance = viewportInstance;\n\n    // @ts-ignore\n    this.id = id || this.constructor.displayName || 'view';\n\n    this.props = {...props, id: this.id};\n\n    // Extents\n    this._x = parsePosition(x);\n    this._y = parsePosition(y);\n    this._width = parsePosition(width);\n    this._height = parsePosition(height);\n    this._padding = padding && {\n      left: parsePosition(padding.left || 0),\n      right: parsePosition(padding.right || 0),\n      top: parsePosition(padding.top || 0),\n      bottom: parsePosition(padding.bottom || 0)\n    };\n\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n\n    Object.seal(this);\n  }\n\n  equals(view: View<ViewState, ViewProps>): boolean {\n    if (this === view) {\n      return true;\n    }\n\n    // if `viewportInstance` is set, it is the only prop that is used\n    // Delegate to `Viewport.equals`\n    if (this.viewportInstance) {\n      return view.viewportInstance ? this.viewportInstance.equals(view.viewportInstance) : false;\n    }\n\n    return this.ViewportType === view.ViewportType && deepEqual(this.props, view.props);\n  }\n\n  /** Make viewport from canvas dimensions and view state */\n  makeViewport({width, height, viewState}: {width: number; height: number; viewState: any}) {\n    if (this.viewportInstance) {\n      return this.viewportInstance;\n    }\n\n    viewState = this.filterViewState(viewState);\n\n    // Resolve relative viewport dimensions\n    const viewportDimensions = this.getDimensions({width, height});\n    return new this.ViewportType({...viewState, ...this.props, ...viewportDimensions});\n  }\n\n  getViewStateId(): string {\n    const {viewState} = this.props;\n    if (typeof viewState === 'string') {\n      // if View.viewState is a string, return it\n      return viewState;\n    }\n    return viewState?.id || this.id;\n  }\n\n  // Allows view to override (or completely define) viewState\n  filterViewState(viewState: ViewState): ViewState {\n    if (this.props.viewState && typeof this.props.viewState === 'object') {\n      // If we have specified an id, then intent is to override,\n      // If not, completely specify the view state\n      if (!this.props.viewState.id) {\n        return this.props.viewState as ViewState;\n      }\n\n      // Merge in all props from View's viewState, except id\n      const newViewState = {...viewState};\n      for (const key in this.props.viewState) {\n        if (key !== 'id') {\n          newViewState[key] = this.props.viewState[key];\n        }\n      }\n      return newViewState;\n    }\n\n    return viewState;\n  }\n\n  /** Resolve the dimensions of the view from overall canvas dimensions */\n  getDimensions({width, height}: {width: number; height: number}): {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    padding?: Padding;\n  } {\n    const dimensions: {\n      x: number;\n      y: number;\n      width: number;\n      height: number;\n      padding?: Padding;\n    } = {\n      x: getPosition(this._x, width),\n      y: getPosition(this._y, height),\n      width: getPosition(this._width, width),\n      height: getPosition(this._height, height)\n    };\n\n    if (this._padding) {\n      dimensions.padding = {\n        left: getPosition(this._padding.left, width),\n        top: getPosition(this._padding.top, height),\n        right: getPosition(this._padding.right, width),\n        bottom: getPosition(this._padding.bottom, height)\n      };\n    }\n    return dimensions;\n  }\n\n  // Used by sub classes to resolve controller props\n  get controller(): (ControllerOptions & {type: ConstructorOf<Controller<any>>}) | null {\n    const opts = this.props.controller;\n\n    if (!opts) {\n      return null;\n    }\n    if (opts === true) {\n      return {type: this.ControllerType};\n    }\n    if (typeof opts === 'function') {\n      return {type: opts};\n    }\n    return {type: this.ControllerType, ...opts};\n  }\n}\n"]},"metadata":{},"sourceType":"module"}