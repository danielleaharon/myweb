{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/\\u05E2\\u05D1\\u05D5\\u05D3\\u05D5\\u05EA \\u05DC\\u05D4\\u05D2\\u05E9\\u05D4/myweb/src/components/snakes/ui/game/Index.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router';\nimport * as Action from '../../redux/actions';\nimport Tile from '../../components/game/Tile';\nimport Player from '../../components/game/Player';\nimport Snake from './components/game/Snake';\nimport LadderContainer from './components/game/LadderContainer';\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    gameboard: state.gameboard.get('board'),\n    players: state.player.get('all'),\n    start: state.game.get('config').get('start'),\n    ladders_size: state.gameboard.get('ladders').size,\n    snakes: state.gameboard.get('snakes'),\n    winner: state.game.get('config').get('winner')\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  gameSetStart: () => dispatch(Action.gameSetStart())\n});\n\nlet Game = props => {\n  // delay a little so the html is rendered and we can access div/tile positions\n  // this is definitely not required, but doing it this way i was able to get rid of some boilerplate code.\n  setTimeout(() => {\n    props.gameSetStart();\n  }, 10);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, props.gameboard.size > 0 ? React.createElement(\"div\", {\n    className: \"gameboard-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"gameboard\",\n    className: \"gameboard flex row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, props.gameboard.map(tile => {\n    return React.createElement(Tile, {\n      key: tile.id,\n      data: tile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    });\n  })), props.ladders_size > 0 && props.start && React.createElement(LadderContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), props.snakes.size > 0 && props.start && React.createElement(\"div\", {\n    className: \"snakes\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, props.snakes.map(snake => {\n    return React.createElement(Snake, {\n      key: 'snake_' + snake.id,\n      data: snake,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    });\n  })), props.players.size > 0 && props.start && React.createElement(\"div\", {\n    className: \"players\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, props.players.map(player => {\n    return React.createElement(Player, {\n      key: 'player_' + player.id,\n      data: player,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    });\n  })), props.winner !== null && React.createElement(\"div\", {\n    className: \"game-over flex\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"Game Over\"))) : React.createElement(\"div\", {\n    className: \"screen\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"The board is empty right now, Please generate the board first.\")));\n};\n\nconst ConnectGame = connect(mapStateToProps, mapDispatchToProps)(Game);\nexport default ConnectGame;","map":{"version":3,"sources":["/Users/user/Desktop/עבודות להגשה/myweb/src/components/snakes/ui/game/Index.js"],"names":["React","connect","Link","Action","Tile","Player","Snake","LadderContainer","mapStateToProps","state","ownProps","gameboard","get","players","player","start","game","ladders_size","size","snakes","winner","mapDispatchToProps","dispatch","gameSetStart","Game","props","setTimeout","map","tile","id","snake","ConnectGame"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router';\nimport * as Action from '../../redux/actions';\nimport Tile from '../../components/game/Tile';\nimport Player from '../../components/game/Player';\nimport Snake from './components/game/Snake';\nimport LadderContainer from './components/game/LadderContainer';\n\n\nconst mapStateToProps = ( state, ownProps ) => {\n\treturn {\n\t\tgameboard: state.gameboard.get('board'),\n\t\tplayers: state.player.get('all'),\n\t\tstart: state.game.get('config').get('start'),\n\t\tladders_size: state.gameboard.get('ladders').size,\n\t\tsnakes: state.gameboard.get('snakes'),\n\t\twinner: state.game.get('config').get('winner'),\n\t}\n}\n\nconst mapDispatchToProps = dispatch => ({\n\tgameSetStart: () => dispatch( Action.gameSetStart() ),\n});\n\n\n\nlet Game = ( props ) => {\n\n\t// delay a little so the html is rendered and we can access div/tile positions\n\t// this is definitely not required, but doing it this way i was able to get rid of some boilerplate code.\n\tsetTimeout( () => {\n\t\tprops.gameSetStart();\n\t}, 10 );\n\n\n\n    return (\n\t\t<div>\n\t\t{ props.gameboard.size > 0 ?\n\t\t\t(\n\t\t\t<div className=\"gameboard-container\">\n\n\t\t\t\t<div id=\"gameboard\" className=\"gameboard flex row\">\n\t\t\t\t{ props.gameboard.map( tile => {\n\t\t\t\t\t\treturn(\n\t\t\t\t\t\t\t<Tile key={ tile.id } data={tile} />\n\t\t\t\t\t\t)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\t</div>\n\n\t\t\t\t{ props.ladders_size > 0 && props.start &&\n\t\t\t\t\t<LadderContainer />\n\t\t\t\t}\n\n\t\t\t\t{ props.snakes.size > 0 && props.start &&\n\t\t\t\t\t<div className=\"snakes\">\n\t\t\t\t\t\t{ props.snakes.map( snake => {\n\t\t\t\t\t\t\t\treturn <Snake key={ 'snake_' + snake.id } data={ snake } />\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t}\n\n\t\t\t\t{ props.players.size > 0 && props.start &&\n\t\t\t\t\t<div className=\"players\">\n\t\t\t\t\t\t{ props.players.map( player => {\n\t\t\t\t\t\t\t\treturn(\n\t\t\t\t\t\t\t\t\t<Player key={ 'player_' + player.id } data={ player } />\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t}\n\n\t\t\t\t{ props.winner !== null &&\n\t\t\t\t\t<div className=\"game-over flex\">\n\t\t\t\t\t\t<h2>Game Over</h2>\n\t\t\t\t\t</div>\n\t\t\t\t}\n\n\t\t\t</div>\n\t\t\t)\n\t\t\t:\n\t\t\t(\n\t\t\t<div className=\"screen\">\n\t\t\t\t<p>The board is empty right now, Please generate the board first.</p>\n\t\t\t</div>\n\t\t\t)\n\n\t\t}\n\t\t</div>\n    )\n\n\n}\n\n\n\n\nconst ConnectGame = connect(\n\tmapStateToProps,\n\tmapDispatchToProps\n)(Game)\n\n\nexport default ConnectGame;\n\n"]},"metadata":{},"sourceType":"module"}