{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/\\u05E2\\u05D1\\u05D5\\u05D3\\u05D5\\u05EA \\u05DC\\u05D4\\u05D2\\u05E9\\u05D4/myweb/src/components/memoryGame/index.js\";\nimport React from 'react';\nimport { useEffect, useState, useRef } from \"react\";\nimport { Dialog, DialogActions, DialogContent, DialogContentText, Button, DialogTitle } from \"@material-ui/core\";\nimport Card from \"./card\";\nimport DialogProject from \"./DialogProject\";\nimport \"./index.scss\";\nconst uniqueElementsArray = [{\n  type: \"ilist\",\n  image: require(`../../images/ilist.png`),\n  content: {\n    title: \"iList\",\n    lang: 'Android studio',\n    description: `A shopping list app designed for easy sharing of your shopping list with your family or roommates.\n        Features:\n        *List sharing with your friends - Add, Edit & Delete any items in your list and seamlessly sync changes with your friends\n        *Photo uploading for easy recognition of desired items\n        *Tagging items as bought\n        *Copy and send lists anymore you want\n        *Supports Both Hebrew and English. And multiple colors schemes\n        *server side in Firebase`,\n    github: \"https://github.com/danielleaharon/androidproject\"\n  }\n}, {\n  type: \"fitshare\",\n  image: require(`../../images/fitshare.png`),\n  content: 'fitshare'\n}, {\n  type: \"animalstore\",\n  image: require(`../../images/animalstore.png`),\n  content: 'animalstore'\n}, {\n  type: \"flickrGallery\",\n  image: require(`../../images/flickrGallery.png`),\n  content: 'flickrGallery'\n}, {\n  type: \"Pidgetto\",\n  image: require(`../../images/flickrGallery.png`),\n  content: 'flickrGallery 2'\n}, {\n  type: \"Bulbasaur\",\n  image: require(`../../images/flickrGallery.png`),\n  content: 'flickrGallery 3'\n}];\n\nfunction shuffleCards(array) {\n  const length = array.length;\n\n  for (let i = length; i > 0; i--) {\n    const randomIndex = Math.floor(Math.random() * i);\n    const currentIndex = i - 1;\n    const temp = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temp;\n  }\n\n  return array;\n}\n\nexport default function App() {\n  const [cards, setCards] = useState(shuffleCards.bind(null, uniqueElementsArray.concat(uniqueElementsArray)));\n  const [openCards, setOpenCards] = useState([]);\n  const [clearedCards, setClearedCards] = useState({});\n  const [shouldDisableAllCards, setShouldDisableAllCards] = useState(false);\n  const [moves, setMoves] = useState(0);\n  const [showModal, setShowModal] = useState(false);\n  const [showModalProject, setShowModalProject] = useState(false);\n  const [modalProjectContent, setModalProjectContent] = useState('');\n  const [bestScore, setBestScore] = useState(JSON.parse(localStorage.getItem(\"bestScore\")) || Number.POSITIVE_INFINITY);\n  const timeout = useRef(null);\n\n  const disable = () => {\n    setShouldDisableAllCards(true);\n  };\n\n  const enable = () => {\n    setShouldDisableAllCards(false);\n  };\n\n  const checkCompletion = () => {\n    if (Object.keys(clearedCards).length === uniqueElementsArray.length) {\n      setShowModal(true);\n      const highScore = Math.min(moves, bestScore);\n      setBestScore(highScore);\n      localStorage.setItem(\"bestScore\", highScore);\n    }\n  };\n\n  const evaluate = () => {\n    const [first, second] = openCards;\n    enable();\n\n    if (cards[first].type === cards[second].type) {\n      //open project model and see the card image \n      setShowModalProject(true);\n      setModalProjectContent(cards[first].content);\n      setClearedCards(prev => ({ ...prev,\n        [cards[first].type]: true\n      }));\n      setOpenCards([]);\n      return;\n    } // This is to flip the cards back after 500ms duration\n\n\n    timeout.current = setTimeout(() => {\n      setOpenCards([]);\n    }, 500);\n  };\n\n  const handleCardClick = index => {\n    if (openCards.length === 1) {\n      setOpenCards(prev => [...prev, index]);\n      setMoves(moves => moves + 1);\n      disable();\n    } else {\n      clearTimeout(timeout.current);\n      setOpenCards([index]);\n    }\n  };\n\n  useEffect(() => {\n    let timeout = null;\n\n    if (openCards.length === 2) {\n      timeout = setTimeout(evaluate, 400);\n    }\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [openCards]);\n  useEffect(() => {\n    checkCompletion();\n  }, [clearedCards]);\n\n  const checkIsFlipped = index => {\n    return openCards.includes(index);\n  };\n\n  const checkIsInactive = card => {\n    return Boolean(clearedCards[card.type]);\n  };\n\n  const handleRestart = () => {\n    setClearedCards({});\n    setOpenCards([]);\n    setShowModal(false);\n    setMoves(0);\n    setShouldDisableAllCards(false); // set a shuffled deck of cards\n\n    setCards(shuffleCards(uniqueElementsArray.concat(uniqueElementsArray)));\n  };\n\n  return React.createElement(\"div\", {\n    className: \"memory\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, cards.map((card, index) => {\n    return React.createElement(Card, {\n      key: index,\n      card: card,\n      index: index,\n      isDisabled: shouldDisableAllCards,\n      isInactive: checkIsInactive(card),\n      isFlipped: checkIsFlipped(index),\n      onClick: handleCardClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    });\n  })), React.createElement(\"footer\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"score\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"moves\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"bold\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, \"Moves:\"), \" \", moves), localStorage.getItem(\"bestScore\") && React.createElement(\"div\", {\n    className: \"high-score\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"bold\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, \"Best Score:\"), \" \", bestScore)), React.createElement(\"div\", {\n    className: \"restart\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: handleRestart,\n    color: \"primary\",\n    variant: \"contained\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }, \"Restart\"))), React.createElement(Dialog, {\n    open: showModal,\n    disableBackdropClick: true,\n    disableEscapeKeyDown: true,\n    \"aria-labelledby\": \"alert-dialog-title\",\n    \"aria-describedby\": \"alert-dialog-description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    id: \"alert-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }, \"Hurray!!! You completed the challenge\"), React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }, React.createElement(DialogContentText, {\n    id: \"alert-dialog-description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }, \"You completed the game in \", moves, \" moves. Your best score is\", \" \", bestScore, \" moves.\")), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: handleRestart,\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }, \"Restart\"))), React.createElement(DialogProject, {\n    showModal: showModalProject,\n    handleClose: () => {\n      setShowModalProject(false);\n    },\n    content: modalProjectContent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/Users/user/Desktop/עבודות להגשה/myweb/src/components/memoryGame/index.js"],"names":["React","useEffect","useState","useRef","Dialog","DialogActions","DialogContent","DialogContentText","Button","DialogTitle","Card","DialogProject","uniqueElementsArray","type","image","require","content","title","lang","description","github","shuffleCards","array","length","i","randomIndex","Math","floor","random","currentIndex","temp","App","cards","setCards","bind","concat","openCards","setOpenCards","clearedCards","setClearedCards","shouldDisableAllCards","setShouldDisableAllCards","moves","setMoves","showModal","setShowModal","showModalProject","setShowModalProject","modalProjectContent","setModalProjectContent","bestScore","setBestScore","JSON","parse","localStorage","getItem","Number","POSITIVE_INFINITY","timeout","disable","enable","checkCompletion","Object","keys","highScore","min","setItem","evaluate","first","second","prev","current","setTimeout","handleCardClick","index","clearTimeout","checkIsFlipped","includes","checkIsInactive","card","Boolean","handleRestart","map"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,EAA8BC,MAA9B,QAA4C,OAA5C;AACA,SACEC,MADF,EAEEC,aAFF,EAGEC,aAHF,EAIEC,iBAJF,EAKEC,MALF,EAMEC,WANF,QAOO,mBAPP;AAQA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AAEA,OAAO,cAAP;AAGA,MAAMC,mBAAmB,GAAG,CAC1B;AACEC,EAAAA,IAAI,EAAE,OADR;AAEEC,EAAAA,KAAK,EAAEC,OAAO,CAAE,wBAAF,CAFhB;AAGEC,EAAAA,OAAO,EAAC;AACJC,IAAAA,KAAK,EAAC,OADF;AAEJC,IAAAA,IAAI,EAAC,gBAFD;AAGJC,IAAAA,WAAW,EAAE;;;;;;;iCAHT;AAWJC,IAAAA,MAAM,EAAC;AAXH;AAHV,CAD0B,EAkB1B;AACEP,EAAAA,IAAI,EAAE,UADR;AAEEC,EAAAA,KAAK,EAAEC,OAAO,CAAE,2BAAF,CAFhB;AAGEC,EAAAA,OAAO,EAAC;AAHV,CAlB0B,EAwB1B;AACEH,EAAAA,IAAI,EAAE,aADR;AAEEC,EAAAA,KAAK,EAAEC,OAAO,CAAE,8BAAF,CAFhB;AAGEC,EAAAA,OAAO,EAAC;AAHV,CAxB0B,EA8B1B;AACEH,EAAAA,IAAI,EAAE,eADR;AAEEC,EAAAA,KAAK,EAAEC,OAAO,CAAE,gCAAF,CAFhB;AAGEC,EAAAA,OAAO,EAAC;AAHV,CA9B0B,EAoC1B;AACEH,EAAAA,IAAI,EAAE,UADR;AAEEC,EAAAA,KAAK,EAAEC,OAAO,CAAE,gCAAF,CAFhB;AAGEC,EAAAA,OAAO,EAAC;AAHV,CApC0B,EA0C1B;AACEH,EAAAA,IAAI,EAAE,WADR;AAEEC,EAAAA,KAAK,EAAEC,OAAO,CAAE,gCAAF,CAFhB;AAGEC,EAAAA,OAAO,EAAC;AAHV,CA1C0B,CAA5B;;AAkDA,SAASK,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,QAAMC,MAAM,GAAGD,KAAK,CAACC,MAArB;;AACA,OAAK,IAAIC,CAAC,GAAGD,MAAb,EAAqBC,CAAC,GAAG,CAAzB,EAA4BA,CAAC,EAA7B,EAAiC;AAC/B,UAAMC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBJ,CAA3B,CAApB;AACA,UAAMK,YAAY,GAAGL,CAAC,GAAG,CAAzB;AACA,UAAMM,IAAI,GAAGR,KAAK,CAACO,YAAD,CAAlB;AACAP,IAAAA,KAAK,CAACO,YAAD,CAAL,GAAsBP,KAAK,CAACG,WAAD,CAA3B;AACAH,IAAAA,KAAK,CAACG,WAAD,CAAL,GAAqBK,IAArB;AACD;;AACD,SAAOR,KAAP;AACD;;AACD,eAAe,SAASS,GAAT,GAAe;AAC5B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoB/B,QAAQ,CAChCmB,YAAY,CAACa,IAAb,CAAkB,IAAlB,EAAwBtB,mBAAmB,CAACuB,MAApB,CAA2BvB,mBAA3B,CAAxB,CADgC,CAAlC;AAGA,QAAM,CAACwB,SAAD,EAAYC,YAAZ,IAA4BnC,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACoC,YAAD,EAAeC,eAAf,IAAkCrC,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACsC,qBAAD,EAAwBC,wBAAxB,IAAoDvC,QAAQ,CAAC,KAAD,CAAlE;AACA,QAAM,CAACwC,KAAD,EAAQC,QAAR,IAAoBzC,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAAC0C,SAAD,EAAYC,YAAZ,IAA4B3C,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAAC4C,gBAAD,EAAmBC,mBAAnB,IAA0C7C,QAAQ,CAAC,KAAD,CAAxD;AACA,QAAM,CAAC8C,mBAAD,EAAsBC,sBAAtB,IAAgD/C,QAAQ,CAAC,EAAD,CAA9D;AAEA,QAAM,CAACgD,SAAD,EAAYC,YAAZ,IAA4BjD,QAAQ,CACxCkD,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,KAAiDC,MAAM,CAACC,iBADhB,CAA1C;AAGA,QAAMC,OAAO,GAAGvD,MAAM,CAAC,IAAD,CAAtB;;AAEA,QAAMwD,OAAO,GAAG,MAAM;AACpBlB,IAAAA,wBAAwB,CAAC,IAAD,CAAxB;AACD,GAFD;;AAGA,QAAMmB,MAAM,GAAG,MAAM;AACnBnB,IAAAA,wBAAwB,CAAC,KAAD,CAAxB;AACD,GAFD;;AAIA,QAAMoB,eAAe,GAAG,MAAM;AAC5B,QAAIC,MAAM,CAACC,IAAP,CAAYzB,YAAZ,EAA0Bf,MAA1B,KAAqCX,mBAAmB,CAACW,MAA7D,EAAqE;AACnEsB,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,YAAMmB,SAAS,GAAGtC,IAAI,CAACuC,GAAL,CAASvB,KAAT,EAAgBQ,SAAhB,CAAlB;AACAC,MAAAA,YAAY,CAACa,SAAD,CAAZ;AACAV,MAAAA,YAAY,CAACY,OAAb,CAAqB,WAArB,EAAkCF,SAAlC;AACD;AACF,GAPD;;AAQA,QAAMG,QAAQ,GAAG,MAAM;AACrB,UAAM,CAACC,KAAD,EAAQC,MAAR,IAAkBjC,SAAxB;AACAwB,IAAAA,MAAM;;AACN,QAAI5B,KAAK,CAACoC,KAAD,CAAL,CAAavD,IAAb,KAAsBmB,KAAK,CAACqC,MAAD,CAAL,CAAcxD,IAAxC,EAA8C;AAC1C;AACAkC,MAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACAE,MAAAA,sBAAsB,CAACjB,KAAK,CAACoC,KAAD,CAAL,CAAapD,OAAd,CAAtB;AACFuB,MAAAA,eAAe,CAAE+B,IAAD,KAAW,EAAE,GAAGA,IAAL;AAAW,SAACtC,KAAK,CAACoC,KAAD,CAAL,CAAavD,IAAd,GAAqB;AAAhC,OAAX,CAAD,CAAf;AACAwB,MAAAA,YAAY,CAAC,EAAD,CAAZ;AACA;AACD,KAVoB,CAWrB;;;AACAqB,IAAAA,OAAO,CAACa,OAAR,GAAkBC,UAAU,CAAC,MAAM;AACjCnC,MAAAA,YAAY,CAAC,EAAD,CAAZ;AACD,KAF2B,EAEzB,GAFyB,CAA5B;AAGD,GAfD;;AAgBA,QAAMoC,eAAe,GAAIC,KAAD,IAAW;AACjC,QAAItC,SAAS,CAACb,MAAV,KAAqB,CAAzB,EAA4B;AAC1Bc,MAAAA,YAAY,CAAEiC,IAAD,IAAU,CAAC,GAAGA,IAAJ,EAAUI,KAAV,CAAX,CAAZ;AACA/B,MAAAA,QAAQ,CAAED,KAAD,IAAWA,KAAK,GAAG,CAApB,CAAR;AACAiB,MAAAA,OAAO;AACR,KAJD,MAIO;AACLgB,MAAAA,YAAY,CAACjB,OAAO,CAACa,OAAT,CAAZ;AACAlC,MAAAA,YAAY,CAAC,CAACqC,KAAD,CAAD,CAAZ;AACD;AACF,GATD;;AAWAzE,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIyD,OAAO,GAAG,IAAd;;AACA,QAAItB,SAAS,CAACb,MAAV,KAAqB,CAAzB,EAA4B;AAC1BmC,MAAAA,OAAO,GAAGc,UAAU,CAACL,QAAD,EAAW,GAAX,CAApB;AACD;;AACD,WAAO,MAAM;AACXQ,MAAAA,YAAY,CAACjB,OAAD,CAAZ;AACD,KAFD;AAGD,GARQ,EAQN,CAACtB,SAAD,CARM,CAAT;AAUAnC,EAAAA,SAAS,CAAC,MAAM;AACd4D,IAAAA,eAAe;AAChB,GAFQ,EAEN,CAACvB,YAAD,CAFM,CAAT;;AAGA,QAAMsC,cAAc,GAAIF,KAAD,IAAW;AAChC,WAAOtC,SAAS,CAACyC,QAAV,CAAmBH,KAAnB,CAAP;AACD,GAFD;;AAIA,QAAMI,eAAe,GAAIC,IAAD,IAAU;AAChC,WAAOC,OAAO,CAAC1C,YAAY,CAACyC,IAAI,CAAClE,IAAN,CAAb,CAAd;AACD,GAFD;;AAIA,QAAMoE,aAAa,GAAG,MAAM;AAC1B1C,IAAAA,eAAe,CAAC,EAAD,CAAf;AACAF,IAAAA,YAAY,CAAC,EAAD,CAAZ;AACAQ,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,IAAAA,QAAQ,CAAC,CAAD,CAAR;AACAF,IAAAA,wBAAwB,CAAC,KAAD,CAAxB,CAL0B,CAM1B;;AACAR,IAAAA,QAAQ,CAACZ,YAAY,CAACT,mBAAmB,CAACuB,MAApB,CAA2BvB,mBAA3B,CAAD,CAAb,CAAR;AACD,GARD;;AAUA,SACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGoB,KAAK,CAACkD,GAAN,CAAU,CAACH,IAAD,EAAOL,KAAP,KAAiB;AAC1B,WACE,oBAAC,IAAD;AACE,MAAA,GAAG,EAAEA,KADP;AAEE,MAAA,IAAI,EAAEK,IAFR;AAGE,MAAA,KAAK,EAAEL,KAHT;AAIE,MAAA,UAAU,EAAElC,qBAJd;AAKE,MAAA,UAAU,EAAEsC,eAAe,CAACC,IAAD,CAL7B;AAME,MAAA,SAAS,EAAEH,cAAc,CAACF,KAAD,CAN3B;AAOE,MAAA,OAAO,EAAED,eAPX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAWD,GAZA,CADH,CAFF,EAiBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,OACwC/B,KADxC,CADF,EAIGY,YAAY,CAACC,OAAb,CAAqB,WAArB,KACC;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,OAC6CL,SAD7C,CALJ,CADF,EAWE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAE+B,aAAjB;AAAgC,IAAA,KAAK,EAAC,SAAtC;AAAgD,IAAA,OAAO,EAAC,WAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,CAXF,CAjBF,EAkCE,oBAAC,MAAD;AACE,IAAA,IAAI,EAAErC,SADR;AAEE,IAAA,oBAAoB,MAFtB;AAGE,IAAA,oBAAoB,MAHtB;AAIE,uBAAgB,oBAJlB;AAKE,wBAAiB,0BALnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE,oBAAC,WAAD;AAAa,IAAA,EAAE,EAAC,oBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAPF,EAUE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,iBAAD;AAAmB,IAAA,EAAE,EAAC,0BAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAC6BF,KAD7B,gCAC8D,GAD9D,EAEGQ,SAFH,YADF,CAVF,EAgBE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAE+B,aAAjB;AAAgC,IAAA,KAAK,EAAC,SAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,CAhBF,CAlCF,EAwDE,oBAAC,aAAD;AAAe,IAAA,SAAS,EAAEnC,gBAA1B;AAA4C,IAAA,WAAW,EAAE,MAAI;AAACC,MAAAA,mBAAmB,CAAC,KAAD,CAAnB;AAA2B,KAAzF;AAA2F,IAAA,OAAO,EAAEC,mBAApG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAxDF,CADF;AA4DD","sourcesContent":["import React from 'react';\nimport { useEffect, useState, useRef } from \"react\";\nimport {\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  Button,\n  DialogTitle\n} from \"@material-ui/core\";\nimport Card from \"./card\";\nimport DialogProject from \"./DialogProject\";\n\nimport \"./index.scss\";\n\n\nconst uniqueElementsArray = [\n  {\n    type: \"ilist\",\n    image: require(`../../images/ilist.png`),\n    content:{\n        title:\"iList\",\n        lang:'Android studio',\n        description:`A shopping list app designed for easy sharing of your shopping list with your family or roommates.\n        Features:\n        *List sharing with your friends - Add, Edit & Delete any items in your list and seamlessly sync changes with your friends\n        *Photo uploading for easy recognition of desired items\n        *Tagging items as bought\n        *Copy and send lists anymore you want\n        *Supports Both Hebrew and English. And multiple colors schemes\n        *server side in Firebase`,\n        github:\"https://github.com/danielleaharon/androidproject\"\n    }\n  },\n  {\n    type: \"fitshare\",\n    image: require(`../../images/fitshare.png`),\n    content:'fitshare'\n\n  },\n  {\n    type: \"animalstore\",\n    image: require(`../../images/animalstore.png`),\n    content:'animalstore'\n\n  },\n  {\n    type: \"flickrGallery\",\n    image: require(`../../images/flickrGallery.png`),\n    content:'flickrGallery'\n\n  },\n  {\n    type: \"Pidgetto\",\n    image: require(`../../images/flickrGallery.png`),\n    content:'flickrGallery 2'\n\n  },\n  {\n    type: \"Bulbasaur\",\n    image: require(`../../images/flickrGallery.png`),\n    content:'flickrGallery 3'\n\n  }\n];\n\nfunction shuffleCards(array) {\n  const length = array.length;\n  for (let i = length; i > 0; i--) {\n    const randomIndex = Math.floor(Math.random() * i);\n    const currentIndex = i - 1;\n    const temp = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temp;\n  }\n  return array;\n}\nexport default function App() {\n  const [cards, setCards] = useState(\n    shuffleCards.bind(null, uniqueElementsArray.concat(uniqueElementsArray))\n  );\n  const [openCards, setOpenCards] = useState([]);\n  const [clearedCards, setClearedCards] = useState({});\n  const [shouldDisableAllCards, setShouldDisableAllCards] = useState(false);\n  const [moves, setMoves] = useState(0);\n  const [showModal, setShowModal] = useState(false);\n  const [showModalProject, setShowModalProject] = useState(false);\n  const [modalProjectContent, setModalProjectContent] = useState('');\n\n  const [bestScore, setBestScore] = useState(\n    JSON.parse(localStorage.getItem(\"bestScore\")) || Number.POSITIVE_INFINITY\n  );\n  const timeout = useRef(null);\n\n  const disable = () => {\n    setShouldDisableAllCards(true);\n  };\n  const enable = () => {\n    setShouldDisableAllCards(false);\n  };\n\n  const checkCompletion = () => {\n    if (Object.keys(clearedCards).length === uniqueElementsArray.length) {\n      setShowModal(true);\n      const highScore = Math.min(moves, bestScore);\n      setBestScore(highScore);\n      localStorage.setItem(\"bestScore\", highScore);\n    }\n  };\n  const evaluate = () => {\n    const [first, second] = openCards;\n    enable();\n    if (cards[first].type === cards[second].type) {\n        //open project model and see the card image \n        setShowModalProject(true)\n        setModalProjectContent(cards[first].content)\n      setClearedCards((prev) => ({ ...prev, [cards[first].type]: true }));\n      setOpenCards([]);\n      return;\n    }\n    // This is to flip the cards back after 500ms duration\n    timeout.current = setTimeout(() => {\n      setOpenCards([]);\n    }, 500);\n  };\n  const handleCardClick = (index) => {\n    if (openCards.length === 1) {\n      setOpenCards((prev) => [...prev, index]);\n      setMoves((moves) => moves + 1);\n      disable();\n    } else {\n      clearTimeout(timeout.current);\n      setOpenCards([index]);\n    }\n  };\n\n  useEffect(() => {\n    let timeout = null;\n    if (openCards.length === 2) {\n      timeout = setTimeout(evaluate, 400);\n    }\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [openCards]);\n\n  useEffect(() => {\n    checkCompletion();\n  }, [clearedCards]);\n  const checkIsFlipped = (index) => {\n    return openCards.includes(index);\n  };\n\n  const checkIsInactive = (card) => {\n    return Boolean(clearedCards[card.type]);\n  };\n\n  const handleRestart = () => {\n    setClearedCards({});\n    setOpenCards([]);\n    setShowModal(false);\n    setMoves(0);\n    setShouldDisableAllCards(false);\n    // set a shuffled deck of cards\n    setCards(shuffleCards(uniqueElementsArray.concat(uniqueElementsArray)));\n  };\n\n  return (\n    <div className=\"memory\">\n    \n      <div className=\"container\">\n        {cards.map((card, index) => {\n          return (\n            <Card\n              key={index}\n              card={card}\n              index={index}\n              isDisabled={shouldDisableAllCards}\n              isInactive={checkIsInactive(card)}\n              isFlipped={checkIsFlipped(index)}\n              onClick={handleCardClick}\n            />\n          );\n        })}\n      </div>\n      <footer>\n        <div className=\"score\">\n          <div className=\"moves\">\n            <span className=\"bold\">Moves:</span> {moves}\n          </div>\n          {localStorage.getItem(\"bestScore\") && (\n            <div className=\"high-score\">\n              <span className=\"bold\">Best Score:</span> {bestScore}\n            </div>\n          )}\n        </div>\n        <div className=\"restart\">\n          <Button onClick={handleRestart} color=\"primary\" variant=\"contained\">\n            Restart\n          </Button>\n        </div>\n      </footer>\n      <Dialog\n        open={showModal}\n        disableBackdropClick\n        disableEscapeKeyDown\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">\n          Hurray!!! You completed the challenge\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            You completed the game in {moves} moves. Your best score is{\" \"}\n            {bestScore} moves.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleRestart} color=\"primary\">\n            Restart\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <DialogProject showModal={showModalProject} handleClose={()=>{setShowModalProject(false)}} content={modalProjectContent}/>\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}