{"ast":null,"code":"import React from'react';import{StyledStage}from'../styles/StyledStage';import{TETROMINOS}from'../tetrominos';import Cell from'./Cell';export default function Stage(_ref){var stage=_ref.stage,newGame=_ref.newGame;var StageMain=function StageMain(){return React.createElement(StyledStage,{width:stage[0].length,height:stage.length,id:\"stage\"},stage.map(function(row){return row.map(function(cell,x){return React.createElement(Cell,{key:x,type:cell[0],text:cell[2]});});}));};var StageStartPositon=function StageStartPositon(){var newStage=stage;var y=1;Object.entries(TETROMINOS).forEach(function(obj,i){obj[1].shape.forEach(function(value,x){value.forEach(function(col,z){if(col!==0){newStage[x+y][z+2]=[col,'clear',obj[1].text[x][z]];}});});y=y+obj[1].shape.length;});return React.createElement(StyledStage,{width:stage[0].length,height:stage.length,id:\"stage-start\"},newStage.map(function(row){return row.map(function(cell,x){return React.createElement(Cell,{key:x,type:cell[0],text:cell[2]});});}));};if(newGame)return StageStartPositon();else return StageMain();}// const Stage = ({ stage,newGame }) => ( { \n//     //  if(newGame){\n//   return  StageStartPositon(stage);\n// //   } else { StageMain(stage)\n//    }\n//   });\n// export default Stage;","map":{"version":3,"sources":["/Users/user/Desktop/עבודות להגשה/myweb/src/components/tetris/components/Stage.js"],"names":["React","StyledStage","TETROMINOS","Cell","Stage","stage","newGame","StageMain","length","map","row","cell","x","StageStartPositon","newStage","y","Object","entries","forEach","obj","i","shape","value","col","z","text"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,WAAT,KAA4B,uBAA5B,CACA,OAASC,UAAT,KAA2B,eAA3B,CAEA,MAAOC,CAAAA,IAAP,KAAiB,QAAjB,CAEA,cAAe,SAASC,CAAAA,KAAT,MAAkC,IAAjBC,CAAAA,KAAiB,MAAjBA,KAAiB,CAAXC,OAAW,MAAXA,OAAW,CAC7C,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,SAEd,qBAAC,WAAD,EAAa,KAAK,CAAEF,KAAK,CAAC,CAAD,CAAL,CAASG,MAA7B,CAAqC,MAAM,CAAEH,KAAK,CAACG,MAAnD,CAA2D,EAAE,CAAC,OAA9D,EACIH,KAAK,CAACI,GAAN,CAAU,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACD,GAAJ,CAAQ,SAACE,IAAD,CAAOC,CAAP,CAAa,CACvC,MAAO,qBAAC,IAAD,EAAM,GAAG,CAAEA,CAAX,CAAc,IAAI,CAAED,IAAI,CAAC,CAAD,CAAxB,CAA6B,IAAI,CAAEA,IAAI,CAAC,CAAD,CAAvC,EAAP,CAAsD,CADpC,CAAJ,EAAb,CADJ,CAFc,EAAlB,CAOA,GAAME,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,EAAQ,CAE9B,GAAMC,CAAAA,QAAQ,CAACT,KAAf,CACA,GAAIU,CAAAA,CAAC,CAAC,CAAN,CACAC,MAAM,CAACC,OAAP,CAAef,UAAf,EAA2BgB,OAA3B,CAAmC,SAACC,GAAD,CAAOC,CAAP,CAAW,CAC1CD,GAAG,CAAC,CAAD,CAAH,CAAOE,KAAP,CAAaH,OAAb,CAAqB,SAACI,KAAD,CAAOV,CAAP,CAAW,CAC5BU,KAAK,CAACJ,OAAN,CAAc,SAACK,GAAD,CAAKC,CAAL,CAAS,CACnB,GAAID,GAAG,GAAK,CAAZ,CAAe,CACXT,QAAQ,CAACF,CAAC,CAACG,CAAH,CAAR,CAAeS,CAAC,CAAC,CAAjB,EAAsB,CACpBD,GADoB,CAEpB,OAFoB,CAGpBJ,GAAG,CAAC,CAAD,CAAH,CAAOM,IAAP,CAAYb,CAAZ,EAAeY,CAAf,CAHoB,CAAtB,CAKD,CACN,CARD,EAUC,CAXL,EAaIT,CAAC,CAACA,CAAC,CAACI,GAAG,CAAC,CAAD,CAAH,CAAOE,KAAP,CAAab,MAAjB,CAGP,CAjBD,EAkBF,MAAQ,qBAAC,WAAD,EAAa,KAAK,CAAEH,KAAK,CAAC,CAAD,CAAL,CAASG,MAA7B,CAAqC,MAAM,CAAEH,KAAK,CAACG,MAAnD,CAA2D,EAAE,CAAC,aAA9D,EACHM,QAAQ,CAACL,GAAT,CAAa,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACD,GAAJ,CAAQ,SAACE,IAAD,CAAOC,CAAP,CAAa,CAC1C,MAAO,qBAAC,IAAD,EAAM,GAAG,CAAEA,CAAX,CAAc,IAAI,CAAED,IAAI,CAAC,CAAD,CAAxB,CAA6B,IAAI,CAAEA,IAAI,CAAC,CAAD,CAAvC,EAAP,CAAsD,CADjC,CAAJ,EAAhB,CADG,CAAR,CAIK,CA1BP,CA4BE,GAAGL,OAAH,CACA,MAAOO,CAAAA,iBAAiB,EAAxB,CADA,IAEO,OAAON,CAAAA,SAAS,EAAhB,CAEZ,CACD;AAEA;AACA;AACA;AACA;AACA;AAIA","sourcesContent":["import React from 'react';\nimport { StyledStage } from '../styles/StyledStage';\nimport { TETROMINOS } from '../tetrominos';\n\nimport Cell from './Cell';\n\nexport default function Stage({ stage,newGame }) {\n    const StageMain = () => (\n  \n        <StyledStage width={stage[0].length} height={stage.length} id=\"stage\">\n           {stage.map(row => row.map((cell, x) => {\n           return <Cell key={x} type={cell[0]} text={cell[2]} />}))}\n         </StyledStage>\n     );\n    const StageStartPositon = (  ) => {\n\n        const newStage=stage;\n        var y=1;\n        Object.entries(TETROMINOS).forEach((obj , i)=>{\n            obj[1].shape.forEach((value,x)=>{\n                value.forEach((col,z)=>{\n                    if (col !== 0) {\n                        newStage[x+y ][z+2] = [\n                          col,\n                          'clear',\n                          obj[1].text[x][z]\n                        ];\n                      }\n                })\n              \n                });\n\n                y=y+obj[1].shape.length;\n            \n           \n        })\n      return  <StyledStage width={stage[0].length} height={stage.length} id=\"stage-start\">\n          {newStage.map(row => row.map((cell, x) => {\n          return <Cell key={x} type={cell[0]} text={cell[2]} />}))}\n        </StyledStage>\n          }\n      ;\n      if(newGame)\n      return StageStartPositon()\n      else   return StageMain()\n\n}\n// const Stage = ({ stage,newGame }) => ( { \n \n//     //  if(newGame){\n//   return  StageStartPositon(stage);\n// //   } else { StageMain(stage)\n//    }\n//   });\n\n\n\n// export default Stage;"]},"metadata":{},"sourceType":"module"}