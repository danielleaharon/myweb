{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport ScreenPass from '../passes/screen-pass';\nimport { normalizeShaderModule } from '@luma.gl/core';\nexport default class PostProcessEffect {\n  constructor(module, props = {}) {\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"props\", void 0);\n\n    _defineProperty(this, \"module\", void 0);\n\n    _defineProperty(this, \"passes\", void 0);\n\n    this.id = \"\".concat(module.name, \"-pass\");\n    this.props = props;\n    normalizeShaderModule(module);\n    this.module = module;\n  }\n\n  preRender() {}\n\n  postRender(gl, params) {\n    const passes = this.passes || createPasses(gl, this.module, this.id, this.props);\n    this.passes = passes;\n    const {\n      target\n    } = params;\n    let inputBuffer = params.inputBuffer;\n    let outputBuffer = params.swapBuffer;\n\n    for (let index = 0; index < this.passes.length; index++) {\n      if (target && index === this.passes.length - 1) {\n        outputBuffer = target;\n      }\n\n      this.passes[index].render({\n        inputBuffer,\n        outputBuffer\n      });\n      const switchBuffer = outputBuffer;\n      outputBuffer = inputBuffer;\n      inputBuffer = switchBuffer;\n    }\n\n    return inputBuffer;\n  }\n\n  cleanup() {\n    if (this.passes) {\n      for (const pass of this.passes) {\n        pass.delete();\n      }\n\n      this.passes = undefined;\n    }\n  }\n\n}\n\nfunction createPasses(gl, module, id, moduleSettings) {\n  if (!module.passes) {\n    const fs = getFragmentShaderForRenderPass(module);\n    const pass = new ScreenPass(gl, {\n      id,\n      module,\n      fs,\n      moduleSettings\n    });\n    return [pass];\n  }\n\n  return module.passes.map((pass, index) => {\n    const fs = getFragmentShaderForRenderPass(module, pass);\n    const idn = \"\".concat(id, \"-\").concat(index);\n    return new ScreenPass(gl, {\n      id: idn,\n      module,\n      fs,\n      moduleSettings\n    });\n  });\n}\n\nconst FILTER_FS_TEMPLATE = func => \"uniform sampler2D texture;\\nuniform vec2 texSize;\\n\\nvarying vec2 position;\\nvarying vec2 coordinate;\\nvarying vec2 uv;\\n\\nvoid main() {\\n  vec2 texCoord = coordinate;\\n\\n  gl_FragColor = texture2D(texture, texCoord);\\n  gl_FragColor = \".concat(func, \"(gl_FragColor, texSize, texCoord);\\n}\\n\");\n\nconst SAMPLER_FS_TEMPLATE = func => \"uniform sampler2D texture;\\nuniform vec2 texSize;\\n\\nvarying vec2 position;\\nvarying vec2 coordinate;\\nvarying vec2 uv;\\n\\nvoid main() {\\n  vec2 texCoord = coordinate;\\n\\n  gl_FragColor = \".concat(func, \"(texture, texSize, texCoord);\\n}\\n\");\n\nfunction getFragmentShaderForRenderPass(module, pass = module) {\n  if (pass.filter) {\n    const func = typeof pass.filter === 'string' ? pass.filter : \"\".concat(module.name, \"_filterColor\");\n    return FILTER_FS_TEMPLATE(func);\n  }\n\n  if (pass.sampler) {\n    const func = typeof pass.sampler === 'string' ? pass.sampler : \"\".concat(module.name, \"_sampleColor\");\n    return SAMPLER_FS_TEMPLATE(func);\n  }\n\n  return null;\n}","map":{"version":3,"sources":["../../../src/effects/post-process-effect.ts"],"names":["constructor","props","module","normalizeShaderModule","preRender","postRender","passes","createPasses","target","inputBuffer","params","outputBuffer","index","switchBuffer","cleanup","pass","fs","getFragmentShaderForRenderPass","moduleSettings","idn","id","FILTER_FS_TEMPLATE","func","SAMPLER_FS_TEMPLATE"],"mappings":"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","sourcesContent":["import ScreenPass from '../passes/screen-pass';\nimport {normalizeShaderModule} from '@luma.gl/core';\n\nimport type {Effect, PostRenderOptions} from '../lib/effect';\nimport type {Framebuffer} from '@luma.gl/webgl';\nimport type {ShaderModule} from '../types/types';\n\nexport default class PostProcessEffect implements Effect {\n  id: string;\n  props: any;\n  module: ShaderModule;\n  passes?: ScreenPass[];\n\n  constructor(module: ShaderModule, props: any = {}) {\n    this.id = `${module.name}-pass`;\n    this.props = props;\n    normalizeShaderModule(module);\n    this.module = module;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  preRender(): void {}\n\n  postRender(gl: WebGLRenderingContext, params: PostRenderOptions): Framebuffer {\n    const passes = this.passes || createPasses(gl, this.module, this.id, this.props);\n    this.passes = passes;\n\n    const {target} = params;\n    let inputBuffer = params.inputBuffer;\n    let outputBuffer = params.swapBuffer;\n\n    for (let index = 0; index < this.passes.length; index++) {\n      if (target && index === this.passes.length - 1) {\n        outputBuffer = target;\n      }\n      this.passes[index].render({inputBuffer, outputBuffer});\n      const switchBuffer = outputBuffer;\n      outputBuffer = inputBuffer;\n      inputBuffer = switchBuffer;\n    }\n    return inputBuffer;\n  }\n\n  cleanup(): void {\n    if (this.passes) {\n      for (const pass of this.passes) {\n        pass.delete();\n      }\n      this.passes = undefined;\n    }\n  }\n}\n\nfunction createPasses(\n  gl: WebGLRenderingContext,\n  module: ShaderModule,\n  id: string,\n  moduleSettings: any\n): ScreenPass[] {\n  if (!module.passes) {\n    const fs = getFragmentShaderForRenderPass(module);\n    const pass = new ScreenPass(gl, {\n      id,\n      module,\n      fs,\n      moduleSettings\n    });\n    return [pass];\n  }\n\n  return module.passes.map((pass, index) => {\n    const fs = getFragmentShaderForRenderPass(module, pass);\n    const idn = `${id}-${index}`;\n\n    return new ScreenPass(gl, {\n      id: idn,\n      module,\n      fs,\n      moduleSettings\n    });\n  });\n}\n\nconst FILTER_FS_TEMPLATE = func => `\\\nuniform sampler2D texture;\nuniform vec2 texSize;\n\nvarying vec2 position;\nvarying vec2 coordinate;\nvarying vec2 uv;\n\nvoid main() {\n  vec2 texCoord = coordinate;\n\n  gl_FragColor = texture2D(texture, texCoord);\n  gl_FragColor = ${func}(gl_FragColor, texSize, texCoord);\n}\n`;\n\nconst SAMPLER_FS_TEMPLATE = func => `\\\nuniform sampler2D texture;\nuniform vec2 texSize;\n\nvarying vec2 position;\nvarying vec2 coordinate;\nvarying vec2 uv;\n\nvoid main() {\n  vec2 texCoord = coordinate;\n\n  gl_FragColor = ${func}(texture, texSize, texCoord);\n}\n`;\n\nfunction getFragmentShaderForRenderPass(module, pass = module) {\n  if (pass.filter) {\n    const func = typeof pass.filter === 'string' ? pass.filter : `${module.name}_filterColor`;\n    return FILTER_FS_TEMPLATE(func);\n  }\n\n  if (pass.sampler) {\n    const func = typeof pass.sampler === 'string' ? pass.sampler : `${module.name}_sampleColor`;\n    return SAMPLER_FS_TEMPLATE(func);\n  }\n\n  // console.error(`${module.name} no fragment shader generated`);\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}