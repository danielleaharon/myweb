{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/\\u05E2\\u05D1\\u05D5\\u05D3\\u05D5\\u05EA \\u05DC\\u05D4\\u05D2\\u05E9\\u05D4/myweb/src/components/tetris/components/CellPreview.js\";\nimport React from 'react';\nimport { StyledCell } from '../styles/StyledCellPreview';\nimport { TETROMINOS } from '../tetrominos'; // React.memo makes sure we only re-render the changed cells\n\nconst CellPreview = ({\n  type,\n  text,\n  shape\n}) => React.createElement(\"div\", {\n  className: \"preview-cell\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7\n  },\n  __self: this\n}, shape.map((item, index) => {\n  if (item) return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, item.map((cube, indexCube) => {\n    return React.createElement(StyledCell, {\n      type: cube,\n      color: cube !== 0 && TETROMINOS[cube].color,\n      title: cube !== 0 && text[index][indexCube],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    });\n  }));\n}));\n\nexport default React.memo(CellPreview);","map":{"version":3,"sources":["/Users/user/Desktop/עבודות להגשה/myweb/src/components/tetris/components/CellPreview.js"],"names":["React","StyledCell","TETROMINOS","CellPreview","type","text","shape","map","item","index","cube","indexCube","color","memo"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,UAAT,QAA2B,eAA3B,C,CAEA;;AACA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAOC,EAAAA,IAAP;AAAYC,EAAAA;AAAZ,CAAD,KAClB;AAAK,EAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAEGA,KAAK,CAACC,GAAN,CAAU,CAACC,IAAD,EAAMC,KAAN,KAAc;AACxB,MAAGD,IAAH,EACC,OAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOA,IAAI,CAACD,GAAL,CAAS,CAACG,IAAD,EAAOC,SAAP,KAAmB;AAC1C,WAAO,oBAAC,UAAD;AAAY,MAAA,IAAI,EAAED,IAAlB;AAA0B,MAAA,KAAK,EAAEA,IAAI,KAAG,CAAP,IAAUR,UAAU,CAACQ,IAAD,CAAV,CAAiBE,KAA5D;AAAmE,MAAA,KAAK,EAAEF,IAAI,KAAG,CAAP,IAAUL,IAAI,CAACI,KAAD,CAAJ,CAAYE,SAAZ,CAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAED,GAHe,CAAP,CAAT;AAKD,CAPA,CAFH,CADF;;AAgBA,eAAeX,KAAK,CAACa,IAAN,CAAWV,WAAX,CAAf","sourcesContent":["import React from 'react';\nimport { StyledCell } from '../styles/StyledCellPreview';\nimport { TETROMINOS } from '../tetrominos';\n\n// React.memo makes sure we only re-render the changed cells\nconst CellPreview = ({ type,text,shape }) => (\n  <div className='preview-cell'>\n    \n    {shape.map((item,index)=>{\n     if(item)\n      return   <div >{item.map((cube, indexCube)=>{\n        return <StyledCell type={cube}   color={cube!==0&&TETROMINOS[cube].color} title={cube!==0&&text[index][indexCube]}>\n        </StyledCell>\n      })}\n   </div>\n    }  \n    \n)}\n</div>\n);\n\nexport default React.memo(CellPreview);"]},"metadata":{},"sourceType":"module"}