{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport Viewport from '../viewports/viewport';\nimport { getMeterZoom } from '@math.gl/web-mercator';\nimport { Matrix4, _SphericalCoordinates as SphericalCoordinates } from '@math.gl/core';\nexport default class FirstPersonViewport extends Viewport {\n  constructor(props) {\n    const {\n      longitude,\n      latitude,\n      modelMatrix,\n      bearing = 0,\n      pitch = 0,\n      up = [0, 0, 1]\n    } = props;\n    const spherical = new SphericalCoordinates({\n      bearing,\n      pitch: pitch === -90 ? 0.0001 : 90 + pitch\n    });\n    const dir = spherical.toVector3().normalize();\n    const center = modelMatrix ? new Matrix4(modelMatrix).transformAsVector(dir) : dir;\n    const zoom = Number.isFinite(latitude) ? getMeterZoom({\n      latitude: latitude\n    }) : 0;\n    const scale = Math.pow(2, zoom);\n    const viewMatrix = new Matrix4().lookAt({\n      eye: [0, 0, 0],\n      center,\n      up\n    }).scale(scale);\n    super({ ...props,\n      zoom,\n      viewMatrix\n    });\n\n    _defineProperty(this, \"longitude\", void 0);\n\n    _defineProperty(this, \"latitude\", void 0);\n\n    this.latitude = latitude;\n    this.longitude = longitude;\n  }\n\n}","map":{"version":3,"sources":["../../../src/viewports/first-person-viewport.ts"],"names":["_SphericalCoordinates","constructor","bearing","pitch","up","spherical","dir","center","modelMatrix","zoom","getMeterZoom","latitude","scale","Math","viewMatrix","eye"],"mappings":";AAAA,OAAA,QAAA,MAAA,uBAAA;AACA,SAAA,YAAA,QAAA,uBAAA;AACA,SAAA,OAAA,EAAiBA,qBAAqB,IAAtC,oBAAA,QAAA,eAAA;AAuCA,eAAe,MAAA,mBAAA,SAAA,QAAA,CAA2C;AAIxDC,EAAAA,WAAW,CAAA,KAAA,EAAoC;AAE7C,UAAM;AAAA,MAAA,SAAA;AAAA,MAAA,QAAA;AAAA,MAAA,WAAA;AAAmCC,MAAAA,OAAO,GAA1C,CAAA;AAAgDC,MAAAA,KAAK,GAArD,CAAA;AAA2DC,MAAAA,EAAE,GAAG,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AAAhE,QAAN,KAAA;AAGA,UAAMC,SAAS,GAAG,IAAA,oBAAA,CAAyB;AAAA,MAAA,OAAA;AAGzCF,MAAAA,KAAK,EAAEA,KAAK,KAAK,CAAVA,EAAAA,GAAAA,MAAAA,GAAyB,KAAKA;AAHI,KAAzB,CAAlB;AAKA,UAAMG,GAAG,GAAGD,SAAS,CAATA,SAAAA,GAAZ,SAAYA,EAAZ;AAGA,UAAME,MAAM,GAAGC,WAAW,GAAG,IAAA,OAAA,CAAA,WAAA,EAAA,iBAAA,CAAH,GAAG,CAAH,GAA1B,GAAA;AAGA,UAAMC,IAAI,GAAG,MAAM,CAAN,QAAA,CAAA,QAAA,IAA4BC,YAAY,CAAC;AAACC,MAAAA,QAAQ,EAAEA;AAAX,KAAD,CAAxC,GAAb,CAAA;AACA,UAAMC,KAAK,GAAGC,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAd,IAAcA,CAAd;AACA,UAAMC,UAAU,GAAG,IAAA,OAAA,GAAA,MAAA,CAAqB;AAACC,MAAAA,GAAG,EAAE,CAAA,CAAA,EAAA,CAAA,EAAN,CAAM,CAAN;AAAA,MAAA,MAAA;AAAyBX,MAAAA;AAAzB,KAArB,EAAA,KAAA,CAAnB,KAAmB,CAAnB;AAEA,UAAM,EACJ,GADI,KAAA;AAAA,MAAA,IAAA;AAGJU,MAAAA;AAHI,KAAN;;AApB6C,IAAA,eAAA,CAAA,IAAA,EAAA,WAAA,EAAA,KAAA,CAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EAAA,KAAA,CAAA,CAAA;;AA0B7C,SAAA,QAAA,GAAA,QAAA;AACA,SAAA,SAAA,GAAA,SAAA;AACD;;AAhCuD","sourcesContent":["import Viewport from '../viewports/viewport';\nimport {getMeterZoom} from '@math.gl/web-mercator';\nimport {Matrix4, _SphericalCoordinates as SphericalCoordinates} from '@math.gl/core';\n\nexport type FirstPersonViewportOptions = {\n  /** Name of the viewport */\n  id?: string;\n  /** Left offset from the canvas edge, in pixels */\n  x?: number;\n  /** Top offset from the canvas edge, in pixels */\n  y?: number;\n  /** Viewport width in pixels */\n  width?: number;\n  /** Viewport height in pixels */\n  height?: number;\n  /** Longitude of the camera, in the geospatial case. */\n  longitude?: number;\n  /** Latitude of the camera, in the geospatial case. */\n  latitude?: number;\n  /** Meter offsets of the camera from the lng-lat anchor point. Default `[0, 0, 0]`. */\n  position?: [number, number, number];\n  /** Bearing (heading) of the camera in degrees. Default `0` (north). */\n  bearing?: number;\n  /** Pitch (tilt) of the camera in degrees. Default `0` (horizontal). */\n  pitch?: number;\n  /** Transform applied to the camera position and direction */\n  modelMatrix?: number[] | null;\n  /** Custom projection matrix */\n  projectionMatrix?: number[];\n  /** The up direction, default positive z axis. */\n  up?: [number, number, number];\n  /** Field of view covered by camera, in degrees. Default `75`. */\n  fovy?: number;\n  /** Distance of near clipping plane. Default `0.1`. */\n  near?: number;\n  /** Distance of far clipping plane. Default `1000`. */\n  far?: number;\n  /** Modifier of viewport scale. Corresponds to the number of pixels per meter. Default `1`. */\n  focalDistance?: number;\n};\n\nexport default class FirstPersonViewport extends Viewport {\n  longitude?: number;\n  latitude?: number;\n\n  constructor(props: FirstPersonViewportOptions) {\n    // TODO - push direction handling into Matrix4.lookAt\n    const {longitude, latitude, modelMatrix, bearing = 0, pitch = 0, up = [0, 0, 1]} = props;\n\n    // Always calculate direction from bearing and pitch\n    const spherical = new SphericalCoordinates({\n      bearing,\n      // Avoid \"pixel project matrix not invertible\" error\n      pitch: pitch === -90 ? 0.0001 : 90 + pitch\n    });\n    const dir = spherical.toVector3().normalize();\n\n    // Direction is relative to model coordinates, of course\n    const center = modelMatrix ? new Matrix4(modelMatrix).transformAsVector(dir) : dir;\n\n    // Just the direction. All the positioning is done in viewport.js\n    const zoom = Number.isFinite(latitude) ? getMeterZoom({latitude: latitude as number}) : 0;\n    const scale = Math.pow(2, zoom);\n    const viewMatrix = new Matrix4().lookAt({eye: [0, 0, 0], center, up}).scale(scale);\n\n    super({\n      ...props,\n      zoom,\n      viewMatrix\n    });\n\n    this.latitude = latitude;\n    this.longitude = longitude;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}