{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/\\u05E2\\u05D1\\u05D5\\u05D3\\u05D5\\u05EA \\u05DC\\u05D4\\u05D2\\u05E9\\u05D4/myweb/src/components/snakes/components/Game.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Stage } from 'react-konva';\nimport CanvasGrid from './Canvas.Grid';\nimport CanvasPlayer from './Canvas.Player';\nimport CanvasSnake from './Canvas.Snake';\nimport CanvasLadder from './Canvas.Ladder';\nimport Players from './Players';\nimport Results from './Results';\nimport { addNewPlayer, getRollDiceResult, movePlayer, changePlayer, changePlayerPositionInBox, recordDiceLog, logMessage, enableDice, setPlayerPersistence, endGame, addSnakeBite, addLadderHike, restartGame, redraw } from '../actions/GameActions';\nimport { GAME_ON, MAX_PLAYERS } from '../config/variables';\nimport { delay } from '../config/utils';\nimport { styles } from '../styles';\nimport _ from 'lodash';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      diceOutput: {\n        __html: '&#x2684;'\n      }\n    };\n  }\n\n  handleResize(e) {\n    this.props.redraw(e.target.outerWidth, e.target.outerHeight);\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', _.debounce(this.handleResize.bind(this), 500));\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleResize);\n  }\n\n  render() {\n    const {\n      status,\n      dice: {\n        disabled: isDiceDisabled\n      },\n      grid: {\n        width,\n        height,\n        layout\n      },\n      grid,\n      players: {\n        all,\n        current: {\n          color: currentPlayerColor\n        },\n        current\n      },\n      players,\n      snakes,\n      ladders,\n      messages\n    } = this.props.game;\n    return React.createElement(\"div\", {\n      style: styles.main,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, status === GAME_ON ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: styles.gameBlock,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(Stage, {\n      width: width,\n      height: height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(CanvasGrid, {\n      grid: grid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }),\n    /* snakes */\n    snakes.map((s, index) => {\n      return React.createElement(CanvasSnake, {\n        key: `canvasSnake_${index}`,\n        snake: s,\n        grid: grid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      });\n    }),\n    /* ladders */\n    ladders.map((l, index) => {\n      return React.createElement(CanvasLadder, {\n        key: `canvasLadder_${index}`,\n        ladder: l,\n        grid: grid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      });\n    }),\n    /* players */\n    all.map((p, index) => {\n      return React.createElement(CanvasPlayer, {\n        key: `canvasPlayer_${index}`,\n        player: p,\n        current: current,\n        grid: grid,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      });\n    }))), React.createElement(\"div\", {\n      style: styles.dataBlock,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(Players, {\n      players: players,\n      addNewPlayer: this._addNewPlayer.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(\"section\", {\n      className: \"commentry-section\",\n      style: styles.commentry,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, messages[0]), React.createElement(\"section\", {\n      className: \"dice-section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      disabled: isDiceDisabled,\n      onClick: this._rollDice.bind(this),\n      style: { ...styles.diceButton,\n        opacity: isDiceDisabled ? 0.5 : 1\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Roll Dice\", React.createElement(\"span\", {\n      style: styles.dice,\n      dangerouslySetInnerHTML: this.state.diceOutput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }))), React.createElement(\"section\", {\n      className: \"actions-section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => {\n        this.props.endGame();\n      },\n      style: styles.endCta,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"End\"), React.createElement(\"button\", {\n      onClick: () => {\n        this.props.restartGame();\n      },\n      style: styles.restartCta,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Restart\")), React.createElement(\"section\", {\n      className: \"sction-rules\",\n      style: styles.rules,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"* Upto 4 Players can play at a time. \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    })))) : React.createElement(Results, {\n      players: all,\n      startNewGame: this.props.restartGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }));\n  }\n\n  _rollDice() {\n    const {\n      players: {\n        current: {\n          id,\n          pos\n        },\n        persistence\n      }\n    } = this.props.game;\n    const diceResult = getRollDiceResult();\n    this.setState({\n      diceOutput: {\n        __html: `&#x268${diceResult - 1};`\n      }\n    });\n    const newPos = pos + diceResult;\n    this.props.recordDiceLog(diceResult);\n    /**\n     * GAME LOGIC\n     **/\n\n    if (newPos > 100) {\n      this.props.logMessage(`Hang in there Player ${id}`);\n      this.props.changePlayer();\n    } else if (newPos == 100) {\n      this.props.movePlayer(newPos);\n      this.props.endGame();\n    } else {\n      this.props.movePlayer(newPos);\n      this.props.logMessage(`Player ${id} moved from  block ${pos} to block ${newPos}. ${diceResult === 6 ? '**SIX**' : ''}`);\n\n      this._checkSnakeBiteorLadderJump(newPos);\n\n      this._resolveOccupancyOverload();\n\n      if (diceResult === 6 && persistence < 3) {\n        this.props.enableDice();\n        this.props.setPlayerPersistence(persistence + 1);\n      } else {\n        this.props.changePlayer();\n        this.props.setPlayerPersistence(1);\n      }\n    }\n  }\n\n  _checkSnakeBiteorLadderJump(playerPos) {\n    const {\n      snakes,\n      ladders,\n      players: {\n        current: {\n          id\n        }\n      }\n    } = this.props.game;\n    const snakeStartPosList = snakes.map(s => s.startPos);\n    const ladderStartPosList = ladders.map(l => l.startPos);\n\n    if (snakeStartPosList.indexOf(playerPos) !== -1) {\n      /* busted */\n      const snake = snakes.filter(s => s.startPos === playerPos)[0];\n      this.props.movePlayer(snake.endPos);\n      this.props.addSnakeBite();\n      this.props.logMessage(`A snake ate Player ${id} at ${playerPos}, moved to block ${snake.endPos}`);\n    }\n\n    if (ladderStartPosList.indexOf(playerPos) !== -1) {\n      /* got wings */\n      const ladder = ladders.filter(l => l.startPos === playerPos)[0];\n      this.props.movePlayer(ladder.endPos);\n      this.props.addLadderHike();\n      this.props.logMessage(`Player ${id} found Ladder at ${playerPos}, moved to block ${ladder.endPos}`);\n    }\n  }\n\n  _resolveOccupancyOverload() {\n    delay(() => {\n      const {\n        grid: {\n          occupancy\n        },\n        players: {\n          all\n        }\n      } = this.props.game;\n      const boxesWithMoreThanOneOccupants = Object.keys(occupancy).filter(box => occupancy[box] > 1);\n\n      for (let box of boxesWithMoreThanOneOccupants) {\n        const playersWithinBox = all.filter(player => player.pos == box);\n        let count = 0;\n\n        for (let player of playersWithinBox) {\n          this.props.changePlayerPositionInBox(player.id, count++);\n        }\n      }\n    });\n  }\n\n  _addNewPlayer() {\n    this.props.addNewPlayer();\n\n    this._resolveOccupancyOverload();\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  const {\n    game\n  } = state;\n  return {\n    game\n  };\n}\n\nexport default connect(mapStateToProps, {\n  addNewPlayer,\n  movePlayer,\n  changePlayer,\n  changePlayerPositionInBox,\n  recordDiceLog,\n  logMessage,\n  enableDice,\n  setPlayerPersistence,\n  endGame,\n  addSnakeBite,\n  addLadderHike,\n  restartGame,\n  redraw\n})(Game);","map":{"version":3,"sources":["/Users/user/Desktop/עבודות להגשה/myweb/src/components/snakes/components/Game.js"],"names":["React","connect","Stage","CanvasGrid","CanvasPlayer","CanvasSnake","CanvasLadder","Players","Results","addNewPlayer","getRollDiceResult","movePlayer","changePlayer","changePlayerPositionInBox","recordDiceLog","logMessage","enableDice","setPlayerPersistence","endGame","addSnakeBite","addLadderHike","restartGame","redraw","GAME_ON","MAX_PLAYERS","delay","styles","_","Game","Component","constructor","props","state","diceOutput","__html","handleResize","e","target","outerWidth","outerHeight","componentDidMount","window","addEventListener","debounce","bind","componentWillUnmount","removeEventListener","render","status","dice","disabled","isDiceDisabled","grid","width","height","layout","players","all","current","color","currentPlayerColor","snakes","ladders","messages","game","main","gameBlock","map","s","index","l","p","dataBlock","_addNewPlayer","commentry","_rollDice","diceButton","opacity","endCta","restartCta","rules","id","pos","persistence","diceResult","setState","newPos","_checkSnakeBiteorLadderJump","_resolveOccupancyOverload","playerPos","snakeStartPosList","startPos","ladderStartPosList","indexOf","snake","filter","endPos","ladder","occupancy","boxesWithMoreThanOneOccupants","Object","keys","box","playersWithinBox","player","count","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Stage } from 'react-konva';\nimport CanvasGrid from './Canvas.Grid';\nimport CanvasPlayer from './Canvas.Player';\nimport CanvasSnake from './Canvas.Snake';\nimport CanvasLadder from './Canvas.Ladder';\nimport Players from './Players';\nimport Results from './Results';\nimport {\n  addNewPlayer, getRollDiceResult, movePlayer, changePlayer,\n  changePlayerPositionInBox, recordDiceLog, logMessage,\n  enableDice, setPlayerPersistence, endGame,\n  addSnakeBite, addLadderHike, restartGame, redraw\n} from '../actions/GameActions';\nimport { GAME_ON, MAX_PLAYERS } from '../config/variables';\nimport { delay } from '../config/utils';\nimport { styles } from '../styles';\nimport _ from 'lodash';\n\n class Game extends React.Component {\n\n  constructor (props) {\n    super(props);\n    this.state = {\n      diceOutput: {__html: '&#x2684;'}\n    }\n  }\n\n  handleResize (e) {\n    this.props.redraw(e.target.outerWidth, e.target.outerHeight);\n  }\n\n  componentDidMount () {\n    window.addEventListener('resize', _.debounce(this.handleResize.bind(this), 500));\n  }\n\n  componentWillUnmount () {\n    window.removeEventListener('resize', this.handleResize);\n  }\n\n  render () {\n    const {\n      status,\n      dice: { disabled: isDiceDisabled },\n      grid: { width, height, layout }, grid,\n      players: { all, current: { color: currentPlayerColor }, current }, players,\n      snakes, ladders, messages\n    } = this.props.game;\n\n    return (\n      <div style={styles.main}>\n        {\n          status === GAME_ON\n          ?\n          <div>\n            <div style={styles.gameBlock}>\n              <Stage\n                width={width}\n                height={height}>\n                <CanvasGrid grid={grid} />\n                { /* snakes */\n                  snakes.map((s, index) => {\n                    return (\n                      <CanvasSnake\n                        key={`canvasSnake_${index}`}\n                        snake={s}\n                        grid={grid}\n                        />\n                    )\n                  })\n                }\n                { /* ladders */\n                  ladders.map((l, index) => {\n                    return (\n                      <CanvasLadder\n                        key={`canvasLadder_${index}`}\n                        ladder={l}\n                        grid={grid}\n                        />\n                    )\n                  })\n                }\n                { /* players */\n                  all.map((p, index) => {\n                    return (\n                      <CanvasPlayer\n                        key={`canvasPlayer_${index}`}\n                        player={p}\n                        current={current}\n                        grid={grid}\n                        />\n                    )\n                  })\n                }\n              </Stage>\n            </div>\n            <div style={styles.dataBlock}>\n              <Players players={players} addNewPlayer={this._addNewPlayer.bind(this)}/>\n              <section className=\"commentry-section\" style={styles.commentry}>\n                {messages[0]}\n              </section>\n              <section className=\"dice-section\">\n                  <button disabled={isDiceDisabled}\n                    onClick={this._rollDice.bind(this)}\n                    style={{...styles.diceButton, opacity: isDiceDisabled ? 0.5 : 1}}>\n                    Roll Dice\n                    <span style={styles.dice} dangerouslySetInnerHTML={this.state.diceOutput} />\n                  </button>\n              </section>\n              <section className=\"actions-section\">\n                <button onClick={() => {this.props.endGame()}} style={styles.endCta}>End</button>\n                <button onClick={() => {this.props.restartGame()}} style={styles.restartCta}>Restart</button>\n              </section>\n              <section className=\"sction-rules\" style={styles.rules}>\n                * Upto 4 Players can play at a time. <br />\n              </section>\n            </div>\n          </div>\n          :\n          <Results players={all} startNewGame={this.props.restartGame}/>\n        }\n      </div>\n    );\n  }\n\n  _rollDice () {\n    const { players: { current: { id, pos }, persistence } } = this.props.game;\n    const diceResult = getRollDiceResult();\n    this.setState({\n      diceOutput: {__html: `&#x268${diceResult - 1};`}\n    })\n    const newPos = pos + diceResult;\n\n    this.props.recordDiceLog(diceResult);\n\n    /**\n     * GAME LOGIC\n     **/\n    if (newPos > 100) {\n      this.props.logMessage(`Hang in there Player ${id}`);\n      this.props.changePlayer();\n    } else if (newPos == 100) {\n      this.props.movePlayer(newPos);\n      this.props.endGame();\n    } else {\n      this.props.movePlayer(newPos);\n      this.props.logMessage(`Player ${id} moved from  block ${pos} to block ${newPos}. ${diceResult === 6 ? '**SIX**' : ''}`);\n\n      this._checkSnakeBiteorLadderJump(newPos);\n      this._resolveOccupancyOverload();\n\n      if (diceResult === 6 && persistence < 3) {\n        this.props.enableDice();\n        this.props.setPlayerPersistence(persistence + 1);\n      } else {\n        this.props.changePlayer();\n        this.props.setPlayerPersistence(1);\n      }\n    }\n  }\n\n  _checkSnakeBiteorLadderJump (playerPos) {\n    const { snakes, ladders, players: { current: { id } } } = this.props.game;\n    const snakeStartPosList = snakes.map((s) => s.startPos);\n    const ladderStartPosList = ladders.map((l) => l.startPos);\n\n    if (snakeStartPosList.indexOf(playerPos) !== -1) {\n      /* busted */\n      const snake = snakes.filter((s) => (s.startPos === playerPos))[0];\n      this.props.movePlayer(snake.endPos);\n      this.props.addSnakeBite();\n      this.props.logMessage(`A snake ate Player ${id} at ${playerPos}, moved to block ${snake.endPos}`);\n    }\n\n    if (ladderStartPosList.indexOf(playerPos) !== -1) {\n      /* got wings */\n      const ladder = ladders.filter((l) => (l.startPos === playerPos))[0];\n      this.props.movePlayer(ladder.endPos);\n      this.props.addLadderHike();\n      this.props.logMessage(`Player ${id} found Ladder at ${playerPos}, moved to block ${ladder.endPos}`);\n    }\n\n  }\n\n  _resolveOccupancyOverload () {\n    delay(() => {\n      const { grid: { occupancy }, players: { all } } = this.props.game;\n      const boxesWithMoreThanOneOccupants = Object.keys(occupancy).filter((box) => occupancy[box]>1);\n      for (let box of boxesWithMoreThanOneOccupants) {\n        const playersWithinBox = all.filter((player) => player.pos == box);\n        let count = 0;\n        for (let player of playersWithinBox) {\n            this.props.changePlayerPositionInBox(player.id, count++);\n        }\n      }\n    });\n  }\n\n  _addNewPlayer () {\n    this.props.addNewPlayer();\n    this._resolveOccupancyOverload();\n  }\n}\n\nfunction mapStateToProps(state) {\n  const { game } = state;\n  return {\n    game\n  };\n}\n\nexport default connect(mapStateToProps, {\n  addNewPlayer,\n  movePlayer,\n  changePlayer,\n  changePlayerPositionInBox,\n  recordDiceLog,\n  logMessage,\n  enableDice,\n  setPlayerPersistence,\n  endGame,\n  addSnakeBite,\n  addLadderHike,\n  restartGame,\n  redraw\n})(Game);\n"]},"metadata":{},"sourceType":"module"}