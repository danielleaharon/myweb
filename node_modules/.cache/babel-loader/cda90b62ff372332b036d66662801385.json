{"ast":null,"code":"import Hammer from './utils/hammer'; // This module contains constants that must be conditionally required\n// due to `window`/`document` references downstream.\n\nexport const RECOGNIZERS = Hammer ? [[Hammer.Pan, {\n  event: 'tripan',\n  pointers: 3,\n  threshold: 0,\n  enable: false\n}], [Hammer.Rotate, {\n  enable: false\n}], [Hammer.Pinch, {\n  enable: false\n}], [Hammer.Swipe, {\n  enable: false\n}], [Hammer.Pan, {\n  threshold: 0,\n  enable: false\n}], [Hammer.Press, {\n  enable: false\n}], [Hammer.Tap, {\n  event: 'doubletap',\n  taps: 2,\n  enable: false\n}], // TODO - rename to 'tap' and 'singletap' in the next major release\n[Hammer.Tap, {\n  event: 'anytap',\n  enable: false\n}], [Hammer.Tap, {\n  enable: false\n}]] : null; // Recognize the following gestures even if a given recognizer succeeds\n\nexport const RECOGNIZER_COMPATIBLE_MAP = {\n  tripan: ['rotate', 'pinch', 'pan'],\n  rotate: ['pinch'],\n  pinch: ['pan'],\n  pan: ['press', 'doubletap', 'anytap', 'tap'],\n  doubletap: ['anytap'],\n  anytap: ['tap']\n}; // Recognize the folling gestures only if a given recognizer fails\n\nexport const RECOGNIZER_FALLBACK_MAP = {\n  doubletap: ['tap']\n};\n/**\n * Only one set of basic input events will be fired by Hammer.js:\n * either pointer, touch, or mouse, depending on system support.\n * In order to enable an application to be agnostic of system support,\n * alias basic input events into \"classes\" of events: down, move, and up.\n * See `_onBasicInput()` for usage of these aliases.\n */\n\nexport const BASIC_EVENT_ALIASES = {\n  pointerdown: 'pointerdown',\n  pointermove: 'pointermove',\n  pointerup: 'pointerup',\n  touchstart: 'pointerdown',\n  touchmove: 'pointermove',\n  touchend: 'pointerup',\n  mousedown: 'pointerdown',\n  mousemove: 'pointermove',\n  mouseup: 'pointerup'\n};\nexport const INPUT_EVENT_TYPES = {\n  KEY_EVENTS: ['keydown', 'keyup'],\n  MOUSE_EVENTS: ['mousedown', 'mousemove', 'mouseup', 'mouseover', 'mouseout', 'mouseleave'],\n  WHEEL_EVENTS: [// Chrome, Safari\n  'wheel', // IE\n  'mousewheel']\n};\n/**\n * \"Gestural\" events are those that have semantic meaning beyond the basic input event,\n * e.g. a click or tap is a sequence of `down` and `up` events with no `move` event in between.\n * Hammer.js handles these with its Recognizer system;\n * this block maps event names to the Recognizers required to detect the events.\n */\n\nexport const EVENT_RECOGNIZER_MAP = {\n  tap: 'tap',\n  anytap: 'anytap',\n  doubletap: 'doubletap',\n  press: 'press',\n  pinch: 'pinch',\n  pinchin: 'pinch',\n  pinchout: 'pinch',\n  pinchstart: 'pinch',\n  pinchmove: 'pinch',\n  pinchend: 'pinch',\n  pinchcancel: 'pinch',\n  rotate: 'rotate',\n  rotatestart: 'rotate',\n  rotatemove: 'rotate',\n  rotateend: 'rotate',\n  rotatecancel: 'rotate',\n  tripan: 'tripan',\n  tripanstart: 'tripan',\n  tripanmove: 'tripan',\n  tripanup: 'tripan',\n  tripandown: 'tripan',\n  tripanleft: 'tripan',\n  tripanright: 'tripan',\n  tripanend: 'tripan',\n  tripancancel: 'tripan',\n  pan: 'pan',\n  panstart: 'pan',\n  panmove: 'pan',\n  panup: 'pan',\n  pandown: 'pan',\n  panleft: 'pan',\n  panright: 'pan',\n  panend: 'pan',\n  pancancel: 'pan',\n  swipe: 'swipe',\n  swipeleft: 'swipe',\n  swiperight: 'swipe',\n  swipeup: 'swipe',\n  swipedown: 'swipe'\n};\n/**\n * Map gestural events typically provided by browsers\n * that are not reported in 'hammer.input' events\n * to corresponding Hammer.js gestures.\n */\n\nexport const GESTURE_EVENT_ALIASES = {\n  click: 'tap',\n  anyclick: 'anytap',\n  dblclick: 'doubletap',\n  mousedown: 'pointerdown',\n  mousemove: 'pointermove',\n  mouseup: 'pointerup',\n  mouseover: 'pointerover',\n  mouseout: 'pointerout',\n  mouseleave: 'pointerleave'\n};","map":{"version":3,"sources":["../../src/constants.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import Hammer from './utils/hammer';\n// This module contains constants that must be conditionally required\n// due to `window`/`document` references downstream.\nexport const RECOGNIZERS = Hammer\n    ? [\n        [Hammer.Pan, { event: 'tripan', pointers: 3, threshold: 0, enable: false }],\n        [Hammer.Rotate, { enable: false }],\n        [Hammer.Pinch, { enable: false }],\n        [Hammer.Swipe, { enable: false }],\n        [Hammer.Pan, { threshold: 0, enable: false }],\n        [Hammer.Press, { enable: false }],\n        [Hammer.Tap, { event: 'doubletap', taps: 2, enable: false }],\n        // TODO - rename to 'tap' and 'singletap' in the next major release\n        [Hammer.Tap, { event: 'anytap', enable: false }],\n        [Hammer.Tap, { enable: false }]\n    ]\n    : null;\n// Recognize the following gestures even if a given recognizer succeeds\nexport const RECOGNIZER_COMPATIBLE_MAP = {\n    tripan: ['rotate', 'pinch', 'pan'],\n    rotate: ['pinch'],\n    pinch: ['pan'],\n    pan: ['press', 'doubletap', 'anytap', 'tap'],\n    doubletap: ['anytap'],\n    anytap: ['tap']\n};\n// Recognize the folling gestures only if a given recognizer fails\nexport const RECOGNIZER_FALLBACK_MAP = {\n    doubletap: ['tap']\n};\n/**\n * Only one set of basic input events will be fired by Hammer.js:\n * either pointer, touch, or mouse, depending on system support.\n * In order to enable an application to be agnostic of system support,\n * alias basic input events into \"classes\" of events: down, move, and up.\n * See `_onBasicInput()` for usage of these aliases.\n */\nexport const BASIC_EVENT_ALIASES = {\n    pointerdown: 'pointerdown',\n    pointermove: 'pointermove',\n    pointerup: 'pointerup',\n    touchstart: 'pointerdown',\n    touchmove: 'pointermove',\n    touchend: 'pointerup',\n    mousedown: 'pointerdown',\n    mousemove: 'pointermove',\n    mouseup: 'pointerup'\n};\nexport const INPUT_EVENT_TYPES = {\n    KEY_EVENTS: ['keydown', 'keyup'],\n    MOUSE_EVENTS: ['mousedown', 'mousemove', 'mouseup', 'mouseover', 'mouseout', 'mouseleave'],\n    WHEEL_EVENTS: [\n        // Chrome, Safari\n        'wheel',\n        // IE\n        'mousewheel'\n    ]\n};\n/**\n * \"Gestural\" events are those that have semantic meaning beyond the basic input event,\n * e.g. a click or tap is a sequence of `down` and `up` events with no `move` event in between.\n * Hammer.js handles these with its Recognizer system;\n * this block maps event names to the Recognizers required to detect the events.\n */\nexport const EVENT_RECOGNIZER_MAP = {\n    tap: 'tap',\n    anytap: 'anytap',\n    doubletap: 'doubletap',\n    press: 'press',\n    pinch: 'pinch',\n    pinchin: 'pinch',\n    pinchout: 'pinch',\n    pinchstart: 'pinch',\n    pinchmove: 'pinch',\n    pinchend: 'pinch',\n    pinchcancel: 'pinch',\n    rotate: 'rotate',\n    rotatestart: 'rotate',\n    rotatemove: 'rotate',\n    rotateend: 'rotate',\n    rotatecancel: 'rotate',\n    tripan: 'tripan',\n    tripanstart: 'tripan',\n    tripanmove: 'tripan',\n    tripanup: 'tripan',\n    tripandown: 'tripan',\n    tripanleft: 'tripan',\n    tripanright: 'tripan',\n    tripanend: 'tripan',\n    tripancancel: 'tripan',\n    pan: 'pan',\n    panstart: 'pan',\n    panmove: 'pan',\n    panup: 'pan',\n    pandown: 'pan',\n    panleft: 'pan',\n    panright: 'pan',\n    panend: 'pan',\n    pancancel: 'pan',\n    swipe: 'swipe',\n    swipeleft: 'swipe',\n    swiperight: 'swipe',\n    swipeup: 'swipe',\n    swipedown: 'swipe'\n};\n/**\n * Map gestural events typically provided by browsers\n * that are not reported in 'hammer.input' events\n * to corresponding Hammer.js gestures.\n */\nexport const GESTURE_EVENT_ALIASES = {\n    click: 'tap',\n    anyclick: 'anytap',\n    dblclick: 'doubletap',\n    mousedown: 'pointerdown',\n    mousemove: 'pointermove',\n    mouseup: 'pointerup',\n    mouseover: 'pointerover',\n    mouseout: 'pointerout',\n    mouseleave: 'pointerleave'\n};\n//# sourceMappingURL=constants.js.map"]},"metadata":{},"sourceType":"module"}