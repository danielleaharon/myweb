{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/\\u05E2\\u05D1\\u05D5\\u05D3\\u05D5\\u05EA \\u05DC\\u05D4\\u05D2\\u05E9\\u05D4/myweb/src/components/snakes/ui/game/Stats.js\";\nimport React from 'react';\nimport { Link, browserHistory } from 'react-router';\nimport { connect } from 'react-redux';\nimport Card from 'app/components/stats/Card';\nimport Sortable from 'react-sortablejs'; // same func used in Sidebar, if you plan on keeping this func here, place it in a hepler file or delete after testing.\n\nlet findPlayerByIndex = (state, index) => {\n  if (!Number.isInteger(index)) {\n    return {\n      name: 'Undefined'\n    };\n  }\n\n  let players = state.player.get('all').toArray();\n  return players[index];\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    players: state.player.get('all'),\n    stats: state.player.get('stats'),\n    winning_player: findPlayerByIndex(state, state.game.get('config').get('winner'))\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  gameSetStart: () => dispatch(Action.gameSetStart())\n});\n\nlet Stats = props => {\n  let findStatByPlayerId = id => {\n    return props.stats.find(function (obj) {\n      return obj.id == id;\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: \"screen\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"Game Stats\"), props.players.size > 0 && React.createElement(\"div\", {\n    className: \"card-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(Sortable, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, props.players.map(player => {\n    let stat = findStatByPlayerId(player.id);\n    return React.createElement(Card, {\n      key: 'card_' + player.id,\n      player: player,\n      stat: stat,\n      winner: props.winning_player,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    });\n  }))));\n};\n\nconst ConnectStats = connect(mapStateToProps, mapDispatchToProps)(Stats);\nexport default ConnectStats;","map":{"version":3,"sources":["/Users/user/Desktop/עבודות להגשה/myweb/src/components/snakes/ui/game/Stats.js"],"names":["React","Link","browserHistory","connect","Card","Sortable","findPlayerByIndex","state","index","Number","isInteger","name","players","player","get","toArray","mapStateToProps","ownProps","stats","winning_player","game","mapDispatchToProps","dispatch","gameSetStart","Action","Stats","props","findStatByPlayerId","id","find","obj","size","map","stat","ConnectStats"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,cAAf,QAAqC,cAArC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,IAAP,MAAiB,2BAAjB;AACA,OAAOC,QAAP,MAAqB,kBAArB,C,CAGA;;AACA,IAAIC,iBAAiB,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACzC,MAAI,CAAEC,MAAM,CAACC,SAAP,CAAkBF,KAAlB,CAAN,EAAkC;AACjC,WAAO;AAAEG,MAAAA,IAAI,EAAE;AAAR,KAAP;AACA;;AACD,MAAIC,OAAO,GAAGL,KAAK,CAACM,MAAN,CAAaC,GAAb,CAAiB,KAAjB,EAAwBC,OAAxB,EAAd;AACA,SAAOH,OAAO,CAACJ,KAAD,CAAd;AACA,CAND;;AASA,MAAMQ,eAAe,GAAG,CAAET,KAAF,EAASU,QAAT,KAAuB;AAC9C,SAAO;AACNL,IAAAA,OAAO,EAAEL,KAAK,CAACM,MAAN,CAAaC,GAAb,CAAiB,KAAjB,CADH;AAENI,IAAAA,KAAK,EAAEX,KAAK,CAACM,MAAN,CAAaC,GAAb,CAAiB,OAAjB,CAFD;AAGNK,IAAAA,cAAc,EAAEb,iBAAiB,CAAEC,KAAF,EAASA,KAAK,CAACa,IAAN,CAAWN,GAAX,CAAe,QAAf,EAAyBA,GAAzB,CAA6B,QAA7B,CAAT;AAH3B,GAAP;AAKA,CAND;;AAQA,MAAMO,kBAAkB,GAAGC,QAAQ,KAAK;AACvCC,EAAAA,YAAY,EAAE,MAAMD,QAAQ,CAAEE,MAAM,CAACD,YAAP,EAAF;AADW,CAAL,CAAnC;;AAMA,IAAIE,KAAK,GAAKC,KAAF,IAAa;AAExB,MAAIC,kBAAkB,GAAIC,EAAD,IAAQ;AAChC,WAAOF,KAAK,CAACR,KAAN,CAAYW,IAAZ,CAAiB,UAASC,GAAT,EAAc;AAAE,aAAOA,GAAG,CAACF,EAAJ,IAAUA,EAAjB;AAAsB,KAAvD,CAAP;AACA,GAFD;;AAKA,SACC;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADD,EAGGF,KAAK,CAACd,OAAN,CAAcmB,IAAd,GAAqB,CAArB,IACD;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEL,KAAK,CAACd,OAAN,CAAcoB,GAAd,CAAmBnB,MAAM,IAAI;AAC7B,QAAIoB,IAAI,GAAGN,kBAAkB,CAAEd,MAAM,CAACe,EAAT,CAA7B;AACA,WACC,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAG,UAAUf,MAAM,CAACe,EAA7B;AAAkC,MAAA,MAAM,EAAEf,MAA1C;AAAkD,MAAA,IAAI,EAAGoB,IAAzD;AAAgE,MAAA,MAAM,EAAEP,KAAK,CAACP,cAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD;AAGA,GALA,CADF,CADD,CAJF,CADD;AAqBA,CA5BD;;AAgCA,MAAMe,YAAY,GAAG/B,OAAO,CAC3Ba,eAD2B,EAE3BK,kBAF2B,CAAP,CAGnBI,KAHmB,CAArB;AAMA,eAAeS,YAAf","sourcesContent":["import React from 'react';\nimport { Link, browserHistory } from 'react-router';\nimport { connect } from 'react-redux';\nimport Card from 'app/components/stats/Card';\nimport Sortable from 'react-sortablejs';\n\n\n// same func used in Sidebar, if you plan on keeping this func here, place it in a hepler file or delete after testing.\nlet findPlayerByIndex = (state, index) => {\n\tif( ! Number.isInteger( index ) ) {\n\t\treturn { name: 'Undefined' };\n\t}\n\tlet players = state.player.get('all').toArray();\n\treturn players[index];\n}\n\n\nconst mapStateToProps = ( state, ownProps ) => {\n\treturn {\n\t\tplayers: state.player.get('all'),\n\t\tstats: state.player.get('stats'),\n\t\twinning_player: findPlayerByIndex( state, state.game.get('config').get('winner') ),\n\t}\n}\n\nconst mapDispatchToProps = dispatch => ({\n\tgameSetStart: () => dispatch( Action.gameSetStart() ),\n});\n\n\n\nlet Stats = ( props ) => {\n\n\tlet findStatByPlayerId = (id) => {\n\t\treturn props.stats.find(function(obj) { return obj.id == id; });\n\t}\n\n\n\treturn (\n\t\t<div className=\"screen\">\n\t\t\t<h2>Game Stats</h2>\n\n\t\t\t{ props.players.size > 0 &&\n\t\t\t\t<div className=\"card-container\">\n\t\t\t\t\t<Sortable>\n\t\t\t\t\t{ props.players.map( player => {\n\t\t\t\t\t\t\tlet stat = findStatByPlayerId( player.id );\n\t\t\t\t\t\t\treturn(\n\t\t\t\t\t\t\t\t<Card key={ 'card_' + player.id } player={player} stat={ stat } winner={props.winning_player} />\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t\t</Sortable>\n\t\t\t\t</div>\n\t\t\t}\n\n\t\t</div>\n\t)\n\n}\n\n\n\nconst ConnectStats = connect(\n\tmapStateToProps,\n\tmapDispatchToProps\n)(Stats)\n\n\nexport default ConnectStats;\n\n\n\n"]},"metadata":{},"sourceType":"module"}