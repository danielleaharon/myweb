{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { clamp } from '@math.gl/core';\nimport Controller from './controller';\nimport { OrbitState } from './orbit-controller';\nimport LinearInterpolator from '../transitions/linear-interpolator';\n\nclass OrthographicState extends OrbitState {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"zoomAxis\", void 0);\n\n    this.zoomAxis = props.zoomAxis || 'all';\n  }\n\n  _calculateNewZoom({\n    scale,\n    startZoom\n  }) {\n    const {\n      maxZoom,\n      minZoom\n    } = this.getViewportProps();\n\n    if (startZoom === undefined) {\n      startZoom = this.getViewportProps().zoom;\n    }\n\n    let deltaZoom = Math.log2(scale);\n\n    if (Array.isArray(startZoom)) {\n      let [newZoomX, newZoomY] = startZoom;\n\n      switch (this.zoomAxis) {\n        case 'X':\n          newZoomX = clamp(newZoomX + deltaZoom, minZoom, maxZoom);\n          break;\n\n        case 'Y':\n          newZoomY = clamp(newZoomY + deltaZoom, minZoom, maxZoom);\n          break;\n\n        default:\n          let z = Math.min(newZoomX + deltaZoom, newZoomY + deltaZoom);\n\n          if (z < minZoom) {\n            deltaZoom += minZoom - z;\n          }\n\n          z = Math.max(newZoomX + deltaZoom, newZoomY + deltaZoom);\n\n          if (z > maxZoom) {\n            deltaZoom += maxZoom - z;\n          }\n\n          newZoomX += deltaZoom;\n          newZoomY += deltaZoom;\n      }\n\n      return [newZoomX, newZoomY];\n    }\n\n    return clamp(startZoom + deltaZoom, minZoom, maxZoom);\n  }\n\n}\n\nexport default class OrthographicController extends Controller {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"ControllerState\", OrthographicState);\n\n    _defineProperty(this, \"transition\", {\n      transitionDuration: 300,\n      transitionInterpolator: new LinearInterpolator(['target', 'zoom'])\n    });\n\n    _defineProperty(this, \"dragMode\", 'pan');\n  }\n\n  _onPanRotate() {\n    return false;\n  }\n\n}","map":{"version":3,"sources":["../../../src/controllers/orthographic-controller.ts"],"names":["constructor","props","_calculateNewZoom","startZoom","minZoom","deltaZoom","Math","Array","newZoomX","clamp","newZoomY","z","maxZoom","transitionDuration","transitionInterpolator","_onPanRotate"],"mappings":";AAAA,SAAA,KAAA,QAAA,eAAA;AACA,OAAA,UAAA,MAAA,cAAA;AACA,SAAA,UAAA,QAAA,oBAAA;AACA,OAAA,kBAAA,MAAA,oCAAA;;AAEA,MAAA,iBAAA,SAAA,UAAA,CAA2C;AAGzCA,EAAAA,WAAW,CAAA,KAAA,EAAQ;AACjB,UAAA,KAAA;;AADiB,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EAAA,KAAA,CAAA,CAAA;;AAGjB,SAAA,QAAA,GAAgBC,KAAK,CAALA,QAAAA,IAAhB,KAAA;AACD;;AAEDC,EAAAA,iBAAiB,CAAC;AAAA,IAAA,KAAA;AAAQC,IAAAA;AAAR,GAAD,EAAqB;AACpC,UAAM;AAAA,MAAA,OAAA;AAAUC,MAAAA;AAAV,QAAqB,KAA3B,gBAA2B,EAA3B;;AACA,QAAID,SAAS,KAAb,SAAA,EAA6B;AAC3BA,MAAAA,SAAS,GAAG,KAAA,gBAAA,GAAZA,IAAAA;AACD;;AACD,QAAIE,SAAS,GAAGC,IAAI,CAAJA,IAAAA,CAAhB,KAAgBA,CAAhB;;AACA,QAAIC,KAAK,CAALA,OAAAA,CAAJ,SAAIA,CAAJ,EAA8B;AAC5B,UAAI,CAAA,QAAA,EAAA,QAAA,IAAJ,SAAA;;AACA,cAAQ,KAAR,QAAA;AACE,aAAA,GAAA;AAEEC,UAAAA,QAAQ,GAAGC,KAAK,CAACD,QAAQ,GAAT,SAAA,EAAA,OAAA,EAAhBA,OAAgB,CAAhBA;AACA;;AACF,aAAA,GAAA;AAEEE,UAAAA,QAAQ,GAAGD,KAAK,CAACC,QAAQ,GAAT,SAAA,EAAA,OAAA,EAAhBA,OAAgB,CAAhBA;AACA;;AACF;AAEE,cAAIC,CAAC,GAAGL,IAAI,CAAJA,GAAAA,CAASE,QAAQ,GAAjBF,SAAAA,EAA+BI,QAAQ,GAA/C,SAAQJ,CAAR;;AACA,cAAIK,CAAC,GAAL,OAAA,EAAiB;AACfN,YAAAA,SAAS,IAAID,OAAO,GAApBC,CAAAA;AACD;;AACDM,UAAAA,CAAC,GAAGL,IAAI,CAAJA,GAAAA,CAASE,QAAQ,GAAjBF,SAAAA,EAA+BI,QAAQ,GAA3CC,SAAIL,CAAJK;;AACA,cAAIA,CAAC,GAAL,OAAA,EAAiB;AACfN,YAAAA,SAAS,IAAIO,OAAO,GAApBP,CAAAA;AACD;;AACDG,UAAAA,QAAQ,IAARA,SAAAA;AACAE,UAAAA,QAAQ,IAARA,SAAAA;AApBJ;;AAsBA,aAAO,CAAA,QAAA,EAAP,QAAO,CAAP;AACD;;AAID,WAAOD,KAAK,CAACN,SAAS,GAAV,SAAA,EAAA,OAAA,EAAZ,OAAY,CAAZ;AACD;;AA7CwC;;AAgD3C,eAAe,MAAA,sBAAA,SAAA,UAAA,CAA4D;AAAA,EAAA,WAAA,CAAA,GAAA,IAAA,EAAA;AAAA,UAAA,GAAA,IAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,iBAAA,EAAA,iBAAA,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,YAAA,EAE5D;AACXU,MAAAA,kBAAkB,EADP,GAAA;AAEXC,MAAAA,sBAAsB,EAAE,IAAA,kBAAA,CAAuB,CAAA,QAAA,EAAvB,MAAuB,CAAvB;AAFb,KAF4D,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EAAA,KAAA,CAAA;AAAA;;AAQzEC,EAAAA,YAAY,GAAG;AAEb,WAAA,KAAA;AACD;;AAXwE","sourcesContent":["import {clamp} from '@math.gl/core';\nimport Controller from './controller';\nimport {OrbitState} from './orbit-controller';\nimport LinearInterpolator from '../transitions/linear-interpolator';\n\nclass OrthographicState extends OrbitState {\n  zoomAxis: 'X' | 'Y' | 'all';\n\n  constructor(props) {\n    super(props);\n\n    this.zoomAxis = props.zoomAxis || 'all';\n  }\n\n  _calculateNewZoom({scale, startZoom}) {\n    const {maxZoom, minZoom} = this.getViewportProps();\n    if (startZoom === undefined) {\n      startZoom = this.getViewportProps().zoom;\n    }\n    let deltaZoom = Math.log2(scale);\n    if (Array.isArray(startZoom)) {\n      let [newZoomX, newZoomY] = startZoom;\n      switch (this.zoomAxis) {\n        case 'X':\n          // Scale x only\n          newZoomX = clamp(newZoomX + deltaZoom, minZoom, maxZoom);\n          break;\n        case 'Y':\n          // Scale y only\n          newZoomY = clamp(newZoomY + deltaZoom, minZoom, maxZoom);\n          break;\n        default:\n          // Lock aspect ratio\n          let z = Math.min(newZoomX + deltaZoom, newZoomY + deltaZoom);\n          if (z < minZoom) {\n            deltaZoom += minZoom - z;\n          }\n          z = Math.max(newZoomX + deltaZoom, newZoomY + deltaZoom);\n          if (z > maxZoom) {\n            deltaZoom += maxZoom - z;\n          }\n          newZoomX += deltaZoom;\n          newZoomY += deltaZoom;\n      }\n      return [newZoomX, newZoomY];\n    }\n    // Ignore `zoomAxis`\n    // `LinearTransitionInterpolator` does not support interpolation between a number and an array\n    // So if zoom is a number (legacy use case), new zoom still has to be a number\n    return clamp(startZoom + deltaZoom, minZoom, maxZoom);\n  }\n}\n\nexport default class OrthographicController extends Controller<OrbitState> {\n  ControllerState = OrthographicState;\n  transition = {\n    transitionDuration: 300,\n    transitionInterpolator: new LinearInterpolator(['target', 'zoom'])\n  };\n  dragMode: 'pan' | 'rotate' = 'pan';\n\n  _onPanRotate() {\n    // No rotation in orthographic view\n    return false;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}