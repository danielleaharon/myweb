{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { deepEqual } from '../utils/deep-equal';\nimport log from '../utils/log';\nimport { flatten } from '../utils/flatten';\nexport default class ViewManager {\n  constructor(props) {\n    _defineProperty(this, \"width\", void 0);\n\n    _defineProperty(this, \"height\", void 0);\n\n    _defineProperty(this, \"views\", void 0);\n\n    _defineProperty(this, \"viewState\", void 0);\n\n    _defineProperty(this, \"controllers\", void 0);\n\n    _defineProperty(this, \"timeline\", void 0);\n\n    _defineProperty(this, \"_viewports\", void 0);\n\n    _defineProperty(this, \"_viewportMap\", void 0);\n\n    _defineProperty(this, \"_isUpdating\", void 0);\n\n    _defineProperty(this, \"_needsRedraw\", void 0);\n\n    _defineProperty(this, \"_needsUpdate\", void 0);\n\n    _defineProperty(this, \"_eventManager\", void 0);\n\n    _defineProperty(this, \"_eventCallbacks\", void 0);\n\n    this.views = [];\n    this.width = 100;\n    this.height = 100;\n    this.viewState = {};\n    this.controllers = {};\n    this.timeline = props.timeline;\n    this._viewports = [];\n    this._viewportMap = {};\n    this._isUpdating = false;\n    this._needsRedraw = 'First render';\n    this._needsUpdate = 'Initialize';\n    this._eventManager = props.eventManager;\n    this._eventCallbacks = {\n      onViewStateChange: props.onViewStateChange,\n      onInteractionStateChange: props.onInteractionStateChange\n    };\n    Object.seal(this);\n    this.setProps(props);\n  }\n\n  finalize() {\n    for (const key in this.controllers) {\n      const controller = this.controllers[key];\n\n      if (controller) {\n        controller.finalize();\n      }\n    }\n\n    this.controllers = {};\n  }\n\n  needsRedraw(opts = {\n    clearRedrawFlags: false\n  }) {\n    const redraw = this._needsRedraw;\n\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n\n    return redraw;\n  }\n\n  setNeedsUpdate(reason) {\n    this._needsUpdate = this._needsUpdate || reason;\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  updateViewStates() {\n    for (const viewId in this.controllers) {\n      const controller = this.controllers[viewId];\n\n      if (controller) {\n        controller.updateTransition();\n      }\n    }\n  }\n\n  getViewports(rect) {\n    if (rect) {\n      return this._viewports.filter(viewport => viewport.containsPixel(rect));\n    }\n\n    return this._viewports;\n  }\n\n  getViews() {\n    const viewMap = {};\n    this.views.forEach(view => {\n      viewMap[view.id] = view;\n    });\n    return viewMap;\n  }\n\n  getView(viewId) {\n    return this.views.find(view => view.id === viewId);\n  }\n\n  getViewState(viewOrViewId) {\n    const view = typeof viewOrViewId === 'string' ? this.getView(viewOrViewId) : viewOrViewId;\n    const viewState = view && this.viewState[view.getViewStateId()] || this.viewState;\n    return view ? view.filterViewState(viewState) : viewState;\n  }\n\n  getViewport(viewId) {\n    return this._viewportMap[viewId];\n  }\n\n  unproject(xyz, opts) {\n    const viewports = this.getViewports();\n    const pixel = {\n      x: xyz[0],\n      y: xyz[1]\n    };\n\n    for (let i = viewports.length - 1; i >= 0; --i) {\n      const viewport = viewports[i];\n\n      if (viewport.containsPixel(pixel)) {\n        const p = xyz.slice();\n        p[0] -= viewport.x;\n        p[1] -= viewport.y;\n        return viewport.unproject(p, opts);\n      }\n    }\n\n    return null;\n  }\n\n  setProps(props) {\n    if (props.views) {\n      this._setViews(props.views);\n    }\n\n    if (props.viewState) {\n      this._setViewState(props.viewState);\n    }\n\n    if ('width' in props || 'height' in props) {\n      this._setSize(props.width, props.height);\n    }\n\n    if (!this._isUpdating) {\n      this._update();\n    }\n  }\n\n  _update() {\n    this._isUpdating = true;\n\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n\n      this._rebuildViewports();\n    }\n\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n\n      this._rebuildViewports();\n    }\n\n    this._isUpdating = false;\n  }\n\n  _setSize(width, height) {\n    if (width !== this.width || height !== this.height) {\n      this.width = width;\n      this.height = height;\n      this.setNeedsUpdate('Size changed');\n    }\n  }\n\n  _setViews(views) {\n    views = flatten(views, Boolean);\n\n    const viewsChanged = this._diffViews(views, this.views);\n\n    if (viewsChanged) {\n      this.setNeedsUpdate('views changed');\n    }\n\n    this.views = views;\n  }\n\n  _setViewState(viewState) {\n    if (viewState) {\n      const viewStateChanged = !deepEqual(viewState, this.viewState);\n\n      if (viewStateChanged) {\n        this.setNeedsUpdate('viewState changed');\n      }\n\n      this.viewState = viewState;\n    } else {\n      log.warn('missing `viewState` or `initialViewState`')();\n    }\n  }\n\n  _onViewStateChange(viewId, event) {\n    if (this._eventCallbacks.onViewStateChange) {\n      this._eventCallbacks.onViewStateChange({ ...event,\n        viewId\n      });\n    }\n  }\n\n  _createController(view, props) {\n    const Controller = props.type;\n    const controller = new Controller({\n      timeline: this.timeline,\n      eventManager: this._eventManager,\n      onViewStateChange: this._onViewStateChange.bind(this, props.id),\n      onStateChange: this._eventCallbacks.onInteractionStateChange,\n      makeViewport: viewState => {\n        var _this$getView;\n\n        return (_this$getView = this.getView(view.id)) === null || _this$getView === void 0 ? void 0 : _this$getView.makeViewport({\n          viewState,\n          width: this.width,\n          height: this.height\n        });\n      }\n    });\n    return controller;\n  }\n\n  _updateController(view, viewState, viewport, controller) {\n    const controllerProps = view.controller;\n\n    if (controllerProps) {\n      const resolvedProps = { ...viewState,\n        ...controllerProps,\n        id: view.id,\n        x: viewport.x,\n        y: viewport.y,\n        width: viewport.width,\n        height: viewport.height\n      };\n\n      if (!controller) {\n        controller = this._createController(view, resolvedProps);\n      }\n\n      if (controller) {\n        controller.setProps(resolvedProps);\n      }\n\n      return controller;\n    }\n\n    return null;\n  }\n\n  _rebuildViewports() {\n    const {\n      views\n    } = this;\n    const oldControllers = this.controllers;\n    this._viewports = [];\n    this.controllers = {};\n    let invalidateControllers = false;\n\n    for (let i = views.length; i--;) {\n      const view = views[i];\n      const viewState = this.getViewState(view);\n      const viewport = view.makeViewport({\n        viewState,\n        width: this.width,\n        height: this.height\n      });\n      let oldController = oldControllers[view.id];\n      const hasController = Boolean(view.controller);\n\n      if (hasController && !oldController) {\n        invalidateControllers = true;\n      }\n\n      if ((invalidateControllers || !hasController) && oldController) {\n        oldController.finalize();\n        oldController = null;\n      }\n\n      this.controllers[view.id] = this._updateController(view, viewState, viewport, oldController);\n\n      this._viewports.unshift(viewport);\n    }\n\n    for (const id in oldControllers) {\n      const oldController = oldControllers[id];\n\n      if (oldController && !this.controllers[id]) {\n        oldController.finalize();\n      }\n    }\n\n    this._buildViewportMap();\n  }\n\n  _buildViewportMap() {\n    this._viewportMap = {};\n\n    this._viewports.forEach(viewport => {\n      if (viewport.id) {\n        this._viewportMap[viewport.id] = this._viewportMap[viewport.id] || viewport;\n      }\n    });\n  }\n\n  _diffViews(newViews, oldViews) {\n    if (newViews.length !== oldViews.length) {\n      return true;\n    }\n\n    return newViews.some((_, i) => !newViews[i].equals(oldViews[i]));\n  }\n\n}","map":{"version":3,"sources":["../../../src/lib/view-manager.ts"],"names":["constructor","props","onViewStateChange","onInteractionStateChange","Object","finalize","controller","needsRedraw","opts","clearRedrawFlags","redraw","setNeedsUpdate","updateViewStates","getViewports","viewport","getViews","viewMap","view","getView","getViewState","viewState","getViewport","unproject","viewports","pixel","x","xyz","y","i","p","setProps","_update","_setSize","width","height","_setViews","views","flatten","viewsChanged","_setViewState","viewStateChanged","deepEqual","log","_onViewStateChange","viewId","_createController","Controller","timeline","eventManager","onStateChange","makeViewport","_updateController","controllerProps","resolvedProps","id","_rebuildViewports","oldControllers","invalidateControllers","oldController","hasController","Boolean","_buildViewportMap","_diffViews","newViews","oldViews"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {deepEqual} from '../utils/deep-equal';\nimport log from '../utils/log';\nimport {flatten} from '../utils/flatten';\n\nimport type Controller from '../controllers/controller';\nimport type {ViewStateChangeParameters, InteractionState} from '../controllers/controller';\nimport type Viewport from '../viewports/viewport';\nimport type View from '../views/view';\nimport type {Timeline} from '@luma.gl/engine';\nimport type {EventManager} from 'mjolnir.js';\nimport type {ConstructorOf} from '../types/types';\n\nexport default class ViewManager {\n  width: number;\n  height: number;\n  views: View[];\n  viewState: any;\n  controllers: {[viewId: string]: Controller<any> | null};\n  timeline: Timeline;\n\n  private _viewports: Viewport[];\n  private _viewportMap: {[viewId: string]: Viewport};\n  private _isUpdating: boolean;\n  private _needsRedraw: string | false;\n  private _needsUpdate: string | false;\n  private _eventManager: EventManager;\n  private _eventCallbacks: {\n    onViewStateChange?: (params: ViewStateChangeParameters & {viewId: string}) => void;\n    onInteractionStateChange?: (state: InteractionState) => void;\n  };\n\n  constructor(props: {\n    // Initial options\n    timeline: Timeline;\n    eventManager: EventManager;\n    onViewStateChange?: (params: ViewStateChangeParameters & {viewId: string}) => void;\n    onInteractionStateChange?: (state: InteractionState) => void;\n    // Props\n    views?: View[];\n    viewState?: any;\n    width?: number;\n    height?: number;\n  }) {\n    // List of view descriptors, gets re-evaluated when width/height changes\n    this.views = [];\n    this.width = 100;\n    this.height = 100;\n    this.viewState = {};\n    this.controllers = {};\n    this.timeline = props.timeline;\n\n    this._viewports = []; // Generated viewports\n    this._viewportMap = {};\n    this._isUpdating = false;\n    this._needsRedraw = 'First render';\n    this._needsUpdate = 'Initialize';\n\n    this._eventManager = props.eventManager;\n    this._eventCallbacks = {\n      onViewStateChange: props.onViewStateChange,\n      onInteractionStateChange: props.onInteractionStateChange\n    };\n\n    Object.seal(this);\n\n    // Init with default map viewport\n    this.setProps(props);\n  }\n\n  /** Remove all resources and event listeners */\n  finalize(): void {\n    for (const key in this.controllers) {\n      const controller = this.controllers[key];\n      if (controller) {\n        controller.finalize();\n      }\n    }\n    this.controllers = {};\n  }\n\n  /** Check if a redraw is needed */\n  needsRedraw(\n    opts: {\n      /** Reset redraw flags to false */\n      clearRedrawFlags?: boolean;\n    } = {clearRedrawFlags: false}\n  ): string | false {\n    const redraw = this._needsRedraw;\n    if (opts.clearRedrawFlags) {\n      this._needsRedraw = false;\n    }\n    return redraw;\n  }\n\n  /** Mark the manager as dirty. Will rebuild all viewports and update controllers. */\n  setNeedsUpdate(reason: string): void {\n    this._needsUpdate = this._needsUpdate || reason;\n    this._needsRedraw = this._needsRedraw || reason;\n  }\n\n  /** Checks each viewport for transition updates */\n  updateViewStates(): void {\n    for (const viewId in this.controllers) {\n      const controller = this.controllers[viewId];\n      if (controller) {\n        controller.updateTransition();\n      }\n    }\n  }\n\n  /** Get a set of viewports for a given width and height\n   * TODO - Intention is for deck.gl to autodeduce width and height and drop the need for props\n   * @param rect (object, optional) - filter the viewports\n   *   + not provided - return all viewports\n   *   + {x, y} - only return viewports that contain this pixel\n   *   + {x, y, width, height} - only return viewports that overlap with this rectangle\n   */\n  getViewports(rect?: {x: number; y: number; width?: number; height?: number}): Viewport[] {\n    if (rect) {\n      return this._viewports.filter(viewport => viewport.containsPixel(rect));\n    }\n    return this._viewports;\n  }\n\n  /** Get a map of all views */\n  getViews(): {[viewId: string]: View} {\n    const viewMap = {};\n    this.views.forEach(view => {\n      viewMap[view.id] = view;\n    });\n    return viewMap;\n  }\n\n  /** Resolves a viewId string to a View */\n  getView(viewId: string): View | undefined {\n    return this.views.find(view => view.id === viewId);\n  }\n\n  /** Returns the viewState for a specific viewId. Matches the viewState by\n    1. view.viewStateId\n    2. view.id\n    3. root viewState\n    then applies the view's filter if any */\n  getViewState(viewOrViewId: string | View): any {\n    const view: View | undefined =\n      typeof viewOrViewId === 'string' ? this.getView(viewOrViewId) : viewOrViewId;\n    // Backward compatibility: view state for single view\n    const viewState = (view && this.viewState[view.getViewStateId()]) || this.viewState;\n    return view ? view.filterViewState(viewState) : viewState;\n  }\n\n  getViewport(viewId: string): Viewport | undefined {\n    return this._viewportMap[viewId];\n  }\n\n  /**\n   * Unproject pixel coordinates on screen onto world coordinates,\n   * (possibly [lon, lat]) on map.\n   * - [x, y] => [lng, lat]\n   * - [x, y, z] => [lng, lat, Z]\n   * @param {Array} xyz -\n   * @param {Object} opts - options\n   * @param {Object} opts.topLeft=true - Whether origin is top left\n   * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]\n   */\n  unproject(xyz: number[], opts?: {topLeft?: boolean}): number[] | null {\n    const viewports = this.getViewports();\n    const pixel = {x: xyz[0], y: xyz[1]};\n    for (let i = viewports.length - 1; i >= 0; --i) {\n      const viewport = viewports[i];\n      if (viewport.containsPixel(pixel)) {\n        const p = xyz.slice();\n        p[0] -= viewport.x;\n        p[1] -= viewport.y;\n        return viewport.unproject(p, opts);\n      }\n    }\n    return null;\n  }\n\n  /** Update the manager with new Deck props */\n  setProps(props: {views?: View[]; viewState?: any; width?: number; height?: number}) {\n    if (props.views) {\n      this._setViews(props.views);\n    }\n\n    if (props.viewState) {\n      this._setViewState(props.viewState);\n    }\n\n    if ('width' in props || 'height' in props) {\n      this._setSize(props.width as number, props.height as number);\n    }\n\n    // Important: avoid invoking _update() inside itself\n    // Nested updates result in unexpected side effects inside _rebuildViewports()\n    // when using auto control in pure-js\n    if (!this._isUpdating) {\n      this._update();\n    }\n  }\n\n  //\n  // PRIVATE METHODS\n  //\n\n  private _update(): void {\n    this._isUpdating = true;\n\n    // Only rebuild viewports if the update flag is set\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n      this._rebuildViewports();\n    }\n\n    // If viewport transition(s) are triggered during viewports update, controller(s)\n    // will immediately call `onViewStateChange` which calls `viewManager.setProps` again.\n    if (this._needsUpdate) {\n      this._needsUpdate = false;\n      this._rebuildViewports();\n    }\n\n    this._isUpdating = false;\n  }\n\n  private _setSize(width: number, height: number): void {\n    if (width !== this.width || height !== this.height) {\n      this.width = width;\n      this.height = height;\n      this.setNeedsUpdate('Size changed');\n    }\n  }\n\n  // Update the view descriptor list and set change flag if needed\n  // Does not actually rebuild the `Viewport`s until `getViewports` is called\n  private _setViews(views: View[]): void {\n    views = flatten(views, Boolean);\n\n    const viewsChanged = this._diffViews(views, this.views);\n    if (viewsChanged) {\n      this.setNeedsUpdate('views changed');\n    }\n\n    this.views = views;\n  }\n\n  private _setViewState(viewState: any): void {\n    if (viewState) {\n      const viewStateChanged = !deepEqual(viewState, this.viewState);\n\n      if (viewStateChanged) {\n        this.setNeedsUpdate('viewState changed');\n      }\n\n      this.viewState = viewState;\n    } else {\n      log.warn('missing `viewState` or `initialViewState`')();\n    }\n  }\n\n  private _onViewStateChange(viewId: string, event: ViewStateChangeParameters) {\n    if (this._eventCallbacks.onViewStateChange) {\n      this._eventCallbacks.onViewStateChange({...event, viewId});\n    }\n  }\n\n  private _createController(\n    view: View,\n    props: {id: string; type: ConstructorOf<Controller<any>>}\n  ): Controller<any> {\n    const Controller = props.type;\n\n    const controller = new Controller({\n      timeline: this.timeline,\n      eventManager: this._eventManager,\n      // Set an internal callback that calls the prop callback if provided\n      onViewStateChange: this._onViewStateChange.bind(this, props.id),\n      onStateChange: this._eventCallbacks.onInteractionStateChange,\n      makeViewport: viewState =>\n        this.getView(view.id)?.makeViewport({\n          viewState,\n          width: this.width,\n          height: this.height\n        })\n    });\n\n    return controller;\n  }\n\n  private _updateController(\n    view: View,\n    viewState: any,\n    viewport: Viewport,\n    controller?: Controller<any> | null\n  ): Controller<any> | null {\n    const controllerProps = view.controller;\n    if (controllerProps) {\n      const resolvedProps = {\n        ...viewState,\n        ...controllerProps,\n        id: view.id,\n        x: viewport.x,\n        y: viewport.y,\n        width: viewport.width,\n        height: viewport.height\n      };\n\n      // TODO - check if view / controller type has changed, and replace the controller\n      if (!controller) {\n        controller = this._createController(view, resolvedProps);\n      }\n      if (controller) {\n        controller.setProps(resolvedProps);\n      }\n      return controller;\n    }\n    return null;\n  }\n\n  // Rebuilds viewports from descriptors towards a certain window size\n  private _rebuildViewports(): void {\n    const {views} = this;\n\n    const oldControllers = this.controllers;\n    this._viewports = [];\n    this.controllers = {};\n\n    let invalidateControllers = false;\n    // Create controllers in reverse order, so that views on top receive events first\n    for (let i = views.length; i--; ) {\n      const view = views[i];\n      const viewState = this.getViewState(view);\n      const viewport = view.makeViewport({viewState, width: this.width, height: this.height});\n\n      let oldController = oldControllers[view.id];\n      const hasController = Boolean(view.controller);\n      if (hasController && !oldController) {\n        // When a new controller is added, invalidate all controllers below it so that\n        // events are registered in the correct order\n        invalidateControllers = true;\n      }\n      if ((invalidateControllers || !hasController) && oldController) {\n        // Remove and reattach invalidated controller\n        oldController.finalize();\n        oldController = null;\n      }\n\n      // Update the controller\n      this.controllers[view.id] = this._updateController(view, viewState, viewport, oldController);\n\n      this._viewports.unshift(viewport);\n    }\n\n    // Remove unused controllers\n    for (const id in oldControllers) {\n      const oldController = oldControllers[id];\n      if (oldController && !this.controllers[id]) {\n        oldController.finalize();\n      }\n    }\n\n    this._buildViewportMap();\n  }\n\n  _buildViewportMap(): void {\n    // Build a view id to view index\n    this._viewportMap = {};\n    this._viewports.forEach(viewport => {\n      if (viewport.id) {\n        // TODO - issue warning if multiple viewports use same id\n        this._viewportMap[viewport.id] = this._viewportMap[viewport.id] || viewport;\n      }\n    });\n  }\n\n  // Check if viewport array has changed, returns true if any change\n  // Note that descriptors can be the same\n  _diffViews(newViews: View[], oldViews: View[]): boolean {\n    if (newViews.length !== oldViews.length) {\n      return true;\n    }\n\n    return newViews.some((_, i) => !newViews[i].equals(oldViews[i]));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}