{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Layer, project32, picking, UNIT } from '@deck.gl/core';\nimport { Model, Geometry } from '@luma.gl/core';\nimport vs from './text-background-layer-vertex.glsl';\nimport fs from './text-background-layer-fragment.glsl';\nconst defaultProps = {\n  billboard: true,\n  sizeScale: 1,\n  sizeUnits: 'pixels',\n  sizeMinPixels: 0,\n  sizeMaxPixels: Number.MAX_SAFE_INTEGER,\n  padding: {\n    type: 'array',\n    value: [0, 0, 0, 0]\n  },\n  getPosition: {\n    type: 'accessor',\n    value: x => x.position\n  },\n  getSize: {\n    type: 'accessor',\n    value: 1\n  },\n  getAngle: {\n    type: 'accessor',\n    value: 0\n  },\n  getPixelOffset: {\n    type: 'accessor',\n    value: [0, 0]\n  },\n  getBoundingRect: {\n    type: 'accessor',\n    value: [0, 0, 0, 0]\n  },\n  getFillColor: {\n    type: 'accessor',\n    value: [0, 0, 0, 255]\n  },\n  getLineColor: {\n    type: 'accessor',\n    value: [0, 0, 0, 255]\n  },\n  getLineWidth: {\n    type: 'accessor',\n    value: 1\n  }\n};\nexport default class TextBackgroundLayer extends Layer {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", void 0);\n  }\n\n  getShaders() {\n    return super.getShaders({\n      vs,\n      fs,\n      modules: [project32, picking]\n    });\n  }\n\n  initializeState() {\n    this.getAttributeManager().addInstanced({\n      instancePositions: {\n        size: 3,\n        type: 5130,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle'\n      },\n      instanceRects: {\n        size: 4,\n        accessor: 'getBoundingRect'\n      },\n      instancePixelOffsets: {\n        size: 2,\n        transition: true,\n        accessor: 'getPixelOffset'\n      },\n      instanceFillColors: {\n        size: 4,\n        transition: true,\n        normalized: true,\n        type: 5121,\n        accessor: 'getFillColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineColors: {\n        size: 4,\n        transition: true,\n        normalized: true,\n        type: 5121,\n        accessor: 'getLineColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getLineWidth',\n        defaultValue: 1\n      }\n    });\n  }\n\n  updateState(params) {\n    super.updateState(params);\n    const {\n      changeFlags\n    } = params;\n\n    if (changeFlags.extensionsChanged) {\n      var _this$state$model;\n\n      const {\n        gl\n      } = this.context;\n      (_this$state$model = this.state.model) === null || _this$state$model === void 0 ? void 0 : _this$state$model.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n\n  draw({\n    uniforms\n  }) {\n    const {\n      billboard,\n      sizeScale,\n      sizeUnits,\n      sizeMinPixels,\n      sizeMaxPixels,\n      getLineWidth\n    } = this.props;\n    let {\n      padding\n    } = this.props;\n\n    if (padding.length < 4) {\n      padding = [padding[0], padding[1], padding[0], padding[1]];\n    }\n\n    this.state.model.setUniforms(uniforms).setUniforms({\n      billboard,\n      stroked: Boolean(getLineWidth),\n      padding,\n      sizeUnits: UNIT[sizeUnits],\n      sizeScale,\n      sizeMinPixels,\n      sizeMaxPixels\n    }).draw();\n  }\n\n  _getModel(gl) {\n    const positions = [0, 0, 1, 0, 1, 1, 0, 1];\n    return new Model(gl, { ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: 6,\n        vertexCount: 4,\n        attributes: {\n          positions: {\n            size: 2,\n            value: new Float32Array(positions)\n          }\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n}\n\n_defineProperty(TextBackgroundLayer, \"defaultProps\", defaultProps);\n\n_defineProperty(TextBackgroundLayer, \"layerName\", 'TextBackgroundLayer');","map":{"version":3,"sources":["../../../../src/text-layer/text-background-layer/text-background-layer.ts"],"names":["defaultProps","billboard","sizeScale","sizeUnits","sizeMinPixels","sizeMaxPixels","Number","padding","type","value","getPosition","x","position","getSize","getAngle","getPixelOffset","getBoundingRect","getFillColor","getLineColor","getLineWidth","TextBackgroundLayer","getShaders","modules","initializeState","instancePositions","size","fp64","transition","accessor","instanceSizes","defaultValue","instanceAngles","instanceRects","instancePixelOffsets","instanceFillColors","normalized","instanceLineColors","instanceLineWidths","updateState","changeFlags","gl","draw","uniforms","stroked","Boolean","UNIT","_getModel","positions","id","geometry","drawMode","vertexCount","attributes","isInstanced"],"mappings":"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","sourcesContent":["import {Layer, project32, picking, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './text-background-layer-vertex.glsl';\nimport fs from './text-background-layer-fragment.glsl';\n\nimport type {\n  LayerProps,\n  Accessor,\n  Unit,\n  Position,\n  Color,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\n\ntype _TextBackgroundLayerProps<DataT> = {\n  billboard?: boolean;\n  sizeScale?: number;\n  sizeUnits?: Unit;\n  sizeMinPixels?: number;\n  sizeMaxPixels?: number;\n\n  padding?: [number, number] | [number, number, number, number];\n\n  getPosition?: Accessor<DataT, Position>;\n  getSize?: Accessor<DataT, number>;\n  getAngle?: Accessor<DataT, number>;\n  getPixelOffset?: Accessor<DataT, [number, number]>;\n  getBoundingRect?: Accessor<DataT, [number, number, number, number]>;\n  getFillColor?: Accessor<DataT, Color>;\n  getLineColor?: Accessor<DataT, Color>;\n  getLineWidth?: Accessor<DataT, number>;\n};\n\nexport type TextBackgroundLayerProps<DataT = any> = _TextBackgroundLayerProps<DataT> &\n  LayerProps<DataT>;\n\nconst defaultProps: DefaultProps<TextBackgroundLayerProps> = {\n  billboard: true,\n  sizeScale: 1,\n  sizeUnits: 'pixels',\n  sizeMinPixels: 0,\n  sizeMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  padding: {type: 'array', value: [0, 0, 0, 0]},\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getSize: {type: 'accessor', value: 1},\n  getAngle: {type: 'accessor', value: 0},\n  getPixelOffset: {type: 'accessor', value: [0, 0]},\n  getBoundingRect: {type: 'accessor', value: [0, 0, 0, 0]},\n  getFillColor: {type: 'accessor', value: [0, 0, 0, 255]},\n  getLineColor: {type: 'accessor', value: [0, 0, 0, 255]},\n  getLineWidth: {type: 'accessor', value: 1}\n};\n\nexport default class TextBackgroundLayer<DataT = any, ExtraPropsT = {}> extends Layer<\n  ExtraPropsT & Required<_TextBackgroundLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'TextBackgroundLayer';\n\n  state!: {\n    model: Model;\n  };\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    this.getAttributeManager()!.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle'\n      },\n      instanceRects: {\n        size: 4,\n        accessor: 'getBoundingRect'\n      },\n      instancePixelOffsets: {\n        size: 2,\n        transition: true,\n        accessor: 'getPixelOffset'\n      },\n      instanceFillColors: {\n        size: 4,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getFillColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineColors: {\n        size: 4,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getLineColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getLineWidth',\n        defaultValue: 1\n      }\n    });\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n    const {changeFlags} = params;\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager()!.invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {billboard, sizeScale, sizeUnits, sizeMinPixels, sizeMaxPixels, getLineWidth} =\n      this.props;\n    let {padding} = this.props;\n\n    if (padding.length < 4) {\n      padding = [padding[0], padding[1], padding[0], padding[1]];\n    }\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        billboard,\n        stroked: Boolean(getLineWidth),\n        padding,\n        sizeUnits: UNIT[sizeUnits],\n        sizeScale,\n        sizeMinPixels,\n        sizeMaxPixels\n      })\n      .draw();\n  }\n\n  protected _getModel(gl: WebGLRenderingContext): Model {\n    // a square that minimally cover the unit circle\n    const positions = [0, 0, 1, 0, 1, 1, 0, 1];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        vertexCount: 4,\n        attributes: {\n          positions: {size: 2, value: new Float32Array(positions)}\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}