{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport LayersPass from './layers-pass';\nimport { withParameters } from '@luma.gl/core';\nimport { OPERATION } from '../lib/constants';\nimport log from '../utils/log';\nconst PICKING_PARAMETERS = {\n  blendFunc: [1, 0, 32771, 0],\n  blendEquation: 32774\n};\nexport default class PickLayersPass extends LayersPass {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"pickZ\", void 0);\n\n    _defineProperty(this, \"_colors\", null);\n  }\n\n  render(props) {\n    if (props.pickingFBO) {\n      return this._drawPickingBuffer(props);\n    }\n\n    return super.render(props);\n  }\n\n  _drawPickingBuffer({\n    layers,\n    layerFilter,\n    views,\n    viewports,\n    onViewportActive,\n    pickingFBO,\n    deviceRect: {\n      x,\n      y,\n      width,\n      height\n    },\n    cullRect,\n    effects,\n    pass = 'picking',\n    pickZ\n  }) {\n    const gl = this.gl;\n    this.pickZ = pickZ;\n    const encodedColors = pickZ ? null : {\n      byLayer: new Map(),\n      byAlpha: []\n    };\n    this._colors = encodedColors;\n    const renderStatus = withParameters(gl, {\n      scissorTest: true,\n      scissor: [x, y, width, height],\n      clearColor: [0, 0, 0, 0],\n      depthMask: true,\n      depthTest: true,\n      depthRange: [0, 1],\n      colorMask: [true, true, true, true],\n      ...PICKING_PARAMETERS,\n      blend: !pickZ\n    }, () => super.render({\n      target: pickingFBO,\n      layers,\n      layerFilter,\n      views,\n      viewports,\n      onViewportActive,\n      cullRect,\n      effects: effects === null || effects === void 0 ? void 0 : effects.filter(e => e.useInPicking),\n      pass\n    }));\n    this._colors = null;\n    const decodePickingColor = encodedColors && decodeColor.bind(null, encodedColors);\n    return {\n      decodePickingColor,\n      stats: renderStatus\n    };\n  }\n\n  shouldDrawLayer(layer) {\n    return layer.props.pickable && layer.props.operation === OPERATION.DRAW;\n  }\n\n  getModuleParameters() {\n    return {\n      pickingActive: 1,\n      pickingAttribute: this.pickZ,\n      lightSources: {}\n    };\n  }\n\n  getLayerParameters(layer, layerIndex, viewport) {\n    const pickParameters = { ...layer.props.parameters\n    };\n\n    if (!this._colors) {\n      pickParameters.blend = false;\n    } else {\n      Object.assign(pickParameters, PICKING_PARAMETERS);\n      pickParameters.blend = true;\n      pickParameters.blendColor = encodeColor(this._colors, layer, viewport);\n    }\n\n    return pickParameters;\n  }\n\n}\n\nfunction encodeColor(encoded, layer, viewport) {\n  const {\n    byLayer,\n    byAlpha\n  } = encoded;\n  let a;\n  let entry = byLayer.get(layer);\n\n  if (entry) {\n    entry.viewports.push(viewport);\n    a = entry.a;\n  } else {\n    a = byLayer.size + 1;\n\n    if (a <= 255) {\n      entry = {\n        a,\n        layer,\n        viewports: [viewport]\n      };\n      byLayer.set(layer, entry);\n      byAlpha[a] = entry;\n    } else {\n      log.warn('Too many pickable layers, only picking the first 255')();\n      a = 0;\n    }\n  }\n\n  return [0, 0, 0, a / 255];\n}\n\nfunction decodeColor(encoded, pickedColor) {\n  const entry = encoded.byAlpha[pickedColor[3]];\n  return entry && {\n    pickedLayer: entry.layer,\n    pickedViewports: entry.viewports,\n    pickedObjectIndex: entry.layer.decodePickingColor(pickedColor)\n  };\n}","map":{"version":3,"sources":["../../../src/passes/pick-layers-pass.ts"],"names":["PICKING_PARAMETERS","blendFunc","blendEquation","render","props","_drawPickingBuffer","deviceRect","height","pass","pickZ","gl","encodedColors","byLayer","byAlpha","renderStatus","withParameters","scissorTest","scissor","clearColor","depthMask","depthTest","depthRange","colorMask","blend","target","effects","e","decodePickingColor","decodeColor","stats","shouldDrawLayer","layer","OPERATION","getModuleParameters","pickingActive","pickingAttribute","lightSources","getLayerParameters","pickParameters","parameters","Object","encodeColor","entry","a","viewports","log","encoded","pickedColor","pickedLayer","pickedViewports","pickedObjectIndex"],"mappings":"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","sourcesContent":["import LayersPass, {LayersPassRenderOptions, RenderStats, Rect} from './layers-pass';\nimport {withParameters} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\nimport {OPERATION} from '../lib/constants';\nimport log from '../utils/log';\n\nimport type {Framebuffer} from '@luma.gl/core';\nimport type Viewport from '../viewports/viewport';\nimport type Layer from '../lib/layer';\n\nconst PICKING_PARAMETERS = {\n  blendFunc: [GL.ONE, GL.ZERO, GL.CONSTANT_ALPHA, GL.ZERO],\n  blendEquation: GL.FUNC_ADD\n};\n\ntype PickLayersPassRenderOptions = LayersPassRenderOptions & {\n  pickingFBO: Framebuffer;\n  deviceRect: Rect;\n  pickZ: boolean;\n};\n\ntype EncodedPickingColors = {\n  a: number;\n  layer: Layer;\n  viewports: Viewport[];\n};\n\nexport type PickingColorDecoder = (pickedColor: number[] | Uint8Array) =>\n  | {\n      pickedLayer: Layer;\n      pickedViewports: Viewport[];\n      pickedObjectIndex: number;\n    }\n  | undefined;\n\nexport default class PickLayersPass extends LayersPass {\n  private pickZ?: boolean;\n  private _colors: {\n    byLayer: Map<Layer, EncodedPickingColors>;\n    byAlpha: EncodedPickingColors[];\n  } | null = null;\n\n  render(props: PickLayersPassRenderOptions) {\n    if (props.pickingFBO) {\n      // When drawing into an off-screen buffer, use the alpha channel to encode layer index\n      return this._drawPickingBuffer(props);\n    }\n    // When drawing to screen (debug mode), do not use the alpha channel so that result is always visible\n    return super.render(props);\n  }\n\n  // Private\n  // Draws list of layers and viewports into the picking buffer\n  // Note: does not sample the buffer, that has to be done by the caller\n  _drawPickingBuffer({\n    layers,\n    layerFilter,\n    views,\n    viewports,\n    onViewportActive,\n    pickingFBO,\n    deviceRect: {x, y, width, height},\n    cullRect,\n    effects,\n    pass = 'picking',\n    pickZ\n  }: PickLayersPassRenderOptions): {\n    decodePickingColor: PickingColorDecoder | null;\n    stats: RenderStats;\n  } {\n    const gl = this.gl;\n    this.pickZ = pickZ;\n\n    // Track encoded layer indices\n    const encodedColors = pickZ\n      ? null\n      : {\n          byLayer: new Map(),\n          byAlpha: []\n        };\n    // Temporarily store it on the instance so that it can be accessed by this.getLayerParameters\n    this._colors = encodedColors;\n\n    // Make sure we clear scissor test and fbo bindings in case of exceptions\n    // We are only interested in one pixel, no need to render anything else\n    // Note that the callback here is called synchronously.\n    // Set blend mode for picking\n    // always overwrite existing pixel with [r,g,b,layerIndex]\n    const renderStatus = withParameters(\n      gl,\n      {\n        scissorTest: true,\n        scissor: [x, y, width, height],\n        clearColor: [0, 0, 0, 0],\n        // When used as Mapbox custom layer, the context state may be dirty\n        // TODO - Remove when mapbox fixes this issue\n        // https://github.com/mapbox/mapbox-gl-js/issues/7801\n        depthMask: true,\n        depthTest: true,\n        depthRange: [0, 1],\n        colorMask: [true, true, true, true],\n        // Blending\n        ...PICKING_PARAMETERS,\n        blend: !pickZ\n      },\n      () =>\n        super.render({\n          target: pickingFBO,\n          layers,\n          layerFilter,\n          views,\n          viewports,\n          onViewportActive,\n          cullRect,\n          effects: effects?.filter(e => e.useInPicking),\n          pass\n        })\n    );\n\n    // Clear the temp field\n    this._colors = null;\n    const decodePickingColor = encodedColors && decodeColor.bind(null, encodedColors);\n    return {decodePickingColor, stats: renderStatus};\n  }\n\n  protected shouldDrawLayer(layer: Layer): boolean {\n    return layer.props.pickable && layer.props.operation === OPERATION.DRAW;\n  }\n\n  protected getModuleParameters() {\n    return {\n      pickingActive: 1,\n      pickingAttribute: this.pickZ,\n      // turn off lighting by adding empty light source object\n      // lights shader module relies on the `lightSources` to turn on/off lighting\n      lightSources: {}\n    };\n  }\n\n  protected getLayerParameters(layer: Layer, layerIndex: number, viewport: Viewport): any {\n    const pickParameters = {...layer.props.parameters};\n\n    if (!this._colors) {\n      pickParameters.blend = false;\n    } else {\n      Object.assign(pickParameters, PICKING_PARAMETERS);\n      pickParameters.blend = true;\n      pickParameters.blendColor = encodeColor(this._colors, layer, viewport);\n    }\n\n    return pickParameters;\n  }\n}\n\n// Assign an unique alpha value for each pickable layer and track the encoding in the cache object\n// Returns normalized blend color\nfunction encodeColor(\n  encoded: {\n    byLayer: Map<Layer, EncodedPickingColors>;\n    byAlpha: EncodedPickingColors[];\n  },\n  layer: Layer,\n  viewport: Viewport\n): number[] {\n  const {byLayer, byAlpha} = encoded;\n  let a;\n\n  // Encode layerIndex in the alpha channel\n  // TODO - combine small layers to better utilize the picking color space\n  let entry = byLayer.get(layer);\n  if (entry) {\n    entry.viewports.push(viewport);\n    a = entry.a;\n  } else {\n    a = byLayer.size + 1;\n    if (a <= 255) {\n      entry = {a, layer, viewports: [viewport]};\n      byLayer.set(layer, entry);\n      byAlpha[a] = entry;\n    } else {\n      log.warn('Too many pickable layers, only picking the first 255')();\n      a = 0;\n    }\n  }\n  return [0, 0, 0, a / 255];\n}\n\n// Given a picked color, retrieve the corresponding layer and viewports from cache\nfunction decodeColor(\n  encoded: {\n    byLayer: Map<Layer, EncodedPickingColors>;\n    byAlpha: EncodedPickingColors[];\n  },\n  pickedColor: number[] | Uint8Array\n):\n  | {\n      pickedLayer: Layer;\n      pickedViewports: Viewport[];\n      pickedObjectIndex: number;\n    }\n  | undefined {\n  const entry = encoded.byAlpha[pickedColor[3]];\n  return (\n    entry && {\n      pickedLayer: entry.layer,\n      pickedViewports: entry.viewports,\n      pickedObjectIndex: entry.layer.decodePickingColor(pickedColor)\n    }\n  );\n}\n"]},"metadata":{},"sourceType":"module"}