{"ast":null,"code":"import _objectSpread from\"/Users/user/Desktop/\\u05E2\\u05D1\\u05D5\\u05D3\\u05D5\\u05EA \\u05DC\\u05D4\\u05D2\\u05E9\\u05D4/myweb/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/user/Desktop/\\u05E2\\u05D1\\u05D5\\u05D3\\u05D5\\u05EA \\u05DC\\u05D4\\u05D2\\u05E9\\u05D4/myweb/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useCallback}from'react';import{TETROMINOS,randomTetromino}from'../tetrominos';import{STAGE_WIDTH,checkCollision}from'../gameHelpers';export var usePlayer=function usePlayer(){var _useState=useState({pos:{x:0,y:0},tetromino:TETROMINOS[0].shape,collided:false,texts:TETROMINOS[0].text,dir:0}),_useState2=_slicedToArray(_useState,2),player=_useState2[0],setPlayer=_useState2[1];function rotate(matrix,dir){// Make the rows to become cols (transpose)\nvar mtrx=matrix.map(function(_,index){return matrix.map(function(column){return column[index];});});// Reverse each row to get a rotaded matrix\nif(dir>0)return mtrx.map(function(row){return row.reverse();});return mtrx.reverse();}function playerRotate(stage,dir){var clonedPlayer=JSON.parse(JSON.stringify(player));clonedPlayer.tetromino=rotate(clonedPlayer.tetromino,dir);clonedPlayer.texts=rotate(clonedPlayer.texts,dir);var pos=clonedPlayer.pos.x;var offset=1;while(checkCollision(clonedPlayer,stage,{x:0,y:0})){clonedPlayer.pos.x+=offset;offset=-(offset+(offset>0?1:-1));if(offset>clonedPlayer.tetromino[0].length){rotate(clonedPlayer.tetromino,-dir);clonedPlayer.pos.x=pos;clonedPlayer.dir=clonedPlayer.dir-dir;return;}clonedPlayer.dir=clonedPlayer.dir+dir;}setPlayer(clonedPlayer);}var updatePlayerPos=function updatePlayerPos(_ref){var x=_ref.x,y=_ref.y,collided=_ref.collided;setPlayer(function(prev){return _objectSpread({},prev,{pos:{x:prev.pos.x+=x,y:prev.pos.y+=y},collided:collided});});};var resetPlayer=useCallback(function(){var rand=randomTetromino();setPlayer({pos:{x:STAGE_WIDTH/2-2,y:0},tetromino:rand.shape,collided:false,texts:rand.text,dir:0});},[]);return[player,updatePlayerPos,resetPlayer,playerRotate];};","map":{"version":3,"sources":["/Users/user/Desktop/עבודות להגשה/myweb/src/components/tetris/hooks/usePlayer.js"],"names":["useState","useCallback","TETROMINOS","randomTetromino","STAGE_WIDTH","checkCollision","usePlayer","pos","x","y","tetromino","shape","collided","texts","text","dir","player","setPlayer","rotate","matrix","mtrx","map","_","index","column","row","reverse","playerRotate","stage","clonedPlayer","JSON","parse","stringify","offset","length","updatePlayerPos","prev","resetPlayer","rand"],"mappings":"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","sourcesContent":["import { useState, useCallback } from 'react';\n\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers';\n\nexport const usePlayer = () => {\n  const [player, setPlayer] = useState({\n    pos: { x: 0, y: 0 },\n    tetromino: TETROMINOS[0].shape,\n    collided: false,\n    texts: TETROMINOS[0].text,\n    dir: 0,\n\n  });\n\n  function rotate(matrix, dir) {\n    // Make the rows to become cols (transpose)\n    const mtrx = matrix.map((_, index) => matrix.map(column => column[index]));\n    // Reverse each row to get a rotaded matrix\n    if (dir > 0) return mtrx.map(row => row.reverse());\n    return mtrx.reverse();\n  }\n\n  function playerRotate(stage, dir) {\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n    clonedPlayer.texts = rotate(clonedPlayer.texts, dir);\n\n    const pos = clonedPlayer.pos.x;\n    let offset = 1;\n    while (checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\n      clonedPlayer.pos.x += offset;\n      offset = -(offset + (offset > 0 ? 1 : -1));\n      if (offset > clonedPlayer.tetromino[0].length) {\n        rotate(clonedPlayer.tetromino, -dir);\n        clonedPlayer.pos.x = pos;\n        clonedPlayer.dir= clonedPlayer.dir-dir\n        return;\n      }\n      clonedPlayer.dir= clonedPlayer.dir+dir\n\n    }\n    setPlayer(clonedPlayer);\n  }\n\n  const updatePlayerPos = ({ x, y, collided }) => {\n    setPlayer(prev => ({\n      ...prev,\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\n      collided,\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    const rand= randomTetromino();\n    setPlayer({\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\n      tetromino: rand.shape,\n      collided: false,\n      texts: rand.text,\n      dir:0,\n\n    });\n  }, []);\n\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\n};"]},"metadata":{},"sourceType":"module"}