{"ast":null,"code":"const CANVAS_ONLY_STYLES = {\n  mixBlendMode: null\n};\nexport default function extractStyles({\n  width,\n  height,\n  style\n}) {\n  const containerStyle = {\n    position: 'absolute',\n    zIndex: 0,\n    left: 0,\n    top: 0,\n    width,\n    height\n  };\n  const canvasStyle = {\n    left: 0,\n    top: 0\n  };\n\n  if (style) {\n    for (const key in style) {\n      if (key in CANVAS_ONLY_STYLES) {\n        canvasStyle[key] = style[key];\n      } else {\n        containerStyle[key] = style[key];\n      }\n    }\n  }\n\n  return {\n    containerStyle,\n    canvasStyle\n  };\n}","map":{"version":3,"sources":["../../../src/utils/extract-styles.ts"],"names":["CANVAS_ONLY_STYLES","mixBlendMode","style","containerStyle","position","zIndex","left","top","height","canvasStyle","key"],"mappings":"AAEA,MAAMA,kBAAkB,GAAG;AACzBC,EAAAA,YAAY,EAAE;AADW,CAA3B;AAIA,eAAe,SAAA,aAAA,CAAuB;AAAA,EAAA,KAAA;AAAA,EAAA,MAAA;AAGpCC,EAAAA;AAHoC,CAAvB,EAWb;AAEA,QAAMC,cAAmC,GAAG;AAC1CC,IAAAA,QAAQ,EADkC,UAAA;AAE1CC,IAAAA,MAAM,EAFoC,CAAA;AAG1CC,IAAAA,IAAI,EAHsC,CAAA;AAI1CC,IAAAA,GAAG,EAJuC,CAAA;AAAA,IAAA,KAAA;AAM1CC,IAAAA;AAN0C,GAA5C;AAUA,QAAMC,WAAgC,GAAG;AACvCH,IAAAA,IAAI,EADmC,CAAA;AAEvCC,IAAAA,GAAG,EAAE;AAFkC,GAAzC;;AAKA,MAAA,KAAA,EAAW;AACT,SAAK,MAAL,GAAA,IAAA,KAAA,EAAyB;AACvB,UAAIG,GAAG,IAAP,kBAAA,EAA+B;AAE7BD,QAAAA,WAAW,CAAXA,GAAW,CAAXA,GAAmBP,KAAK,CAAxBO,GAAwB,CAAxBA;AAFF,OAAA,MAGO;AAELN,QAAAA,cAAc,CAAdA,GAAc,CAAdA,GAAsBD,KAAK,CAA3BC,GAA2B,CAA3BA;AACD;AACF;AACF;;AAED,SAAO;AAAA,IAAA,cAAA;AAAiBM,IAAAA;AAAjB,GAAP;AACD","sourcesContent":["import * as React from 'react';\n\nconst CANVAS_ONLY_STYLES = {\n  mixBlendMode: null\n};\n\nexport default function extractStyles({\n  width,\n  height,\n  style\n}: {\n  width?: string | number;\n  height?: string | number;\n  style?: Partial<CSSStyleDeclaration> | null;\n}): {\n  containerStyle: React.CSSProperties;\n  canvasStyle: React.CSSProperties;\n} {\n  // This styling is enforced for correct positioning with children\n  const containerStyle: React.CSSProperties = {\n    position: 'absolute',\n    zIndex: 0,\n    left: 0,\n    top: 0,\n    width,\n    height\n  };\n\n  // Fill the container\n  const canvasStyle: React.CSSProperties = {\n    left: 0,\n    top: 0\n  };\n\n  if (style) {\n    for (const key in style) {\n      if (key in CANVAS_ONLY_STYLES) {\n        // apply style to the canvas, but not deck's children, e.g. mix-blend-mode\n        canvasStyle[key] = style[key];\n      } else {\n        // apply style to the container, e.g. position/flow settings\n        containerStyle[key] = style[key];\n      }\n    }\n  }\n\n  return {containerStyle, canvasStyle};\n}\n"]},"metadata":{},"sourceType":"module"}