{"ast":null,"code":"import { Konva } from 'konva/lib/Global';\nconst propsToSkip = {\n  children: true,\n  ref: true,\n  key: true,\n  style: true,\n  forwardedRef: true,\n  unstable_applyCache: true,\n  unstable_applyDrawHitFromCache: true\n};\nlet zIndexWarningShowed = false;\nlet dragWarningShowed = false;\nexport const EVENTS_NAMESPACE = '.react-konva-event';\nlet useStrictMode = false;\nexport function toggleStrictMode(value) {\n  useStrictMode = value;\n}\nconst DRAGGABLE_WARNING = `ReactKonva: You have a Konva node with draggable = true and position defined but no onDragMove or onDragEnd events are handled.\nPosition of a node will be changed during drag&drop, so you should update state of the react app as well.\nConsider to add onDragMove or onDragEnd events.\nFor more info see: https://github.com/konvajs/react-konva/issues/256\n`;\nconst Z_INDEX_WARNING = `ReactKonva: You are using \"zIndex\" attribute for a Konva node.\nreact-konva may get confused with ordering. Just define correct order of elements in your render function of a component.\nFor more info see: https://github.com/konvajs/react-konva/issues/194\n`;\nconst EMPTY_PROPS = {};\nexport function applyNodeProps(instance, props, oldProps = EMPTY_PROPS) {\n  // don't use zIndex in react-konva\n  if (!zIndexWarningShowed && 'zIndex' in props) {\n    console.warn(Z_INDEX_WARNING);\n    zIndexWarningShowed = true;\n  } // check correct draggable usage\n\n\n  if (!dragWarningShowed && props.draggable) {\n    var hasPosition = props.x !== undefined || props.y !== undefined;\n    var hasEvents = props.onDragEnd || props.onDragMove;\n\n    if (hasPosition && !hasEvents) {\n      console.warn(DRAGGABLE_WARNING);\n      dragWarningShowed = true;\n    }\n  } // check old props\n  // we need to unset properties that are not in new props\n  // and remove all events\n\n\n  for (var key in oldProps) {\n    if (propsToSkip[key]) {\n      continue;\n    }\n\n    var isEvent = key.slice(0, 2) === 'on';\n    var propChanged = oldProps[key] !== props[key]; // if that is a changed event, we need to remvoe it\n\n    if (isEvent && propChanged) {\n      var eventName = key.substr(2).toLowerCase();\n\n      if (eventName.substr(0, 7) === 'content') {\n        eventName = 'content' + eventName.substr(7, 1).toUpperCase() + eventName.substr(8);\n      }\n\n      instance.off(eventName, oldProps[key]);\n    }\n\n    var toRemove = !props.hasOwnProperty(key);\n\n    if (toRemove) {\n      instance.setAttr(key, undefined);\n    }\n  }\n\n  var strictUpdate = useStrictMode || props._useStrictMode;\n  var updatedProps = {};\n  var hasUpdates = false;\n  const newEvents = {};\n\n  for (var key in props) {\n    if (propsToSkip[key]) {\n      continue;\n    }\n\n    var isEvent = key.slice(0, 2) === 'on';\n    var toAdd = oldProps[key] !== props[key];\n\n    if (isEvent && toAdd) {\n      var eventName = key.substr(2).toLowerCase();\n\n      if (eventName.substr(0, 7) === 'content') {\n        eventName = 'content' + eventName.substr(7, 1).toUpperCase() + eventName.substr(8);\n      } // check that event is not undefined\n\n\n      if (props[key]) {\n        newEvents[eventName] = props[key];\n      }\n    }\n\n    if (!isEvent && (props[key] !== oldProps[key] || strictUpdate && props[key] !== instance.getAttr(key))) {\n      hasUpdates = true;\n      updatedProps[key] = props[key];\n    }\n  }\n\n  if (hasUpdates) {\n    instance.setAttrs(updatedProps);\n    updatePicture(instance);\n  } // subscribe to events AFTER we set attrs\n  // we need it to fix https://github.com/konvajs/react-konva/issues/471\n  // settings attrs may add events. Like \"draggable: true\" will add \"mousedown\" listener\n\n\n  for (var eventName in newEvents) {\n    instance.on(eventName + EVENTS_NAMESPACE, newEvents[eventName]);\n  }\n}\nexport function updatePicture(node) {\n  if (!Konva.autoDrawEnabled) {\n    var drawingNode = node.getLayer() || node.getStage();\n    drawingNode && drawingNode.batchDraw();\n  }\n}","map":{"version":3,"sources":["/Users/user/Desktop/עבודות להגשה/myweb/node_modules/react-konva/es/makeUpdates.js"],"names":["Konva","propsToSkip","children","ref","key","style","forwardedRef","unstable_applyCache","unstable_applyDrawHitFromCache","zIndexWarningShowed","dragWarningShowed","EVENTS_NAMESPACE","useStrictMode","toggleStrictMode","value","DRAGGABLE_WARNING","Z_INDEX_WARNING","EMPTY_PROPS","applyNodeProps","instance","props","oldProps","console","warn","draggable","hasPosition","x","undefined","y","hasEvents","onDragEnd","onDragMove","isEvent","slice","propChanged","eventName","substr","toLowerCase","toUpperCase","off","toRemove","hasOwnProperty","setAttr","strictUpdate","_useStrictMode","updatedProps","hasUpdates","newEvents","toAdd","getAttr","setAttrs","updatePicture","on","node","autoDrawEnabled","drawingNode","getLayer","getStage","batchDraw"],"mappings":"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","sourcesContent":["import { Konva } from 'konva/lib/Global';\nconst propsToSkip = {\n    children: true,\n    ref: true,\n    key: true,\n    style: true,\n    forwardedRef: true,\n    unstable_applyCache: true,\n    unstable_applyDrawHitFromCache: true,\n};\nlet zIndexWarningShowed = false;\nlet dragWarningShowed = false;\nexport const EVENTS_NAMESPACE = '.react-konva-event';\nlet useStrictMode = false;\nexport function toggleStrictMode(value) {\n    useStrictMode = value;\n}\nconst DRAGGABLE_WARNING = `ReactKonva: You have a Konva node with draggable = true and position defined but no onDragMove or onDragEnd events are handled.\nPosition of a node will be changed during drag&drop, so you should update state of the react app as well.\nConsider to add onDragMove or onDragEnd events.\nFor more info see: https://github.com/konvajs/react-konva/issues/256\n`;\nconst Z_INDEX_WARNING = `ReactKonva: You are using \"zIndex\" attribute for a Konva node.\nreact-konva may get confused with ordering. Just define correct order of elements in your render function of a component.\nFor more info see: https://github.com/konvajs/react-konva/issues/194\n`;\nconst EMPTY_PROPS = {};\nexport function applyNodeProps(instance, props, oldProps = EMPTY_PROPS) {\n    // don't use zIndex in react-konva\n    if (!zIndexWarningShowed && 'zIndex' in props) {\n        console.warn(Z_INDEX_WARNING);\n        zIndexWarningShowed = true;\n    }\n    // check correct draggable usage\n    if (!dragWarningShowed && props.draggable) {\n        var hasPosition = props.x !== undefined || props.y !== undefined;\n        var hasEvents = props.onDragEnd || props.onDragMove;\n        if (hasPosition && !hasEvents) {\n            console.warn(DRAGGABLE_WARNING);\n            dragWarningShowed = true;\n        }\n    }\n    // check old props\n    // we need to unset properties that are not in new props\n    // and remove all events\n    for (var key in oldProps) {\n        if (propsToSkip[key]) {\n            continue;\n        }\n        var isEvent = key.slice(0, 2) === 'on';\n        var propChanged = oldProps[key] !== props[key];\n        // if that is a changed event, we need to remvoe it\n        if (isEvent && propChanged) {\n            var eventName = key.substr(2).toLowerCase();\n            if (eventName.substr(0, 7) === 'content') {\n                eventName =\n                    'content' +\n                        eventName.substr(7, 1).toUpperCase() +\n                        eventName.substr(8);\n            }\n            instance.off(eventName, oldProps[key]);\n        }\n        var toRemove = !props.hasOwnProperty(key);\n        if (toRemove) {\n            instance.setAttr(key, undefined);\n        }\n    }\n    var strictUpdate = useStrictMode || props._useStrictMode;\n    var updatedProps = {};\n    var hasUpdates = false;\n    const newEvents = {};\n    for (var key in props) {\n        if (propsToSkip[key]) {\n            continue;\n        }\n        var isEvent = key.slice(0, 2) === 'on';\n        var toAdd = oldProps[key] !== props[key];\n        if (isEvent && toAdd) {\n            var eventName = key.substr(2).toLowerCase();\n            if (eventName.substr(0, 7) === 'content') {\n                eventName =\n                    'content' +\n                        eventName.substr(7, 1).toUpperCase() +\n                        eventName.substr(8);\n            }\n            // check that event is not undefined\n            if (props[key]) {\n                newEvents[eventName] = props[key];\n            }\n        }\n        if (!isEvent &&\n            (props[key] !== oldProps[key] ||\n                (strictUpdate && props[key] !== instance.getAttr(key)))) {\n            hasUpdates = true;\n            updatedProps[key] = props[key];\n        }\n    }\n    if (hasUpdates) {\n        instance.setAttrs(updatedProps);\n        updatePicture(instance);\n    }\n    // subscribe to events AFTER we set attrs\n    // we need it to fix https://github.com/konvajs/react-konva/issues/471\n    // settings attrs may add events. Like \"draggable: true\" will add \"mousedown\" listener\n    for (var eventName in newEvents) {\n        instance.on(eventName + EVENTS_NAMESPACE, newEvents[eventName]);\n    }\n}\nexport function updatePicture(node) {\n    if (!Konva.autoDrawEnabled) {\n        var drawingNode = node.getLayer() || node.getStage();\n        drawingNode && drawingNode.batchDraw();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}