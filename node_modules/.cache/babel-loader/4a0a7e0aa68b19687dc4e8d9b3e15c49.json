{"ast":null,"code":"import { Tesselator } from '@deck.gl/core';\nimport { normalizePath } from './path';\nconst START_CAP = 1;\nconst END_CAP = 2;\nconst INVALID = 4;\nexport default class PathTesselator extends Tesselator {\n  constructor(opts) {\n    super({ ...opts,\n      attributes: {\n        positions: {\n          size: 3,\n          padding: 18,\n          initialize: true,\n          type: opts.fp64 ? Float64Array : Float32Array\n        },\n        segmentTypes: {\n          size: 1,\n          type: Uint8ClampedArray\n        }\n      }\n    });\n  }\n\n  get(attributeName) {\n    return this.attributes[attributeName];\n  }\n\n  getGeometryFromBuffer(buffer) {\n    if (this.normalize) {\n      return super.getGeometryFromBuffer(buffer);\n    }\n\n    return null;\n  }\n\n  normalizeGeometry(path) {\n    if (this.normalize) {\n      return normalizePath(path, this.positionSize, this.opts.resolution, this.opts.wrapLongitude);\n    }\n\n    return path;\n  }\n\n  getGeometrySize(path) {\n    if (isCut(path)) {\n      let size = 0;\n\n      for (const subPath of path) {\n        size += this.getGeometrySize(subPath);\n      }\n\n      return size;\n    }\n\n    const numPoints = this.getPathLength(path);\n\n    if (numPoints < 2) {\n      return 0;\n    }\n\n    if (this.isClosed(path)) {\n      return numPoints < 3 ? 0 : numPoints + 2;\n    }\n\n    return numPoints;\n  }\n\n  updateGeometryAttributes(path, context) {\n    if (context.geometrySize === 0) {\n      return;\n    }\n\n    if (path && isCut(path)) {\n      for (const subPath of path) {\n        const geometrySize = this.getGeometrySize(subPath);\n        context.geometrySize = geometrySize;\n        this.updateGeometryAttributes(subPath, context);\n        context.vertexStart += geometrySize;\n      }\n    } else {\n      this._updateSegmentTypes(path, context);\n\n      this._updatePositions(path, context);\n    }\n  }\n\n  _updateSegmentTypes(path, context) {\n    const segmentTypes = this.attributes.segmentTypes;\n    const isPathClosed = path ? this.isClosed(path) : false;\n    const {\n      vertexStart,\n      geometrySize\n    } = context;\n    segmentTypes.fill(0, vertexStart, vertexStart + geometrySize);\n\n    if (isPathClosed) {\n      segmentTypes[vertexStart] = INVALID;\n      segmentTypes[vertexStart + geometrySize - 2] = INVALID;\n    } else {\n      segmentTypes[vertexStart] += START_CAP;\n      segmentTypes[vertexStart + geometrySize - 2] += END_CAP;\n    }\n\n    segmentTypes[vertexStart + geometrySize - 1] = INVALID;\n  }\n\n  _updatePositions(path, context) {\n    const {\n      positions\n    } = this.attributes;\n\n    if (!positions || !path) {\n      return;\n    }\n\n    const {\n      vertexStart,\n      geometrySize\n    } = context;\n    const p = new Array(3);\n\n    for (let i = vertexStart, ptIndex = 0; ptIndex < geometrySize; i++, ptIndex++) {\n      this.getPointOnPath(path, ptIndex, p);\n      positions[i * 3] = p[0];\n      positions[i * 3 + 1] = p[1];\n      positions[i * 3 + 2] = p[2];\n    }\n  }\n\n  getPathLength(path) {\n    return path.length / this.positionSize;\n  }\n\n  getPointOnPath(path, index, target = []) {\n    const {\n      positionSize\n    } = this;\n\n    if (index * positionSize >= path.length) {\n      index += 1 - path.length / positionSize;\n    }\n\n    const i = index * positionSize;\n    target[0] = path[i];\n    target[1] = path[i + 1];\n    target[2] = positionSize === 3 && path[i + 2] || 0;\n    return target;\n  }\n\n  isClosed(path) {\n    if (!this.normalize) {\n      return Boolean(this.opts.loop);\n    }\n\n    const {\n      positionSize\n    } = this;\n    const lastPointIndex = path.length - positionSize;\n    return path[0] === path[lastPointIndex] && path[1] === path[lastPointIndex + 1] && (positionSize === 2 || path[2] === path[lastPointIndex + 2]);\n  }\n\n}\n\nfunction isCut(path) {\n  return Array.isArray(path[0]);\n}","map":{"version":3,"sources":["../../../src/path-layer/path-tesselator.ts"],"names":["START_CAP","END_CAP","INVALID","constructor","attributes","positions","size","padding","initialize","type","opts","Float32Array","segmentTypes","Uint8ClampedArray","get","getGeometryFromBuffer","normalizeGeometry","normalizePath","getGeometrySize","isCut","numPoints","updateGeometryAttributes","context","path","geometrySize","_updateSegmentTypes","isPathClosed","vertexStart","_updatePositions","p","i","ptIndex","getPathLength","getPointOnPath","target","positionSize","index","isClosed","Boolean","lastPointIndex","Array"],"mappings":"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","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {Tesselator} from '@deck.gl/core';\nimport {normalizePath} from './path';\n\nimport type {TypedArray} from '@math.gl/core';\nimport type {PathGeometry, FlatPathGeometry, NormalizedPathGeometry} from './path';\n\nconst START_CAP = 1;\nconst END_CAP = 2;\nconst INVALID = 4;\n\n// This class is set up to allow querying one attribute at a time\n// the way the AttributeManager expects it\nexport default class PathTesselator extends Tesselator<\n  PathGeometry,\n  NormalizedPathGeometry,\n  {\n    fp64?: boolean;\n    resolution?: number;\n    wrapLongitude?: boolean;\n    loop?: boolean;\n  }\n> {\n  constructor(opts) {\n    super({\n      ...opts,\n      attributes: {\n        // Padding covers shaderAttributes for last segment in largest case fp64\n        // additional vertex + hi & low parts, 3 * 6\n        positions: {\n          size: 3,\n          padding: 18,\n          initialize: true,\n          type: opts.fp64 ? Float64Array : Float32Array\n        },\n        segmentTypes: {size: 1, type: Uint8ClampedArray}\n      }\n    });\n  }\n\n  /** Get packed attribute by name */\n  get(attributeName: string): TypedArray | null {\n    return this.attributes[attributeName];\n  }\n\n  /* Implement base Tesselator interface */\n  protected getGeometryFromBuffer(buffer) {\n    if (this.normalize) {\n      return super.getGeometryFromBuffer(buffer);\n    }\n    // we don't need to read the positions if no normalization\n    return null;\n  }\n\n  /* Implement base Tesselator interface */\n  protected normalizeGeometry(path: PathGeometry): number[][] | PathGeometry {\n    if (this.normalize) {\n      return normalizePath(path, this.positionSize, this.opts.resolution, this.opts.wrapLongitude);\n    }\n    return path;\n  }\n\n  /* Implement base Tesselator interface */\n  protected getGeometrySize(path: NormalizedPathGeometry): number {\n    if (isCut(path)) {\n      let size = 0;\n      for (const subPath of path) {\n        size += this.getGeometrySize(subPath);\n      }\n      return size;\n    }\n    const numPoints = this.getPathLength(path);\n    if (numPoints < 2) {\n      // invalid path\n      return 0;\n    }\n    if (this.isClosed(path)) {\n      // minimum 3 vertices\n      return numPoints < 3 ? 0 : numPoints + 2;\n    }\n    return numPoints;\n  }\n\n  /* Implement base Tesselator interface */\n  protected updateGeometryAttributes(\n    path: NormalizedPathGeometry | null,\n    context: {\n      vertexStart: number;\n      geometrySize: number;\n    }\n  ): void {\n    if (context.geometrySize === 0) {\n      return;\n    }\n    if (path && isCut(path)) {\n      for (const subPath of path) {\n        const geometrySize = this.getGeometrySize(subPath);\n        context.geometrySize = geometrySize;\n        this.updateGeometryAttributes(subPath, context);\n        context.vertexStart += geometrySize;\n      }\n    } else {\n      this._updateSegmentTypes(path, context);\n      this._updatePositions(path, context);\n    }\n  }\n\n  private _updateSegmentTypes(\n    path: FlatPathGeometry | null,\n    context: {\n      vertexStart: number;\n      geometrySize: number;\n    }\n  ) {\n    const segmentTypes = this.attributes.segmentTypes as TypedArray;\n    const isPathClosed = path ? this.isClosed(path) : false;\n    const {vertexStart, geometrySize} = context;\n\n    // positions   --  A0 A1 B0 B1 B2 B3 B0 B1 B2 --\n    // segmentTypes     3  4  4  0  0  0  0  4  4\n    segmentTypes.fill(0, vertexStart, vertexStart + geometrySize);\n    if (isPathClosed) {\n      segmentTypes[vertexStart] = INVALID;\n      segmentTypes[vertexStart + geometrySize - 2] = INVALID;\n    } else {\n      segmentTypes[vertexStart] += START_CAP;\n      segmentTypes[vertexStart + geometrySize - 2] += END_CAP;\n    }\n    segmentTypes[vertexStart + geometrySize - 1] = INVALID;\n  }\n\n  private _updatePositions(\n    path: FlatPathGeometry | null,\n    context: {\n      vertexStart: number;\n      geometrySize: number;\n    }\n  ) {\n    const {positions} = this.attributes;\n    if (!positions || !path) {\n      return;\n    }\n    const {vertexStart, geometrySize} = context;\n    const p = new Array(3);\n\n    // positions   --  A0 A1 B0 B1 B2 B3 B0 B1 B2 --\n    // segmentTypes     3  4  4  0  0  0  0  4  4\n    for (let i = vertexStart, ptIndex = 0; ptIndex < geometrySize; i++, ptIndex++) {\n      this.getPointOnPath(path, ptIndex, p);\n      positions[i * 3] = p[0];\n      positions[i * 3 + 1] = p[1];\n      positions[i * 3 + 2] = p[2];\n    }\n  }\n\n  // Utilities\n  /** Returns the number of points in the path */\n  private getPathLength(path: FlatPathGeometry): number {\n    return path.length / this.positionSize;\n  }\n\n  /** Returns a point on the path at the specified index */\n  private getPointOnPath(path: FlatPathGeometry, index: number, target: number[] = []): number[] {\n    const {positionSize} = this;\n    if (index * positionSize >= path.length) {\n      // loop\n      index += 1 - path.length / positionSize;\n    }\n    const i = index * positionSize;\n    target[0] = path[i];\n    target[1] = path[i + 1];\n    target[2] = (positionSize === 3 && path[i + 2]) || 0;\n    return target;\n  }\n\n  // Returns true if the first and last points are identical\n  private isClosed(path: FlatPathGeometry): boolean {\n    if (!this.normalize) {\n      return Boolean(this.opts.loop);\n    }\n    const {positionSize} = this;\n    const lastPointIndex = path.length - positionSize;\n    return (\n      path[0] === path[lastPointIndex] &&\n      path[1] === path[lastPointIndex + 1] &&\n      (positionSize === 2 || path[2] === path[lastPointIndex + 2])\n    );\n  }\n}\n\nfunction isCut(path: NormalizedPathGeometry): path is FlatPathGeometry[] {\n  return Array.isArray(path[0]);\n}\n"]},"metadata":{},"sourceType":"module"}