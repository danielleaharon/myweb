{"ast":null,"code":"import Matrix from './base/matrix';\nimport { checkVector } from '../lib/validators';\nimport { vec2_transformMat4AsVector, vec3_transformMat4AsVector } from '../lib/gl-matrix-extras';\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nimport * as vec4 from 'gl-matrix/vec4';\nvar INDICES;\n\n(function (INDICES) {\n  INDICES[INDICES[\"COL0ROW0\"] = 0] = \"COL0ROW0\";\n  INDICES[INDICES[\"COL0ROW1\"] = 1] = \"COL0ROW1\";\n  INDICES[INDICES[\"COL0ROW2\"] = 2] = \"COL0ROW2\";\n  INDICES[INDICES[\"COL0ROW3\"] = 3] = \"COL0ROW3\";\n  INDICES[INDICES[\"COL1ROW0\"] = 4] = \"COL1ROW0\";\n  INDICES[INDICES[\"COL1ROW1\"] = 5] = \"COL1ROW1\";\n  INDICES[INDICES[\"COL1ROW2\"] = 6] = \"COL1ROW2\";\n  INDICES[INDICES[\"COL1ROW3\"] = 7] = \"COL1ROW3\";\n  INDICES[INDICES[\"COL2ROW0\"] = 8] = \"COL2ROW0\";\n  INDICES[INDICES[\"COL2ROW1\"] = 9] = \"COL2ROW1\";\n  INDICES[INDICES[\"COL2ROW2\"] = 10] = \"COL2ROW2\";\n  INDICES[INDICES[\"COL2ROW3\"] = 11] = \"COL2ROW3\";\n  INDICES[INDICES[\"COL3ROW0\"] = 12] = \"COL3ROW0\";\n  INDICES[INDICES[\"COL3ROW1\"] = 13] = \"COL3ROW1\";\n  INDICES[INDICES[\"COL3ROW2\"] = 14] = \"COL3ROW2\";\n  INDICES[INDICES[\"COL3ROW3\"] = 15] = \"COL3ROW3\";\n})(INDICES || (INDICES = {}));\n\nconst DEFAULT_FOVY = 45 * Math.PI / 180;\nconst DEFAULT_ASPECT = 1;\nconst DEFAULT_NEAR = 0.1;\nconst DEFAULT_FAR = 500;\nconst IDENTITY_MATRIX = Object.freeze([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\nexport default class Matrix4 extends Matrix {\n  static get IDENTITY() {\n    return getIdentityMatrix();\n  }\n\n  static get ZERO() {\n    return getZeroMatrix();\n  }\n\n  get ELEMENTS() {\n    return 16;\n  }\n\n  get RANK() {\n    return 4;\n  }\n\n  get INDICES() {\n    return INDICES;\n  }\n\n  constructor(array) {\n    super(-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0);\n\n    if (arguments.length === 1 && Array.isArray(array)) {\n      this.copy(array);\n    } else {\n      this.identity();\n    }\n  }\n\n  copy(array) {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    this[3] = array[3];\n    this[4] = array[4];\n    this[5] = array[5];\n    this[6] = array[6];\n    this[7] = array[7];\n    this[8] = array[8];\n    this[9] = array[9];\n    this[10] = array[10];\n    this[11] = array[11];\n    this[12] = array[12];\n    this[13] = array[13];\n    this[14] = array[14];\n    this[15] = array[15];\n    return this.check();\n  }\n\n  set(m00, m10, m20, m30, m01, m11, m21, m31, m02, m12, m22, m32, m03, m13, m23, m33) {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m30;\n    this[4] = m01;\n    this[5] = m11;\n    this[6] = m21;\n    this[7] = m31;\n    this[8] = m02;\n    this[9] = m12;\n    this[10] = m22;\n    this[11] = m32;\n    this[12] = m03;\n    this[13] = m13;\n    this[14] = m23;\n    this[15] = m33;\n    return this.check();\n  }\n\n  setRowMajor(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m30;\n    this[4] = m01;\n    this[5] = m11;\n    this[6] = m21;\n    this[7] = m31;\n    this[8] = m02;\n    this[9] = m12;\n    this[10] = m22;\n    this[11] = m32;\n    this[12] = m03;\n    this[13] = m13;\n    this[14] = m23;\n    this[15] = m33;\n    return this.check();\n  }\n\n  toRowMajor(result) {\n    result[0] = this[0];\n    result[1] = this[4];\n    result[2] = this[8];\n    result[3] = this[12];\n    result[4] = this[1];\n    result[5] = this[5];\n    result[6] = this[9];\n    result[7] = this[13];\n    result[8] = this[2];\n    result[9] = this[6];\n    result[10] = this[10];\n    result[11] = this[14];\n    result[12] = this[3];\n    result[13] = this[7];\n    result[14] = this[11];\n    result[15] = this[15];\n    return result;\n  }\n\n  identity() {\n    return this.copy(IDENTITY_MATRIX);\n  }\n\n  fromObject(object) {\n    return this.check();\n  }\n\n  fromQuaternion(quaternion) {\n    mat4.fromQuat(this, quaternion);\n    return this.check();\n  }\n\n  frustum(view) {\n    const {\n      left,\n      right,\n      bottom,\n      top,\n      near = DEFAULT_NEAR,\n      far = DEFAULT_FAR\n    } = view;\n\n    if (far === Infinity) {\n      computeInfinitePerspectiveOffCenter(this, left, right, bottom, top, near);\n    } else {\n      mat4.frustum(this, left, right, bottom, top, near, far);\n    }\n\n    return this.check();\n  }\n\n  lookAt(view) {\n    const {\n      eye,\n      center = [0, 0, 0],\n      up = [0, 1, 0]\n    } = view;\n    mat4.lookAt(this, eye, center, up);\n    return this.check();\n  }\n\n  ortho(view) {\n    const {\n      left,\n      right,\n      bottom,\n      top,\n      near = DEFAULT_NEAR,\n      far = DEFAULT_FAR\n    } = view;\n    mat4.ortho(this, left, right, bottom, top, near, far);\n    return this.check();\n  }\n\n  orthographic(view) {\n    const {\n      fovy = DEFAULT_FOVY,\n      aspect = DEFAULT_ASPECT,\n      focalDistance = 1,\n      near = DEFAULT_NEAR,\n      far = DEFAULT_FAR\n    } = view;\n    checkRadians(fovy);\n    const halfY = fovy / 2;\n    const top = focalDistance * Math.tan(halfY);\n    const right = top * aspect;\n    return this.ortho({\n      left: -right,\n      right,\n      bottom: -top,\n      top,\n      near,\n      far\n    });\n  }\n\n  perspective(view) {\n    const {\n      fovy = 45 * Math.PI / 180,\n      aspect = 1,\n      near = 0.1,\n      far = 500\n    } = view;\n    checkRadians(fovy);\n    mat4.perspective(this, fovy, aspect, near, far);\n    return this.check();\n  }\n\n  determinant() {\n    return mat4.determinant(this);\n  }\n\n  getScale(result = [-0, -0, -0]) {\n    result[0] = Math.sqrt(this[0] * this[0] + this[1] * this[1] + this[2] * this[2]);\n    result[1] = Math.sqrt(this[4] * this[4] + this[5] * this[5] + this[6] * this[6]);\n    result[2] = Math.sqrt(this[8] * this[8] + this[9] * this[9] + this[10] * this[10]);\n    return result;\n  }\n\n  getTranslation(result = [-0, -0, -0]) {\n    result[0] = this[12];\n    result[1] = this[13];\n    result[2] = this[14];\n    return result;\n  }\n\n  getRotation(result, scaleResult) {\n    result = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n    scaleResult = scaleResult || [-0, -0, -0];\n    const scale = this.getScale(scaleResult);\n    const inverseScale0 = 1 / scale[0];\n    const inverseScale1 = 1 / scale[1];\n    const inverseScale2 = 1 / scale[2];\n    result[0] = this[0] * inverseScale0;\n    result[1] = this[1] * inverseScale1;\n    result[2] = this[2] * inverseScale2;\n    result[3] = 0;\n    result[4] = this[4] * inverseScale0;\n    result[5] = this[5] * inverseScale1;\n    result[6] = this[6] * inverseScale2;\n    result[7] = 0;\n    result[8] = this[8] * inverseScale0;\n    result[9] = this[9] * inverseScale1;\n    result[10] = this[10] * inverseScale2;\n    result[11] = 0;\n    result[12] = 0;\n    result[13] = 0;\n    result[14] = 0;\n    result[15] = 1;\n    return result;\n  }\n\n  getRotationMatrix3(result, scaleResult) {\n    result = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0];\n    scaleResult = scaleResult || [-0, -0, -0];\n    const scale = this.getScale(scaleResult);\n    const inverseScale0 = 1 / scale[0];\n    const inverseScale1 = 1 / scale[1];\n    const inverseScale2 = 1 / scale[2];\n    result[0] = this[0] * inverseScale0;\n    result[1] = this[1] * inverseScale1;\n    result[2] = this[2] * inverseScale2;\n    result[3] = this[4] * inverseScale0;\n    result[4] = this[5] * inverseScale1;\n    result[5] = this[6] * inverseScale2;\n    result[6] = this[8] * inverseScale0;\n    result[7] = this[9] * inverseScale1;\n    result[8] = this[10] * inverseScale2;\n    return result;\n  }\n\n  transpose() {\n    mat4.transpose(this, this);\n    return this.check();\n  }\n\n  invert() {\n    mat4.invert(this, this);\n    return this.check();\n  }\n\n  multiplyLeft(a) {\n    mat4.multiply(this, a, this);\n    return this.check();\n  }\n\n  multiplyRight(a) {\n    mat4.multiply(this, this, a);\n    return this.check();\n  }\n\n  rotateX(radians) {\n    mat4.rotateX(this, this, radians);\n    return this.check();\n  }\n\n  rotateY(radians) {\n    mat4.rotateY(this, this, radians);\n    return this.check();\n  }\n\n  rotateZ(radians) {\n    mat4.rotateZ(this, this, radians);\n    return this.check();\n  }\n\n  rotateXYZ(angleXYZ) {\n    return this.rotateX(angleXYZ[0]).rotateY(angleXYZ[1]).rotateZ(angleXYZ[2]);\n  }\n\n  rotateAxis(radians, axis) {\n    mat4.rotate(this, this, radians, axis);\n    return this.check();\n  }\n\n  scale(factor) {\n    mat4.scale(this, this, Array.isArray(factor) ? factor : [factor, factor, factor]);\n    return this.check();\n  }\n\n  translate(vector) {\n    mat4.translate(this, this, vector);\n    return this.check();\n  }\n\n  transform(vector, result) {\n    if (vector.length === 4) {\n      result = vec4.transformMat4(result || [-0, -0, -0, -0], vector, this);\n      checkVector(result, 4);\n      return result;\n    }\n\n    return this.transformAsPoint(vector, result);\n  }\n\n  transformAsPoint(vector, result) {\n    const {\n      length\n    } = vector;\n    let out;\n\n    switch (length) {\n      case 2:\n        out = vec2.transformMat4(result || [-0, -0], vector, this);\n        break;\n\n      case 3:\n        out = vec3.transformMat4(result || [-0, -0, -0], vector, this);\n        break;\n\n      default:\n        throw new Error('Illegal vector');\n    }\n\n    checkVector(out, vector.length);\n    return out;\n  }\n\n  transformAsVector(vector, result) {\n    let out;\n\n    switch (vector.length) {\n      case 2:\n        out = vec2_transformMat4AsVector(result || [-0, -0], vector, this);\n        break;\n\n      case 3:\n        out = vec3_transformMat4AsVector(result || [-0, -0, -0], vector, this);\n        break;\n\n      default:\n        throw new Error('Illegal vector');\n    }\n\n    checkVector(out, vector.length);\n    return out;\n  }\n\n  transformPoint(vector, result) {\n    return this.transformAsPoint(vector, result);\n  }\n\n  transformVector(vector, result) {\n    return this.transformAsPoint(vector, result);\n  }\n\n  transformDirection(vector, result) {\n    return this.transformAsVector(vector, result);\n  }\n\n  makeRotationX(radians) {\n    return this.identity().rotateX(radians);\n  }\n\n  makeTranslation(x, y, z) {\n    return this.identity().translate([x, y, z]);\n  }\n\n}\nlet ZERO;\nlet IDENTITY;\n\nfunction getZeroMatrix() {\n  if (!ZERO) {\n    ZERO = new Matrix4([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n    Object.freeze(ZERO);\n  }\n\n  return ZERO;\n}\n\nfunction getIdentityMatrix() {\n  if (!IDENTITY) {\n    IDENTITY = new Matrix4();\n    Object.freeze(IDENTITY);\n  }\n\n  return IDENTITY;\n}\n\nfunction checkRadians(possiblyDegrees) {\n  if (possiblyDegrees > Math.PI * 2) {\n    throw Error('expected radians');\n  }\n}\n\nfunction computeInfinitePerspectiveOffCenter(result, left, right, bottom, top, near) {\n  const column0Row0 = 2 * near / (right - left);\n  const column1Row1 = 2 * near / (top - bottom);\n  const column2Row0 = (right + left) / (right - left);\n  const column2Row1 = (top + bottom) / (top - bottom);\n  const column2Row2 = -1;\n  const column2Row3 = -1;\n  const column3Row2 = -2 * near;\n  result[0] = column0Row0;\n  result[1] = 0;\n  result[2] = 0;\n  result[3] = 0;\n  result[4] = 0;\n  result[5] = column1Row1;\n  result[6] = 0;\n  result[7] = 0;\n  result[8] = column2Row0;\n  result[9] = column2Row1;\n  result[10] = column2Row2;\n  result[11] = column2Row3;\n  result[12] = 0;\n  result[13] = 0;\n  result[14] = column3Row2;\n  result[15] = 0;\n  return result;\n}","map":{"version":3,"sources":["../../../src/classes/matrix4.ts"],"names":["INDICES","DEFAULT_FOVY","Math","DEFAULT_ASPECT","DEFAULT_NEAR","DEFAULT_FAR","IDENTITY_MATRIX","Object","IDENTITY","getIdentityMatrix","ZERO","getZeroMatrix","ELEMENTS","RANK","constructor","arguments","Array","copy","array","set","setRowMajor","toRowMajor","result","identity","fromObject","fromQuaternion","mat4","frustum","near","far","computeInfinitePerspectiveOffCenter","lookAt","center","up","ortho","orthographic","fovy","aspect","focalDistance","checkRadians","halfY","top","right","left","bottom","perspective","determinant","getScale","getTranslation","getRotation","scaleResult","scale","inverseScale0","inverseScale1","inverseScale2","getRotationMatrix3","transpose","invert","multiplyLeft","multiplyRight","rotateX","rotateY","rotateZ","rotateXYZ","angleXYZ","rotateAxis","translate","transform","vector","vec4","checkVector","transformAsPoint","length","out","vec2","vec3","transformAsVector","vec2_transformMat4AsVector","vec3_transformMat4AsVector","transformPoint","transformVector","transformDirection","makeRotationX","makeTranslation","possiblyDegrees","Error","column0Row0","column1Row1","column2Row0","column2Row1","column2Row2","column2Row3","column3Row2"],"mappings":"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","sourcesContent":["// Copyright (c) 2017 Uber Technologies, Inc.\n// MIT License\nimport Matrix from './base/matrix';\nimport {NumericArray} from '@math.gl/types';\nimport {checkVector} from '../lib/validators';\n\n/* eslint-disable camelcase */\nimport {vec2_transformMat4AsVector, vec3_transformMat4AsVector} from '../lib/gl-matrix-extras';\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nimport * as vec4 from 'gl-matrix/vec4';\n\nenum INDICES {\n  COL0ROW0 = 0,\n  COL0ROW1 = 1,\n  COL0ROW2 = 2,\n  COL0ROW3 = 3,\n  COL1ROW0 = 4,\n  COL1ROW1 = 5,\n  COL1ROW2 = 6,\n  COL1ROW3 = 7,\n  COL2ROW0 = 8,\n  COL2ROW1 = 9,\n  COL2ROW2 = 10,\n  COL2ROW3 = 11,\n  COL3ROW0 = 12,\n  COL3ROW1 = 13,\n  COL3ROW2 = 14,\n  COL3ROW3 = 15\n}\n\nconst DEFAULT_FOVY = (45 * Math.PI) / 180;\nconst DEFAULT_ASPECT = 1;\nconst DEFAULT_NEAR = 0.1;\nconst DEFAULT_FAR = 500;\n\nconst IDENTITY_MATRIX = Object.freeze([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n\n/** 4x4 matrix */\nexport default class Matrix4 extends Matrix {\n  static get IDENTITY(): Readonly<Matrix4> {\n    return getIdentityMatrix();\n  }\n\n  static get ZERO(): Readonly<Matrix4> {\n    return getZeroMatrix();\n  }\n\n  get ELEMENTS(): number {\n    return 16;\n  }\n\n  get RANK(): number {\n    return 4;\n  }\n\n  get INDICES(): typeof INDICES {\n    return INDICES;\n  }\n\n  constructor(array?: Readonly<NumericArray>) {\n    // PERF NOTE: initialize elements as double precision numbers\n    super(-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0);\n    if (arguments.length === 1 && Array.isArray(array)) {\n      this.copy(array);\n    } else {\n      this.identity();\n    }\n  }\n\n  copy(array: Readonly<NumericArray>): this {\n    this[0] = array[0];\n    this[1] = array[1];\n    this[2] = array[2];\n    this[3] = array[3];\n    this[4] = array[4];\n    this[5] = array[5];\n    this[6] = array[6];\n    this[7] = array[7];\n    this[8] = array[8];\n    this[9] = array[9];\n    this[10] = array[10];\n    this[11] = array[11];\n    this[12] = array[12];\n    this[13] = array[13];\n    this[14] = array[14];\n    this[15] = array[15];\n    return this.check();\n  }\n\n  // eslint-disable-next-line max-params\n  set(\n    m00: number,\n    m10: number,\n    m20: number,\n    m30: number,\n    m01: number,\n    m11: number,\n    m21: number,\n    m31: number,\n    m02: number,\n    m12: number,\n    m22: number,\n    m32: number,\n    m03: number,\n    m13: number,\n    m23: number,\n    m33: number\n  ): this {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m30;\n    this[4] = m01;\n    this[5] = m11;\n    this[6] = m21;\n    this[7] = m31;\n    this[8] = m02;\n    this[9] = m12;\n    this[10] = m22;\n    this[11] = m32;\n    this[12] = m03;\n    this[13] = m13;\n    this[14] = m23;\n    this[15] = m33;\n    return this.check();\n  }\n\n  // accepts row major order, stores as column major\n  // eslint-disable-next-line max-params\n  setRowMajor(\n    m00: number,\n    m01: number,\n    m02: number,\n    m03: number,\n    m10: number,\n    m11: number,\n    m12: number,\n    m13: number,\n    m20: number,\n    m21: number,\n    m22: number,\n    m23: number,\n    m30: number,\n    m31: number,\n    m32: number,\n    m33: number\n  ): this {\n    this[0] = m00;\n    this[1] = m10;\n    this[2] = m20;\n    this[3] = m30;\n    this[4] = m01;\n    this[5] = m11;\n    this[6] = m21;\n    this[7] = m31;\n    this[8] = m02;\n    this[9] = m12;\n    this[10] = m22;\n    this[11] = m32;\n    this[12] = m03;\n    this[13] = m13;\n    this[14] = m23;\n    this[15] = m33;\n    return this.check();\n  }\n\n  toRowMajor(result: NumericArray): NumericArray {\n    result[0] = this[0];\n    result[1] = this[4];\n    result[2] = this[8];\n    result[3] = this[12];\n    result[4] = this[1];\n    result[5] = this[5];\n    result[6] = this[9];\n    result[7] = this[13];\n    result[8] = this[2];\n    result[9] = this[6];\n    result[10] = this[10];\n    result[11] = this[14];\n    result[12] = this[3];\n    result[13] = this[7];\n    result[14] = this[11];\n    result[15] = this[15];\n    return result;\n  }\n\n  // Constructors\n\n  /** Set to identity matrix */\n  identity(): this {\n    return this.copy(IDENTITY_MATRIX);\n  }\n\n  /**\n   *\n   * @param object\n   * @returns self\n   */\n  fromObject(object: {[key: string]: any}): this {\n    return this.check();\n  }\n\n  /**\n   * Calculates a 4x4 matrix from the given quaternion\n   * @param quaternion Quaternion to create matrix from\n   * @returns self\n   */\n  fromQuaternion(quaternion: Readonly<NumericArray>): this {\n    mat4.fromQuat(this, quaternion);\n    return this.check();\n  }\n\n  /**\n   * Generates a frustum matrix with the given bounds\n   * @param view.left - Left bound of the frustum\n   * @param view.right - Right bound of the frustum\n   * @param view.bottom - Bottom bound of the frustum\n   * @param view.top - Top bound of the frustum\n   * @param view.near - Near bound of the frustum\n   * @param view.far - Far bound of the frustum. Can be set to Infinity.\n   * @returns self\n   */\n  frustum(view: {\n    left: number;\n    right: number;\n    bottom: number;\n    top: number;\n    near: number;\n    far?: number;\n  }): this {\n    const {left, right, bottom, top, near = DEFAULT_NEAR, far = DEFAULT_FAR} = view;\n    if (far === Infinity) {\n      computeInfinitePerspectiveOffCenter(this, left, right, bottom, top, near);\n    } else {\n      mat4.frustum(this, left, right, bottom, top, near, far);\n    }\n    return this.check();\n  }\n\n  /**\n   * Generates a look-at matrix with the given eye position, focal point,\n   * and up axis\n   * @param view.eye - (vector) Position of the viewer\n   * @param view.center - (vector) Point the viewer is looking at\n   * @param view.up - (vector) Up axis\n   * @returns self\n   */\n  lookAt(view: {\n    eye: Readonly<NumericArray>;\n    center?: Readonly<NumericArray>;\n    up?: Readonly<NumericArray>;\n  }): this {\n    const {eye, center = [0, 0, 0], up = [0, 1, 0]} = view;\n    mat4.lookAt(this, eye, center, up);\n    return this.check();\n  }\n\n  /**\n   * Generates a orthogonal projection matrix with the given bounds\n   * from \"traditional\" view space parameters\n   * @param view.left - Left bound of the frustum\n   * @param view.right number  Right bound of the frustum\n   * @param view.bottom - Bottom bound of the frustum\n   * @param view.top number  Top bound of the frustum\n   * @param view.near - Near bound of the frustum\n   * @param view.far number  Far bound of the frustum\n   * @returns self\n   */\n  ortho(view: {\n    left: number;\n    right: number;\n    bottom: number;\n    top: number;\n    near?: number;\n    far?: number;\n  }): this {\n    const {left, right, bottom, top, near = DEFAULT_NEAR, far = DEFAULT_FAR} = view;\n    mat4.ortho(this, left, right, bottom, top, near, far);\n    return this.check();\n  }\n\n  /**\n   * Generates an orthogonal projection matrix with the same parameters\n   * as a perspective matrix (plus focalDistance)\n   * @param view.fovy Vertical field of view in radians\n   * @param view.aspect Aspect ratio. Typically viewport width / viewport height\n   * @param view.focalDistance Distance in the view frustum used for extent calculations\n   * @param view.near Near bound of the frustum\n   * @param view.far Far bound of the frustum\n   * @returns self\n   */\n  orthographic(view: {\n    fovy?: number;\n    aspect?: number;\n    focalDistance?: number;\n    near?: number;\n    far?: number;\n  }): this {\n    const {\n      fovy = DEFAULT_FOVY,\n      aspect = DEFAULT_ASPECT,\n      focalDistance = 1,\n      near = DEFAULT_NEAR,\n      far = DEFAULT_FAR\n    } = view;\n\n    checkRadians(fovy);\n\n    const halfY = fovy / 2;\n    const top = focalDistance * Math.tan(halfY); // focus_plane is the distance from the camera\n    const right = top * aspect;\n\n    return this.ortho({\n      left: -right,\n      right,\n      bottom: -top,\n      top,\n      near,\n      far\n    });\n  }\n\n  /**\n   * Generates a perspective projection matrix with the given bounds\n   * @param view.fovy Vertical field of view in radians\n   * @param view.aspect Aspect ratio. typically viewport width/height\n   * @param view.near Near bound of the frustum\n   * @param view.far Far bound of the frustum\n   * @returns self\n   */\n  perspective(view: {fovy: number; aspect?: number; near?: number; far?: number}): this {\n    const {fovy = (45 * Math.PI) / 180, aspect = 1, near = 0.1, far = 500} = view;\n    checkRadians(fovy);\n    mat4.perspective(this, fovy, aspect, near, far);\n    return this.check();\n  }\n\n  // Accessors\n\n  determinant(): number {\n    return mat4.determinant(this);\n  }\n\n  /**\n   * Extracts the non-uniform scale assuming the matrix is an affine transformation.\n   * The scales are the \"lengths\" of the column vectors in the upper-left 3x3 matrix.\n   * @param result\n   * @returns self\n   */\n  getScale(result: NumericArray = [-0, -0, -0]): NumericArray {\n    // explicit is faster than hypot...\n    result[0] = Math.sqrt(this[0] * this[0] + this[1] * this[1] + this[2] * this[2]);\n    result[1] = Math.sqrt(this[4] * this[4] + this[5] * this[5] + this[6] * this[6]);\n    result[2] = Math.sqrt(this[8] * this[8] + this[9] * this[9] + this[10] * this[10]);\n    // result[0] = Math.hypot(this[0], this[1], this[2]);\n    // result[1] = Math.hypot(this[4], this[5], this[6]);\n    // result[2] = Math.hypot(this[8], this[9], this[10]);\n    return result;\n  }\n\n  /**\n   * Gets the translation portion, assuming the matrix is a affine transformation matrix.\n   * @param result\n   * @returns self\n   */\n  getTranslation(result: NumericArray = [-0, -0, -0]): NumericArray {\n    result[0] = this[12];\n    result[1] = this[13];\n    result[2] = this[14];\n    return result;\n  }\n\n  /**\n   * Gets upper left 3x3 pure rotation matrix (non-scaling), assume affine transformation matrix\n   * @param result\n   * @param scaleResult\n   * @returns self\n   */\n  getRotation(result?: NumericArray, scaleResult?: NumericArray): NumericArray {\n    result = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];\n    scaleResult = scaleResult || [-0, -0, -0];\n    const scale = this.getScale(scaleResult);\n    const inverseScale0 = 1 / scale[0];\n    const inverseScale1 = 1 / scale[1];\n    const inverseScale2 = 1 / scale[2];\n    result[0] = this[0] * inverseScale0;\n    result[1] = this[1] * inverseScale1;\n    result[2] = this[2] * inverseScale2;\n    result[3] = 0;\n    result[4] = this[4] * inverseScale0;\n    result[5] = this[5] * inverseScale1;\n    result[6] = this[6] * inverseScale2;\n    result[7] = 0;\n    result[8] = this[8] * inverseScale0;\n    result[9] = this[9] * inverseScale1;\n    result[10] = this[10] * inverseScale2;\n    result[11] = 0;\n    result[12] = 0;\n    result[13] = 0;\n    result[14] = 0;\n    result[15] = 1;\n    return result;\n  }\n\n  /**\n   *\n   * @param result\n   * @param scaleResult\n   * @returns self\n   */\n  getRotationMatrix3(result?: NumericArray, scaleResult?: NumericArray): NumericArray {\n    result = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0];\n    scaleResult = scaleResult || [-0, -0, -0];\n    const scale = this.getScale(scaleResult);\n    const inverseScale0 = 1 / scale[0];\n    const inverseScale1 = 1 / scale[1];\n    const inverseScale2 = 1 / scale[2];\n    result[0] = this[0] * inverseScale0;\n    result[1] = this[1] * inverseScale1;\n    result[2] = this[2] * inverseScale2;\n    result[3] = this[4] * inverseScale0;\n    result[4] = this[5] * inverseScale1;\n    result[5] = this[6] * inverseScale2;\n    result[6] = this[8] * inverseScale0;\n    result[7] = this[9] * inverseScale1;\n    result[8] = this[10] * inverseScale2;\n    return result;\n  }\n\n  // Modifiers\n\n  transpose(): this {\n    mat4.transpose(this, this);\n    return this.check();\n  }\n\n  invert(): this {\n    mat4.invert(this, this);\n    return this.check();\n  }\n\n  // Operations\n\n  multiplyLeft(a: Readonly<NumericArray>): this {\n    mat4.multiply(this, a, this);\n    return this.check();\n  }\n\n  multiplyRight(a: Readonly<NumericArray>): this {\n    mat4.multiply(this, this, a);\n    return this.check();\n  }\n\n  // Rotates a matrix by the given angle around the X axis\n  rotateX(radians: number): this {\n    mat4.rotateX(this, this, radians);\n    // mat4.rotate(this, this, radians, [1, 0, 0]);\n    return this.check();\n  }\n\n  // Rotates a matrix by the given angle around the Y axis.\n  rotateY(radians: number): this {\n    mat4.rotateY(this, this, radians);\n    // mat4.rotate(this, this, radians, [0, 1, 0]);\n    return this.check();\n  }\n\n  /**\n   * Rotates a matrix by the given angle around the Z axis.\n   * @param radians\n   * @returns self\n   */\n  rotateZ(radians: number): this {\n    mat4.rotateZ(this, this, radians);\n    // mat4.rotate(this, this, radians, [0, 0, 1]);\n    return this.check();\n  }\n\n  /**\n   *\n   * @param param0\n   * @returns self\n   */\n  rotateXYZ(angleXYZ: Readonly<NumericArray>): this {\n    return this.rotateX(angleXYZ[0]).rotateY(angleXYZ[1]).rotateZ(angleXYZ[2]);\n  }\n\n  /**\n   *\n   * @param radians\n   * @param axis\n   * @returns self\n   */\n  rotateAxis(radians: number, axis: Readonly<NumericArray>): this {\n    mat4.rotate(this, this, radians, axis);\n    return this.check();\n  }\n\n  /**\n   *\n   * @param factor\n   * @returns self\n   */\n  scale(factor: number | Readonly<NumericArray>): this {\n    mat4.scale(this, this, Array.isArray(factor) ? factor : [factor, factor, factor]);\n    return this.check();\n  }\n\n  /**\n   *\n   * @param vec\n   * @returns self\n   */\n  translate(vector: Readonly<NumericArray>): this {\n    mat4.translate(this, this, vector);\n    return this.check();\n  }\n\n  // Transforms\n\n  /**\n   * Transforms any 2, 3 or 4 element vector. 2 and 3 elements are treated as points\n   * @param vector\n   * @param result\n   * @returns self\n   */\n  transform(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    if (vector.length === 4) {\n      result = vec4.transformMat4(result || [-0, -0, -0, -0], vector, this);\n      checkVector(result, 4);\n      return result;\n    }\n    return this.transformAsPoint(vector, result);\n  }\n\n  /**\n   * Transforms any 2 or 3 element array as point (w implicitly 1)\n   * @param vector\n   * @param result\n   * @returns self\n   */\n  transformAsPoint(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    const {length} = vector;\n    let out: NumericArray;\n    switch (length) {\n      case 2:\n        out = vec2.transformMat4(result || [-0, -0], vector, this);\n        break;\n      case 3:\n        out = vec3.transformMat4(result || [-0, -0, -0], vector, this);\n        break;\n      default:\n        throw new Error('Illegal vector');\n    }\n    checkVector(out, vector.length);\n    return out;\n  }\n\n  /**\n   * Transforms any 2 or 3 element array as vector (w implicitly 0)\n   * @param vector\n   * @param result\n   * @returns self\n   */\n  transformAsVector(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    let out: NumericArray;\n    switch (vector.length) {\n      case 2:\n        out = vec2_transformMat4AsVector(result || [-0, -0], vector, this);\n        break;\n      case 3:\n        out = vec3_transformMat4AsVector(result || [-0, -0, -0], vector, this);\n        break;\n      default:\n        throw new Error('Illegal vector');\n    }\n    checkVector(out, vector.length);\n    return out;\n  }\n\n  /** @deprecated */\n  transformPoint(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    return this.transformAsPoint(vector, result);\n  }\n\n  /** @deprecated */\n  transformVector(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    return this.transformAsPoint(vector, result);\n  }\n\n  /** @deprecated */\n  transformDirection(vector: Readonly<NumericArray>, result?: NumericArray): NumericArray {\n    return this.transformAsVector(vector, result);\n  }\n\n  // three.js math API compatibility\n\n  makeRotationX(radians: number): this {\n    return this.identity().rotateX(radians);\n  }\n\n  makeTranslation(x: number, y: number, z: number): this {\n    return this.identity().translate([x, y, z]);\n  }\n}\n\n// TODO initializing static members directly is an option, but make sure no tree-shaking issues\nlet ZERO: Matrix4;\nlet IDENTITY: Matrix4;\n\nfunction getZeroMatrix(): Readonly<Matrix4> {\n  if (!ZERO) {\n    ZERO = new Matrix4([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n    Object.freeze(ZERO);\n  }\n  return ZERO;\n}\n\nfunction getIdentityMatrix(): Matrix4 {\n  if (!IDENTITY) {\n    IDENTITY = new Matrix4();\n    Object.freeze(IDENTITY);\n  }\n  return IDENTITY;\n}\n\n// HELPER FUNCTIONS\n\nfunction checkRadians(possiblyDegrees: number) {\n  if (possiblyDegrees > Math.PI * 2) {\n    throw Error('expected radians');\n  }\n}\n\n// eslint-disable-next-line max-params\nfunction computeInfinitePerspectiveOffCenter(\n  result: NumericArray,\n  left: number,\n  right: number,\n  bottom: number,\n  top: number,\n  near: number\n): NumericArray {\n  const column0Row0 = (2 * near) / (right - left);\n  const column1Row1 = (2 * near) / (top - bottom);\n  const column2Row0 = (right + left) / (right - left);\n  const column2Row1 = (top + bottom) / (top - bottom);\n  const column2Row2 = -1;\n  const column2Row3 = -1;\n  const column3Row2 = -2 * near;\n  result[0] = column0Row0;\n  result[1] = 0;\n  result[2] = 0;\n  result[3] = 0;\n  result[4] = 0;\n  result[5] = column1Row1;\n  result[6] = 0;\n  result[7] = 0;\n  result[8] = column2Row0;\n  result[9] = column2Row1;\n  result[10] = column2Row2;\n  result[11] = column2Row3;\n  result[12] = 0;\n  result[13] = 0;\n  result[14] = column3Row2;\n  result[15] = 0;\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}